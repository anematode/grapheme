(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = global || self, factory(global.Grapheme = {}));
}(this, function (exports) { 'use strict';

  /**
   * @file This file defines functions for bit-level manipulation of double-precision floating point numbers. More
   * information can be found in Grapheme Theory.
   */

  /**
   * Check endianness. The functions in this file will not work on big-endian systems, so we need to throw an error if that is the case.
   * Credit goes to Lucio Pavia on StackOverflow, specifically {@link https://stackoverflow.com/a/52827031/13458117|this answer}.
   * It is released under CC BY-SA 4.0, which is compatible with this project.
   * @ignore
   */
  const isBigEndian = (() => {
    const array = new Uint8Array(4);
    const view = new Uint32Array(array.buffer);
    return !((view[0] = 1) & array[0]);
  })();

  if (isBigEndian) throw new Error('only works on little-endian systems; your system is mixed- or big-endian.'); // Used for bit-level manipulation of floats

  const floatStore = new Float64Array(1);
  const intView = new Uint32Array(floatStore.buffer);
  /**
   * Returns the next floating point number after a positive x, but doesn't account for special cases.
   * @param x {number}
   * @returns {number}
   * @private
   */

  function _roundUp(x) {
    floatStore[0] = x;
    if (++intView[0] === 4294967296
    /* uint32_max + 1 */
    ) ++intView[1];
    return floatStore[0];
  }
  /**
   * Returns the previous floating point number before a positive x, but doesn't account for special cases.
   * @param x {number}
   * @returns {number}
   * @private
   */


  function _roundDown(x) {
    floatStore[0] = x;
    if (--intView[0] === -1) --intView[1];
    return floatStore[0];
  }
  /**
   * Returns the next floating point number after x. For example, roundUp(0) returns Number.MIN_VALUE.
   * Special cases (±inf, NaNs, 0) are handled separately. (An interesting special case is -Number.MIN_VALUE,
   * which would normally return -0 and thus must be handled separately.) Then, the float is put into a TypedArray,
   * treated as an integer, and incremented, which sets it to the next representable value. roundUp should
   * NEVER return -0 or -Infinity, but it can accept those values. On my computer both these functions take about
   * 20 ns / call (October 2020). They need to be performant because they are called very often (every interval
   * function, pretty much).
   * @param x {number} Any floating-point number
   * @returns {number} The next representable floating-point number, handling special cases
   * @function roundUp
   * @memberOf FP
   */


  function roundUp(x) {
    // Special cases, where the float representation will mess us up
    if (x === Infinity) return Infinity;
    if (x === -Infinity) return -Number.MAX_VALUE; // since -0 === 0, deals with signed zero

    if (x === 0) return Number.MIN_VALUE;
    if (Number.isNaN(x)) return NaN; // Special case unique to roundUp

    if (x === -Number.MIN_VALUE) return 0;
    return x < 0 ? -_roundDown(-x) : _roundUp(x);
  }
  /**
   * Returns the previous floating point number before x. For example, roundUp(0) returns -Number.MIN_VALUE.
   * See {@link FP.roundUp} for implementation explanation. This function should NEVER return -0 or
   * +Infinity, but it can accept those values; roundDown(0) is -Number.MIN_VALUE and roundDown(Infinity) is
   * Number.MAX_VALUE.
   * @param x {number} Any floating-point number
   * @returns {number} The previous representable floating-point number, handling special cases
   * @function roundDown
   * @memberOf FP
   */

  function roundDown(x) {
    if (x === Infinity) return Number.MAX_VALUE;
    if (x === -Infinity) return -Infinity;
    if (x === 0) return -Number.MIN_VALUE;
    if (Number.isNaN(x)) return NaN;
    return x < 0 ? -_roundUp(-x) : _roundDown(x);
  } // The first positive normal number

  const POSITIVE_NORMAL_MIN = 2.2250738585072014e-308; // The first negative normal number

  const NEGATIVE_NORMAL_MAX = -POSITIVE_NORMAL_MIN;
  /**
   * Return whether a number is denormal; see {@link https://en.wikipedia.org/wiki/Denormal_number|Wikipedia} for a
   * technical explanation of what this means. ±0 are not considered denormal numbers. Denormal numbers are sometimes
   * known as subnormal numbers.
   * @param x {number} Any floating-point number
   * @returns {boolean} Whether the number is a denormal number
   * @function isDenormal
   * @memberOf FP
   */

  function isDenormal(x) {
    // Note that NaN will return false, since NaN < anything is false.
    return x !== 0 && x < POSITIVE_NORMAL_MIN && x > NEGATIVE_NORMAL_MAX;
  }
  /**
   * Get the non-biased exponent of a floating-point number x. Equivalent mathematically to floor(log2(abs(x))) for
   * finite values, but more accurate as the precision of log2 is not technically guaranteed. My tests on Chrome suggest
   * that it is actually twice as fast as floor(log2(...)), which is surprising; the culprit is likely the log2 function,
   * which must calculate to full precision before being floored.
   * @param x {number} Any floating-point number
   * @returns {number} The non-biased exponent of that number's floating-point representation
   * @function getExponent
   * @memberOf FP
   */

  function getExponent(x) {
    floatStore[0] = x; // Mask the biased exponent, retrieve it and convert it to non-biased

    return ((intView[1] & 0x7ff00000) >> 20) - 1023;
  } // Internal function

  function _getMantissaHighWord() {
    return intView[1] & 0x000fffff;
  }
  /**
   * Get the mantissa of a floating-point number as an integer in [0, 2^52).
   * @param x {number} Any floating-point number
   * @returns {number} An integer in [0, 2^52) containing the mantissa of that number
   * @function getMantissa
   * @memberOf FP
   */


  function getMantissa(x) {
    floatStore[0] = x;
    return intView[0] + _getMantissaHighWord() * 4294967296;
  }
  function getExponentAndMantissa(x) {
    floatStore[0] = x;
    return [((intView[1] & 0x7ff00000) >> 20) - 1023, intView[0] + _getMantissaHighWord() * 4294967296];
  }
  /**
   * Testing function counting the approximate number of floats between x1 and x2, including x1 but excluding x2. NaN if
   * either is undefined. It is approximate because the answer may sometimes exceed Number.MAX_SAFE_INTEGER, but it is
   * exact if the answer is less than Number.MAX_SAFE_INTEGER.
   * @param x1 {number} The lesser number
   * @param x2 {number} The greater number
   * @returns {number} The number of floats in the interval [x1, x2)
   * @function getExponent
   * @memberOf FP
   */

  function countFloatsBetween(x1, x2) {
    if (Number.isNaN(x1) || Number.isNaN(x2)) {
      return NaN;
    }

    if (x1 === x2) return 0;

    if (x2 < x1) {
      const tmp = x1;
      x1 = x2;
      x2 = tmp;
    }

    const [x1man, x1exp] = frExp(x1);
    const [x2man, x2exp] = frExp(x2);
    return (x2man - x1man) * 2 ** 53 + (x2exp - x1exp) * 2 ** 52;
  }
  /**
   * Calculates 2 ^ exp, using a customized method for integer exponents. An examination of V8's pow function didn't
   * reveal any special handling, and indeed my benchmark indicates this method is 3 times faster than pow for integer
   * exponents. Note that bit shifts can't really be used except for a restricted range of exponents.
   * @param exp {number} Exponent; intended for use with integers, but technically works with any floating-point number.
   * @returns {number} Returns 2 ^ exp, and is guaranteed to be exact for integer exponents.
   * @function pow2
   * @memberOf FP
   */

  function pow2(exp) {
    if (!Number.isInteger(exp)) return Math.pow(2, exp);
    if (exp > 1023) return Infinity;
    if (exp < -1074) return 0;

    if (exp < -1022) {
      // Works because of JS's insane casting systems
      const field = 1 << exp + 1074;

      if (exp > -1043) {
        // denormalized case 1
        intView[0] = 0;
        intView[1] = field;
      } else {
        // case 2
        intView[0] = field;
        intView[1] = 0;
      }
    } else {
      intView[0] = 0;
      intView[1] = exp + 1023 << 20;
    }

    return floatStore[0];
  } // Counts the number of trailing zeros in a 32-bit integer n; similar to <i>Math.clz32</i>.

  function countTrailingZeros(n) {
    let bits = 0;

    if (n !== 0) {
      let x = n; // Suck off groups of 16 bits, then 8 bits, et cetera

      if ((x & 0x0000ffff) === 0) {
        bits += 16;
        x >>>= 16;
      }

      if ((x & 0x000000ff) === 0) {
        bits += 8;
        x >>>= 8;
      }

      if ((x & 0x0000000f) === 0) {
        bits += 4;
        x >>>= 4;
      }

      if ((x & 0x00000003) === 0) {
        bits += 2;
        x >>>= 2;
      }

      bits += x & 1 ^ 1;
    } else {
      return 32;
    }

    return bits;
  } // Internal function


  function _mantissaCtz() {
    const bits = countTrailingZeros(intView[0]);

    if (bits === 32) {
      const secondWordCount = countTrailingZeros(_getMantissaHighWord());
      return 32 + Math.min(secondWordCount, 20);
    }

    return bits;
  }
  /**
   * Counts the number of trailing zeros in the mantissa of a floating-point number, between 0 and 52.
   * @param d {number} A floating-point number
   * @returns {number} The number of trailing zeros in that number's mantissa
   * @function mantissaCtz
   * @memberOf FP
   */


  function mantissaCtz(d) {
    floatStore[0] = d;
    return _mantissaCtz();
  } // Internal function

  function _mantissaClz() {
    const bits = Math.clz32(_getMantissaHighWord()) - 12; // subtract the exponent zeroed part

    return bits !== 20 ? bits : bits + Math.clz32(intView[0]);
  }
  /**
   * Counts the number of leading zeros in the mantissa of a floating-point number, between 0 and 52.
   * @param d {number} A floating-point number
   * @returns {number} The number of leading zeros in that number's mantissa
   * @function mantissaClz
   * @memberOf FP
   */


  function mantissaClz(d) {
    floatStore[0] = d;
    return _mantissaClz();
  }
  /**
   * Converts a floating-point number into a fraction in [0.5, 1) or (-1, -0.5], except special cases, and an exponent,
   * such that fraction * 2 ^ exponent gives the original floating point number. If x is ±0, ±Infinity or NaN, [x, 0] is
   * returned to maintain this guarantee.
   * @param x {number} Any floating-point number
   * @returns {number[]} [fraction, exponent]
   * @function frExp
   * @memberOf FP
   */

  function frExp(x) {
    if (x === 0 || !Number.isFinite(x)) return [x, 0]; // +1 so that the fraction is between 0.5 and 1 instead of 1 and 2

    let exp = getExponent(x) + 1; // Denormal

    if (exp === -1022) {
      // If the mantissa is the integer m, then we should subtract clz(m) from exp to get a suitable answer
      exp -= _mantissaClz();
    }

    return [x / pow2(exp), exp];
  }
  /**
   * Converts a floating-point number into a numerator, denominator and exponent such that it is equal to n/d * 2^e. n and
   * d are guaranteed to be less than or equal to 2^53 and greater than or equal to 0 (unless the number is ±0, Infinity,
   * or NaN, at which point [x, 1, 0] is returned). See Grapheme Theory for details. n/d is between 0.5 and 1.
   * @param x {number} Any floating-point number
   * @returns {number[]} [numerator, denominator, exponent]
   * @function rationalExp
   * @memberOf FP
   */

  function rationalExp(x) {
    const [frac, denExponent, exp] = rationalExpInternal(x);
    let den = pow2(denExponent);
    return [frac * den, den, exp];
  }

  function rationalExpInternal(x) {
    if (x < 0) {
      const [num, den, exp] = rationalExpInternal(-x);
      return [-num, den, exp];
    }

    if (x === 0 || !Number.isFinite(x)) return [x, 0, 0]; // Decompose into frac * 2 ^ exp

    const [frac, exp] = frExp(x); // This tells us the smallest power of two which frac * (2 ** shift) is an integer, which is the denominator
    // of the dyadic rational corresponding to x

    const denExponent = 53 - mantissaCtz(frac);
    return [frac, denExponent, exp];
  }
  /**
   * Converts a floating-point number into an integer and exponent [i, e], so that i * 2^e gives the original number. i
   * will be within the bounds of Number.MAX_SAFE_INTEGER.
   * @param x
   */


  function integerExp(x) {
    const [frac, denExponent, exp] = rationalExpInternal(x);
    return [frac * pow2(denExponent), exp - denExponent];
  }
  /**
   * Compute an ACCURATE floor log 2 function. floor(log2(268435455.99999994)), for example, returns 28 when it should
   * mathematically return 27.
   * @param x
   */

  function flrLog2(x) {
    let exp = getExponent(x) + 1;
    if (exp === -1022) exp -= _mantissaClz();
    return exp - 1;
  }

  var fp_manip = /*#__PURE__*/Object.freeze({
    floatStore: floatStore,
    intView: intView,
    roundUp: roundUp,
    roundDown: roundDown,
    isDenormal: isDenormal,
    getExponent: getExponent,
    getMantissa: getMantissa,
    getExponentAndMantissa: getExponentAndMantissa,
    countFloatsBetween: countFloatsBetween,
    pow2: pow2,
    mantissaCtz: mantissaCtz,
    mantissaClz: mantissaClz,
    frExp: frExp,
    rationalExp: rationalExp,
    integerExp: integerExp,
    flrLog2: flrLog2
  });

  // import { WASM } from "../wasm/wasm.js"
  let version = 0;
  /**
   * This function returns a number starting from 1 that never decreases. It is used to store "when" an operation has
   * occurred, and thus whether to consider it a change.
   * @returns {number}
   */

  function getVersionID() {
    return ++version;
  }
  function benchmark(callback, iterations = 100, name) {
    const start = performance.now();

    for (let i = 0; i < iterations; ++i) {
      callback();
    }

    const duration = performance.now() - start;
    console.log("Function ".concat(name !== null && name !== void 0 ? name : callback.name, " took ").concat(duration / iterations, " ms") + (iterations === 1 ? '.' : ' per call.'));
  }
  function time(callback, output = console.log) {
    const start = performance.now();
    let result = 'finished';

    try {
      callback();
    } catch (e) {
      result = 'threw';
      throw e;
    } finally {
      output("Function ".concat(callback.name, " ").concat(result, " in ").concat(performance.now() - start, " ms."));
    }
  }
  function assertRange(num, min, max, variableName = 'Unknown variable') {
    if (num < min || num > max || Number.isNaN(num)) {
      throw new RangeError("".concat(variableName, " must be in the range [").concat(min, ", ").concat(max, "]"));
    }
  }
  function isPrimitive(obj) {
    return typeof obj === 'object' && obj !== null;
  } // Generate an id of the form xxxx-xxxx
  // TODO: guarantee no collisions via LFSR or something similar

  function getStringID() {
    function randLetter() {
      return String.fromCharCode(Math.round(Math.random() * 25 + 97));
    }

    function randFourLetter() {
      return randLetter() + randLetter() + randLetter() + randLetter();
    }

    return randFourLetter() + '-' + randFourLetter();
  } // Simple deep equals. Uses Object.is-type equality, though. Doesn't handle circularity or any of the fancy new containers

  function deepEquals(x, y) {
    if (typeof x !== 'object' || x === null) return Object.is(x, y);
    if (x.constructor !== y.constructor) return false;

    if (Array.isArray(x) && Array.isArray(y)) {
      if (x.length !== y.length) return false;

      for (let i = x.length - 1; i >= 0; --i) {
        if (!deepEquals(x[i], y[i])) return false;
      }

      return true;
    } // The only other thing of consequence to us. Could probably handle other weird objects too, but meh.


    if (isTypedArray(x) && isTypedArray(y)) {
      if (x.length !== y.length) return false;

      if (x instanceof Float32Array || x instanceof Float64Array) {
        for (let i = x.length - 1; i >= 0; --i) {
          const xv = x[i]; // What a beautiful way to test for same valueness between floats!

          if (xv !== y[i] && !(xv !== xv && y[i] !== y[i]) || xv === 0 && 1 / xv !== 1 / y[i]) return false;
        }
      } else {
        for (let i = x.length - 1; i >= 0; --i) {
          if (x[i] !== y[i]) return false;
        }
      }

      return true;
    }

    if (x instanceof Map || x instanceof Set) return false; // Just in case
    // x and y are just objects

    const keys = Object.keys(x);
    if (Object.keys(y).length !== keys.length) return false;

    for (const key of keys) {
      // fails if y is Object.create(null)
      if (!y.hasOwnProperty(key)) return false;
      if (!deepEquals(x[key], y[key])) return false;
    }

    return true;
  }
  /**
   * Merge two objects, not checking for circularity, not merging arrays, modifying the first object
   * @param target {{}}
   * @param source {{}}
   * @param opts
   */

  function deepAssign(target, source, opts = {}) {
    var _opts$cloneArrays, _opts$assignUndefined;

    opts.cloneArrays = (_opts$cloneArrays = opts.cloneArrays) !== null && _opts$cloneArrays !== void 0 ? _opts$cloneArrays : true;
    opts.assignUndefined = (_opts$assignUndefined = opts.assignUndefined) !== null && _opts$assignUndefined !== void 0 ? _opts$assignUndefined : false;
    return deepAssignInternal(target, source, opts);
  }

  function deepAssignInternal(target, source, opts) {
    if (typeof source !== 'object') return source !== undefined || opts.assignUndefined ? source : target;
    if (Array.isArray(target) || isTypedArray(target)) return opts.cloneArrays ? deepClone(source) : source;

    for (const key in source) {
      if (source.hasOwnProperty(key)) {
        let sourceVal = source[key];

        if (opts.assignUndefined || sourceVal !== undefined) {
          let val = target[key];
          let sourceIsArray = Array.isArray(sourceVal) || isTypedArray(sourceVal);

          if (typeof val === 'object' && !Array.isArray(val)) {
            if (typeof sourceVal === 'object' && !sourceIsArray) {
              deepAssign(val, sourceVal, opts);
              continue;
            }
          }

          target[key] = sourceIsArray && opts.cloneArrays ? deepClone(sourceVal) : sourceVal;
        }
      }
    }

    return target;
  }
  /**
   * Same as deepAssign, but creating a copy of the object. Arrays are optionally copied.
   * @param target {{}}
   * @param source {{}}
   * @param opts
   */


  function deepMerge(target, source, opts = {}) {
    if (target === undefined) return deepClone(source, opts);
    return deepAssign(deepClone(target, opts), source, opts);
  }
  /**
   * Deep clone an object, not checking for circularity or other weirdness, optionally cloning arrays
   * @param object
   * @param opts
   */

  function deepClone(object, opts = {}) {
    var _opts$cloneArrays2;

    opts.cloneArrays = (_opts$cloneArrays2 = opts.cloneArrays) !== null && _opts$cloneArrays2 !== void 0 ? _opts$cloneArrays2 : true;
    return deepCloneInternal(object, opts);
  }

  function deepCloneInternal(object, opts = {}) {
    if (typeof object !== 'object') return object;

    if (Array.isArray(object)) {
      return opts.cloneArrays ? object.map(val => deepCloneInternal(val, opts)) : object;
    } else if (isTypedArray(object)) {
      return opts.cloneArrays ? new object.constructor(object) : object;
    }

    let ret = {};

    for (let key in object) {
      if (object.hasOwnProperty(key)) {
        ret[key] = deepClone(object[key], opts);
      }
    }

    return ret;
  }

  function isTypedArray(arr) {
    return ArrayBuffer.isView(arr) && !(arr instanceof DataView);
  }
  function isFloatArray(arr) {
    let type = getTypedArrayType(arr);
    return type === "f32" || type === "f64";
  }
  function getTypedArrayType(arr) {
    if (arr instanceof Float32Array) return "f32";
    if (arr instanceof Float64Array) return "f64";
  }
  function getTypedArrayConstructor(type) {
    if (type === "f32") return Float32Array;
    if (type === "f64") return Float64Array;
  }
  function mod(n, m) {
    return (n % m + m) % m;
  }
  function nextPowerOfTwo(n) {
    return 1 << Math.ceil(Math.log2(n));
  }
  /**
   * Freeze an object and all its children. Does not account for cycles
   * @param obj
   */

  function deepFreeze(obj) {
    Object.freeze(obj);
    Object.values(obj).forEach(value => {
      if (typeof value === 'function' || typeof value === 'object') deepFreeze(value);
    });
    return obj;
  }
  function leftZeroPad(str, len, char = '0') {
    if (str.length >= len) return str;
    return char.repeat(len - str.length) + str;
  }
  function rightZeroPad(str, len, char = '0') {
    if (str.length >= len) return str;
    return str + char.repeat(len - str.length);
  }
  function trimLeft(str, char) {
    let i = 0;

    for (; i < str.length; ++i) {
      if (str.charAt(i) !== char) break;
    }

    return str.substring(i);
  }
  /**
   * Credit to https://github.com/gustf/js-levenshtein/blob/master/index.js. Find the Levenshtein distance between two
   * strings.
   */

  const levenshtein = function () {
    function _min(d0, d1, d2, bx, ay) {
      return d0 < d1 || d2 < d1 ? d0 > d2 ? d2 + 1 : d0 + 1 : bx === ay ? d1 : d1 + 1;
    }

    return function (a, b) {
      if (a === b) {
        return 0;
      }

      if (a.length > b.length) {
        var tmp = a;
        a = b;
        b = tmp;
      }

      var la = a.length;
      var lb = b.length;

      while (la > 0 && a.charCodeAt(la - 1) === b.charCodeAt(lb - 1)) {
        la--;
        lb--;
      }

      var offset = 0;

      while (offset < la && a.charCodeAt(offset) === b.charCodeAt(offset)) {
        offset++;
      }

      la -= offset;
      lb -= offset;

      if (la === 0 || lb < 3) {
        return lb;
      }

      var x = 0;
      var y, d0, d1, d2, d3, dd, dy, ay, bx0, bx1, bx2, bx3;
      var vector = [];

      for (y = 0; y < la; y++) {
        vector.push(y + 1);
        vector.push(a.charCodeAt(offset + y));
      }

      var len = vector.length - 1;

      for (; x < lb - 3;) {
        bx0 = b.charCodeAt(offset + (d0 = x));
        bx1 = b.charCodeAt(offset + (d1 = x + 1));
        bx2 = b.charCodeAt(offset + (d2 = x + 2));
        bx3 = b.charCodeAt(offset + (d3 = x + 3));
        dd = x += 4;

        for (y = 0; y < len; y += 2) {
          dy = vector[y];
          ay = vector[y + 1];
          d0 = _min(dy, d0, d1, bx0, ay);
          d1 = _min(d0, d1, d2, bx1, ay);
          d2 = _min(d1, d2, d3, bx2, ay);
          dd = _min(d2, d3, dd, bx3, ay);
          vector[y] = dd;
          d3 = d2;
          d2 = d1;
          d1 = d0;
          d0 = dy;
        }
      }

      for (; x < lb;) {
        bx0 = b.charCodeAt(offset + (d0 = x));
        dd = ++x;

        for (y = 0; y < len; y += 2) {
          dy = vector[y];
          vector[y] = dd = _min(dy, d0, dd, bx0, vector[y + 1]);
          d0 = dy;
        }
      }

      return dd;
    };
  }();
  const onReadyCallbacks = [];
  function onReady(callback) {
    onReadyCallbacks.push(callback);
  }
  setTimeout(() => {
    for (const callback of onReadyCallbacks) callback();
  }, 0);

  var utils = /*#__PURE__*/Object.freeze({
    getVersionID: getVersionID,
    benchmark: benchmark,
    time: time,
    assertRange: assertRange,
    isPrimitive: isPrimitive,
    getStringID: getStringID,
    deepEquals: deepEquals,
    deepAssign: deepAssign,
    deepMerge: deepMerge,
    deepClone: deepClone,
    isTypedArray: isTypedArray,
    isFloatArray: isFloatArray,
    getTypedArrayType: getTypedArrayType,
    getTypedArrayConstructor: getTypedArrayConstructor,
    mod: mod,
    nextPowerOfTwo: nextPowerOfTwo,
    deepFreeze: deepFreeze,
    leftZeroPad: leftZeroPad,
    rightZeroPad: rightZeroPad,
    trimLeft: trimLeft,
    levenshtein: levenshtein,
    onReady: onReady
  });

  // A rather common operation for generating texture atlases and the like.
  // Takes in an array of rectangles and returns a packing of those rectangles as a list of x and y coordinates
  // The code fucking sucks, whatever, I just want text working ASAP
  // TODO: Chazelle packing
  function packRectangles(rectangles) {
    // For now, just find the maximum size and repeat that.
    let rectWidth = 0,
        rectHeight = 0;

    for (const rectangle of rectangles) {
      rectWidth = Math.max(rectWidth, rectangle.w);
      rectHeight = Math.max(rectHeight, rectangle.h);
    }

    let rectangleCount = rectangles.length;
    // has sides that are both powers of two. We consider rectangles of the ratios 2:1, 1:1 and 1:2.

    const totalArea = rectWidth * rectHeight * rectangleCount;
    let nextPowerOfTwo = Math.ceil(Math.floor(Math.log2(totalArea)));
    let textureWidth, textureHeight;
    let rectXCount;

    function tryPacking(width, height) {
      if (textureWidth) return;
      const minYCount = Math.floor(height / rectHeight);
      let minXCount = Math.floor(width / rectWidth);
      let correspondingXCount = Math.ceil(rectangleCount / minYCount);

      if (correspondingXCount <= minXCount) {
        // Then a packing of minYCount rectangles tall and correspondingXCount rectangles wide will suffice, in a bounding
        // box of textureWidth x textureHeight
        textureWidth = width;
        textureHeight = height;
        rectXCount = correspondingXCount;
      }
    }

    while (!textureWidth) {
      if (nextPowerOfTwo % 2 !== 0) {
        let width = 1 << nextPowerOfTwo / 2;
        let height = 1 << nextPowerOfTwo / 2 + 1;
        tryPacking(width, height);
        tryPacking(height, width);
      } else {
        const sideLen = 1 << nextPowerOfTwo / 2;
        tryPacking(sideLen, sideLen);
      }

      nextPowerOfTwo++;
    }

    let rects = [];

    for (let i = 0; i < rectangleCount; ++i) {
      let x = i % rectXCount;
      let y = Math.floor(i / rectXCount);
      let rect = rectangles[i];
      rects.push({
        x: x * rectWidth,
        y: y * rectHeight,
        w: rect.w,
        h: rect.h
      });
    }

    return {
      width: textureWidth,
      height: textureHeight,
      rects
    };
  }
  class DynamicRectanglePacker {
    constructor() {
      // Given rectangles of some ids, packs them, allowing for rectangles to be deleted and new ones to be added after
      // a previous packing
      // Maps rectangle ids to rectangles { x, y, w, h }
      this.rects = new Map();
      this.packingBoundary = [];
      this.packingMaxX = 0;
      this.packingMaxY = 0;
      this.queue = [];
    }
    /**
     * Reset the packer
     */


    clear() {
      this.rects.clear();
    } // Queue a rectangle of some width and height


    queueRectangle(id, width, height) {
      this.queue.push({
        id,
        w: width,
        h: height
      });
    }

    pack() {
      // Sorted by area. In the case of text, sorting by height might make more sense
      const rectsToPack = this.queue.sort((r1, r2) => r1.w * r1.h - r2.w * r2.h); // The packing boundary is the minimal "step function" that encompasses the rectangles already allocated. Yes, I know

      for (const rect of rectsToPack) {
        let rectW = rect.w,
            rectH = rect.h;
      }
    }

  } // Credit to the authors of github.com/mapbox/potpack. I will be writing a better version soon

  function potpack(boxes) {
    // calculate total box area and maximum box width
    let area = 0;
    let maxWidth = 0;

    for (const box of boxes) {
      area += box.w * box.h;
      maxWidth = Math.max(maxWidth, box.w);
    } // sort the boxes for insertion by height, descending


    boxes.sort((a, b) => b.h - a.h); // aim for a squarish resulting container,
    // slightly adjusted for sub-100% space utilization

    const startWidth = Math.max(Math.ceil(Math.sqrt(area / 0.95)), maxWidth); // start with a single empty space, unbounded at the bottom

    const spaces = [{
      x: 0,
      y: 0,
      w: startWidth,
      h: Infinity
    }];
    let width = 0;
    let height = 0;

    for (const box of boxes) {
      // look through spaces backwards so that we check smaller spaces first
      for (let i = spaces.length - 1; i >= 0; i--) {
        const space = spaces[i]; // look for empty spaces that can accommodate the current box

        if (box.w > space.w || box.h > space.h) continue; // found the space; add the box to its top-left corner
        // |-------|-------|
        // |  box  |       |
        // |_______|       |
        // |         space |
        // |_______________|

        box.x = space.x;
        box.y = space.y;
        height = Math.max(height, box.y + box.h);
        width = Math.max(width, box.x + box.w);

        if (box.w === space.w && box.h === space.h) {
          // space matches the box exactly; remove it
          const last = spaces.pop();
          if (i < spaces.length) spaces[i] = last;
        } else if (box.h === space.h) {
          // space matches the box height; update it accordingly
          // |-------|---------------|
          // |  box  | updated space |
          // |_______|_______________|
          space.x += box.w;
          space.w -= box.w;
        } else if (box.w === space.w) {
          // space matches the box width; update it accordingly
          // |---------------|
          // |      box      |
          // |_______________|
          // | updated space |
          // |_______________|
          space.y += box.h;
          space.h -= box.h;
        } else {
          // otherwise the box splits the space into two spaces
          // |-------|-----------|
          // |  box  | new space |
          // |_______|___________|
          // | updated space     |
          // |___________________|
          spaces.push({
            x: space.x + box.w,
            y: space.y,
            w: space.w - box.w,
            h: box.h
          });
          space.y += box.h;
          space.h -= box.h;
        }

        break;
      }
    }

    return {
      w: width,
      // container width
      h: height,
      // container height
      fill: area / (width * height) || 0 // space utilization

    };
  }

  // Another one of these, yada yada, reinventing the wheel, yay
  class Vec2 {
    constructor(x, y) {
      this.x = x;
      this.y = y;
    }

    static fromObj(obj) {
      let x = 0,
          y = 0;

      if (Array.isArray(obj)) {
        x = obj[0];
        y = obj[1];
      } else if (typeof obj === 'object' && obj.x) {
        x = obj.x;
        y = obj.y;
      } else if (typeof obj === 'string') {
        switch (obj) {
          case 'N':
          case 'NE':
          case 'NW':
            y = 1;
            break;

          case 'S':
          case 'SE':
          case 'SW':
            y = -1;
            break;
        }

        switch (obj) {
          case 'E':
          case 'NE':
          case 'SE':
            x = 1;
            break;

          case 'W':
          case 'NW':
          case 'SW':
            x = -1;
            break;
        }

        if (x === 0 && y === 0 && obj !== 'C') return undefined;
      } else return undefined;

      return new Vec2(+x, +y);
    }

    add(vec) {
      return new Vec2(this.x + vec.x, this.y + vec.y);
    }

    sub(vec) {
      return new Vec2(this.x - vec.x, this.y - vec.y);
    }

    mul(scalar) {
      return new Vec2(this.x * scalar, this.y * scalar);
    }

    rot(angle, centre) {
      let s = Math.sin(angle),
          c = Math.cos(angle);
      if (!centre) return new Vec2(c * this.x - s * this.y, s * this.x + c * this.y);
    }

    rotDeg(angle, centre) {
      return this.rot(angle * Math.PI / 180, centre);
    }

    unit() {
      return this.mul(1 / this.len());
    }

    len() {
      return Math.hypot(this.x, this.y);
    }

    lenSq() {
      return this.x * this.x + this.y * this.y;
    }

  }

  /**
   * Given some parameters describing a line segment, find a line segment that is consistent with at least two of them.
   * @param x1 {number}
   * @param x2 {number}
   * @param w {number}
   * @param cx {number}
   */

  function resolveAxisSpecification(x1, x2, w, cx) {

    if (cx !== undefined) {
      let halfWidth = 0;
      if (w !== undefined) halfWidth = w / 2;else if (x2 !== undefined) halfWidth = x2 - cx;else if (x1 !== undefined) halfWidth = cx - x1;
      halfWidth = Math.abs(halfWidth);
      return [cx - halfWidth, cx + halfWidth];
    } else if (x1 !== undefined) {
      if (w !== undefined) return [x1, x1 + w];
      if (x2 !== undefined) return [x1, x2];
    } else if (x2 !== undefined) {
      if (w !== undefined) return [x2 - w, x2];
    }

    return [0, 0];
  }
  /**
   * A bounding box. In general, we consider the bounding box to be in canvas coordinates, so that the "top" is -y and
   * the "bottom" is +y.
   */


  class BoundingBox {
    constructor(x = 0, y = 0, width = 0, height = 0) {
      this.x = x;
      this.y = y;
      this.w = width;
      this.h = height;
    }

    clone() {
      return new BoundingBox(this.x, this.y, this.w, this.h);
    }
    /**
     * Push in (or pull out) all the sides of the box by a given amount. Returns null if too far. So squishing
     * { x: 0, y: 0, w: 2, h: 2} by 1/2 will give { x: 0.5, y: 0.5, w: 1, h: 1 }
     * @param margin {number}
     */


    squish(margin = 0) {
      const {
        x,
        y,
        w,
        h
      } = this;
      if (2 * margin > w || 2 * margin > h) return null;
      return new BoundingBox(x + margin, y + margin, w - 2 * margin, h - 2 * margin);
    }

    squishAsymmetrically(left = 0, right = 0, bottom = 0, top = 0, flipY = false) {
      const {
        x,
        y,
        w,
        h
      } = this;

      if (2 * (left + right) > w || 2 * (bottom + top) > h) {
        return null;
      }

      if (flipY) {
        let tmp = bottom;
        bottom = top;
        top = tmp;
      }

      return new BoundingBox(x + left, y + top, w - (left + right), h - (top + bottom));
    }

    translate(v) {
      return new BoundingBox(this.x + v.x, this.y + v.y, this.w, this.h);
    }

    scale(s) {
      return new BoundingBox(this.x * s, this.y * s, this.w * s, this.h * s);
    }

    getX2() {
      return this.x + this.w;
    }

    getY2() {
      return this.y + this.h;
    }

    static fromObj(obj) {
      let finalX1, finalY1, finalX2, finalY2;

      if (Array.isArray(obj)) {
        finalX1 = obj[0];
        finalY1 = obj[1];
        finalX2 = obj[2] + finalX1;
        finalY2 = obj[3] + finalY1;
      } else if (typeof obj === 'object') {
        var _x, _y, _w, _h, _cx, _cy;

        let {
          x,
          y,
          x1,
          y1,
          x2,
          y2,
          w,
          h,
          width,
          height,
          cx,
          cy,
          centerX,
          centerY
        } = obj; // various aliases

        x = (_x = x) !== null && _x !== void 0 ? _x : x1;
        y = (_y = y) !== null && _y !== void 0 ? _y : y1;
        w = (_w = w) !== null && _w !== void 0 ? _w : width;
        h = (_h = h) !== null && _h !== void 0 ? _h : height;
        cx = (_cx = cx) !== null && _cx !== void 0 ? _cx : centerX;
        cy = (_cy = cy) !== null && _cy !== void 0 ? _cy : centerY // We wish to find a rectangle that is roughly consistent. Note that along each axis, we have four relevant
        // variables: x, x2, w, cx. The axes are totally separable, so the problem is pretty trivial. I'm too tired
        // to figure out how to do it elegantly rather than case work.
        ;
        [finalX1, finalX2] = resolveAxisSpecification(x, x2, w, cx);
        [finalY1, finalY2] = resolveAxisSpecification(y, y2, h, cy);
      }

      return new BoundingBox(finalX1, finalY1, finalX2 - finalX1, finalY2 - finalY1);
    }

    get x1() {
      return this.x;
    }

    get y1() {
      return this.y;
    }

    get x2() {
      return this.getX2();
    }

    get y2() {
      return this.getY2();
    }

    tl() {
      return new Vec2(this.x, this.y);
    }

  }
  const boundingBoxTransform = {
    X: (x, box1, box2, flipX) => {
      if (Array.isArray(x) || isTypedArray(x)) {
        for (let i = 0; i < x.length; ++i) {
          let fractionAlong = (x[i] - box1.x) / box1.width;
          if (flipX) fractionAlong = 1 - fractionAlong;
          x[i] = fractionAlong * box2.width + box2.x;
        }

        return x;
      } else {
        return boundingBoxTransform.X([x], box1, box2, flipX)[0];
      }
    },
    Y: (y, box1, box2, flipY) => {
      if (Array.isArray(y) || isTypedArray(y)) {
        for (let i = 0; i < y.length; ++i) {
          let fractionAlong = (y[i] - box1.y) / box1.height;
          if (flipY) fractionAlong = 1 - fractionAlong;
          y[i] = fractionAlong * box2.height + box2.y;
        }

        return y;
      } else {
        return boundingBoxTransform.Y([y], box1, box2, flipY)[0];
      }
    },
    XY: (xy, box1, box2, flipX, flipY) => {
      if (Array.isArray(xy) || isTypedArray(x)) {
        for (let i = 0; i < xy.length; i += 2) {
          let fractionAlong = (xy[i] - box1.x) / box1.width;
          if (flipX) fractionAlong = 1 - fractionAlong;
          xy[i] = fractionAlong * box2.width + box2.x;
          fractionAlong = (xy[i + 1] - box1.y) / box1.height;
          if (flipY) fractionAlong = 1 - fractionAlong;
          xy[i + 1] = fractionAlong * box2.height + box2.y;
        }

        return xy;
      } else {
        throw new Error('No');
      }
    },

    getReducedTransform(box1, box2, flipX, flipY) {
      let x_m = 1 / box1.width;
      let x_b = -box1.x / box1.width;

      if (flipX) {
        x_m *= -1;
        x_b = 1 - x_b;
      }

      x_m *= box2.width;
      x_b *= box2.width;
      x_b += box2.x;
      let y_m = 1 / box1.height;
      let y_b = -box1.y / box1.height;

      if (flipY) {
        y_m *= -1;
        y_b = 1 - y_b;
      }

      y_m *= box2.height;
      y_b *= box2.height;
      y_b += box2.y;
      return {
        x_m,
        x_b,
        y_m,
        y_b
      };
    }

  };
  const EMPTY = new BoundingBox(new Vec2(0, 0), 0, 0);

  function intersectBoundingBoxes(box1, box2) {
    let x1 = Math.max(box1.x, box2.x);
    let y1 = Math.max(box1.y, box2.y);
    let x2 = Math.min(box1.x2, box2.x2);
    let y2 = Math.min(box1.y2, box2.y2);

    if (x2 < x1) {
      return EMPTY.clone();
    }

    if (y2 < y1) {
      return EMPTY.clone();
    }

    let width = x2 - x1;
    let height = y2 - y1;
    return new BoundingBox(new Vec2(x1, y1), width, height);
  }

  /**
   * Test whether three points are in counterclockwise order
   * @param x1
   * @param y1
   * @param x2
   * @param y2
   * @param x3
   * @param y3
   * @returns {boolean}
   */

  function pointsCCW(x1, y1, x2, y2, x3, y3) {
    return (y3 - y1) * (x2 - x1) > (y2 - y1) * (x3 - x1);
  }
  /**
   * Returns whether two line segments (namely, (x1, y1) -- (x2, y2) and (x3, y3) -- (x4, y4)) intersect
   * @param x1
   * @param y1
   * @param x2
   * @param y2
   * @param x3
   * @param y3
   * @param x4
   * @param y4
   */


  function lineSegmentIntersect(x1, y1, x2, y2, x3, y3, x4, y4) {
    return pointsCCW(x1, y1, x3, y3, x4, y4) !== pointsCCW(x2, y2, x3, y3, x4, y4) && pointsCCW(x1, y1, x2, y2, x3, y3) !== pointsCCW(x1, y1, x2, y2, x4, y4);
  } // Credit to cortijon on StackOverflow! Thanks bro/sis


  function getLineIntersection(p0_x, p0_y, p1_x, p1_y, p2_x, p2_y, p3_x, p3_y) {
    let s1_x, s1_y, s2_x, s2_y;
    s1_x = p1_x - p0_x;
    s1_y = p1_y - p0_y;
    s2_x = p3_x - p2_x;
    s2_y = p3_y - p2_y;
    const s = (-s1_y * (p0_x - p2_x) + s1_x * (p0_y - p2_y)) / (-s2_x * s1_y + s1_x * s2_y);
    const t = (s2_x * (p0_y - p2_y) - s2_y * (p0_x - p2_x)) / (-s2_x * s1_y + s1_x * s2_y);

    if (s >= 0 && s <= 1 && t >= 0 && t <= 1) {
      // Collision detected
      const intX = p0_x + t * s1_x;
      const intY = p0_y + t * s1_y;
      return [intX, intY];
    }

    return null;
  }

  function lineSegmentIntersectsBox(x1, y1, x2, y2, box_x1, box_y1, box_x2, box_y2) {
    // Return the component of the line segment that resides inside a box with boundaries x in (box_x1 .. box_x2), y in
    // (box_y1 .. box_y2), which may potentially be the entire line segment.
    let pt1InBox = box_x1 <= x1 && x1 <= box_x2 && box_y1 <= y1 && y1 <= box_y2;
    let pt2InBox = box_x1 <= x2 && x2 <= box_x2 && box_y1 <= y2 && y2 <= box_y2;

    if (pt1InBox && pt2InBox) {
      // The line segment is entirely in the box
      return [x1, y1, x2, y2];
    } // Infinities cause weird problems with getLineIntersection, so we just approximate them lol


    if (x1 === Infinity) x1 = 1e6;else if (x1 === -Infinity) x1 = -1e6;
    if (x2 === Infinity) x2 = 1e6;else if (x2 === -Infinity) x2 = -1e6;
    if (y1 === Infinity) y1 = 1e6;else if (y1 === -Infinity) y1 = -1e6;
    if (y2 === Infinity) y2 = 1e6;else if (y2 === -Infinity) y2 = -1e6;
    let int1 = getLineIntersection(x1, y1, x2, y2, box_x1, box_y1, box_x2, box_y1);
    let int2 = getLineIntersection(x1, y1, x2, y2, box_x2, box_y1, box_x2, box_y2);
    let int3 = getLineIntersection(x1, y1, x2, y2, box_x2, box_y2, box_x1, box_y2);
    let int4 = getLineIntersection(x1, y1, x2, y2, box_x1, box_y2, box_x1, box_y1);

    if (!(int1 || int2 || int3 || int4) && !pt1InBox && !pt2InBox) {
      // If there are no intersections and the points are outside the box, that means none of the segment is inside the
      // box, so we can return null
      return null;
    }

    let intersections = [int1, int2, int3, int4];

    if (!pt1InBox && !pt2InBox) {
      // Both points are outside of the box, but the segment intersects the box. I'm frustrated! We must RESTRICT by finding the pair of intersections with
      // maximal separation. This deals with annoying corner cases. Thankfully this code doesn't need to be too efficient
      // since this is a rare case.
      let maximalSeparationSquared = -1;
      let n_x1, n_y1, n_x2, n_y2;

      for (let i = 0; i < 3; ++i) {
        let i1 = intersections[i];

        if (i1) {
          for (let j = i + 1; j < 4; ++j) {
            let i2 = intersections[j];

            if (i2) {
              let dist = (i2[0] - i1[0]) ** 2 + (i2[1] - i1[1]) ** 2;

              if (dist > maximalSeparationSquared) {
                maximalSeparationSquared = dist;
                n_x1 = i1[0];
                n_y1 = i1[1];
                n_x2 = i2[0];
                n_y2 = i2[1];
              }
            }
          }
        }
      } // Swap the order if necessary. We need the result of this calculation to be in the same order as the points
      // that went in, since this will be used in the dashed line logic.


      if (n_x1 < n_x2 === x1 > x2 || n_y1 < n_y2 === y1 > y2) {
        let tmp = n_x1;
        n_x1 = n_x2;
        n_x2 = tmp;
        tmp = n_y1;
        n_y1 = n_y2;
        n_y2 = tmp;
      }

      return [n_x1, n_y1, n_x2, n_y2];
    }

    if (pt1InBox) {
      for (let i = 0; i < 4; ++i) {
        let intersection = intersections[i];
        if (intersection) return [x1, y1, intersection[0], intersection[1]];
      }
    } else if (pt2InBox) {
      for (let i = 0; i < 4; ++i) {
        let intersection = intersections[i];
        if (intersection) return [intersection[0], intersection[1], x2, y2];
      }
    }

    return [x1, y1, x2, y2];
  }

  function generateCircleTriangleStrip(radius, x = 0, y = 0, samples = 8) {
    const points = [];

    for (let i = 0; i <= samples; ++i) {
      const angle = i / samples * 2 * Math.PI;
      const xc = x + radius * Math.cos(angle),
            yc = y + radius * Math.sin(angle);

      if (i % 2 === 0) {
        points.push(xc, yc);
        points.push(x, y);
      } else {
        points.push(xc, yc);
      }
    }

    points.push(NaN, NaN);
    return new Float32Array(points);
  }
  function generateRectangleTriangleStrip(rect) {
    const {
      x,
      y,
      w,
      h
    } = rect;
    const points = [x, y, x + w, y, x, y + h, x + w, y + h];
    return new Float32Array(points);
  }
  /**
   * Given a rectangle, return a flat list of points enclosing a cycle around the rectangle.
   * @param rect {BoundingBox}
   * @returns {Float32Array}
   */

  function generateRectangleCycle(rect) {
    const {
      x,
      y,
      w,
      h
    } = rect;
    const points = [x, y, x + w, y, x + w, y + h, x, y + h, x, y];
    return new Float32Array(points);
  }
  function generateRectangleDebug(rect) {
    const {
      x,
      y,
      w,
      h
    } = rect;
    const points = [x, y, x + w, y, x + w, y + h, x, y + h, x, y, x + w, y + w];
    return new Float32Array(points);
  } // Given a Float32Array of appropriate size, repeatedly add given triangle strips

  function combineTriangleStrips(verticesBuff) {
    let index = 0;
    return arr => {
      if (arr.length === 0) return; // Repeat previous vertex

      if (index > 0) {
        verticesBuff[index] = verticesBuff[index - 2];
        verticesBuff[index + 1] = verticesBuff[index - 1];
        verticesBuff[index + 2] = arr[0];
        verticesBuff[index + 3] = arr[1];
        index += 4;
      }

      verticesBuff.set(arr, index);
      index += arr.length;
    };
  }
  function combineColoredTriangleStrips(verticesBuff, colorBuff) {
    let index = 0;
    return (arr, {
      r = 0,
      g = 0,
      b = 0,
      a = 0
    }) => {
      if (arr.length === 0) return; // Repeat previous vertex

      if (index > 0) {
        verticesBuff[index] = verticesBuff[index - 2];
        verticesBuff[index + 1] = verticesBuff[index - 1];
        verticesBuff[index + 2] = arr[0];
        verticesBuff[index + 3] = arr[1];
        index += 4;
      }

      verticesBuff.set(arr, index);
      fillRepeating(colorBuff, [r / 255, g / 255, b / 255, a / 255], index * 2, 2 * (index + arr.length));
      index += arr.length;
    };
  }
  /**
   * Fill the TypedArray arr with a given pattern throughout [startIndex, endIndex). Works if either is out of bounds.
   * Worst code ever. Uses copyWithin to try make the operation FAST for large arrays (not optimized for small ones). On
   * a 50000-element array in my chrome, it provides a 16x speedup.
   * @param arr Array to fill
   * @param pattern {Array} Pattern to fill with
   * @param startIndex {number} Index of the first instance of the pattern
   * @param endIndex {number} Index immediately after the last instance of the pattern
   * @param patternStride {number} Offset to begin copying the pattern
   * @returns The original array
   */

  function fillRepeating(arr, pattern, startIndex = 0, endIndex = arr.length, patternStride = 0) {
    if (endIndex <= startIndex) return arr;
    let patternLen = pattern.length,
        arrLen = arr.length;
    if (patternLen === 0) return arr;
    endIndex = Math.min(endIndex, arrLen);
    if (endIndex <= 0 || startIndex >= arrLen) return arr;

    if (startIndex < 0) {
      patternStride -= startIndex;
      startIndex = 0;
    }

    if (patternStride !== 0) patternStride = mod(patternStride, patternLen);
    let filledEndIndex = Math.min(endIndex, startIndex + patternLen);
    let i, j;

    for (i = startIndex, j = patternStride; i < filledEndIndex && j < patternLen; ++i, ++j) {
      arr[i] = pattern[j];
    } // For nonzero strides


    for (j = 0; i < filledEndIndex; ++i, ++j) {
      arr[i] = pattern[j];
    }

    if (filledEndIndex === endIndex) return arr; // We now need to iteratively copy [startIndex, startIndex + filledLen) to [startIndex + filledLen, endIndex) and
    // double filledLen accordingly. memcpy, take the wheel!

    let filledLen = patternLen;

    while (true) {
      let copyLen = Math.min(filledLen, endIndex - filledEndIndex);
      arr.copyWithin(filledEndIndex, startIndex, startIndex + copyLen);
      filledEndIndex += copyLen;
      filledLen += copyLen; // Should never be greater, but whatever

      if (filledEndIndex >= endIndex) return arr;
    }
  }

  function _flattenVec2ArrayInternal(arr) {
    const out = [];

    for (let i = 0; i < arr.length; ++i) {
      let item = arr[i];

      if (item === null || item === undefined) {
        out.push(NaN, NaN);
      } else if (item.x !== undefined && item.y !== undefined) {
        out.push(item.x, item.y);
      } else if (item[0] !== undefined) {
        var _item$;

        out.push(+item[0], (_item$ = item[1]) !== null && _item$ !== void 0 ? _item$ : 0);
      } else {
        if (typeof item === 'number') out.push(item);else throw new TypeError("Error when converting array to flattened Vec2 array: Unknown item ".concat(item, " at index ").concat(i, " in given array"));
      }
    }

    return out;
  } // Given some arbitrary array of Vec2s, turn it into the regularized format [x1, y1, x2, y2, ..., xn, yn]. The end of
  // one polyline and the start of another is done by one pair of numbers being NaN, NaN.


  function flattenVec2Array(arr) {
    if (isTypedArray(arr)) return arr;

    for (let i = 0; i < arr.length; ++i) {
      if (typeof arr[i] !== 'number') return _flattenVec2ArrayInternal(arr);
    }

    return arr;
  }
  function fastAtan2(y, x) {
    let abs_x = Math.abs(x);
    let abs_y = Math.abs(y);
    let a = abs_x < abs_y ? abs_x / abs_y : abs_y / abs_x; // atan(x) is about x - x^3 / 3 + x^5 / 5. We also note that atan(1/x) = pi/2 - atan(x) for x > 0, etc.

    let s = a * a;
    let r = ((-0.0464964749 * s + 0.15931422) * s - 0.327622764) * s * a + a;
    if (abs_y > abs_x) r = 1.57079637 - r;
    if (x < 0.0) r = 3.14159265 - r;
    if (y < 0.0) r = -r;
    return r;
  }
  /**
   * Get the approximate angle between (x1, y1), (x2, y2) and (x3, y3), an operation which should ideally be extremely
   * fast because it will be used repeatedly to know whether to refine a graph while assuming local linearity. The returned
   * angle should be between 0 and Math.PI; the closer to Math.PI, the closer to linear. I'm going to write a faster
   * version of this function soon.
   * @param x1 {number}
   * @param y1
   * @param x2
   * @param y2
   * @param x3
   * @param y3
   */

  function approxAngleBetween(x1, y1, x2, y2, x3, y3) {
    // (x1d, y1d) = p1 ---> p2
    let x1d = x2 - x1;
    let y1d = y2 - y1; // (x3d, y3d) = p3 ---> p2

    let x3d = x2 - x3;
    let y3d = y2 - y3;
    let res = Math.abs(fastAtan2(y3d, x3d) - fastAtan2(y1d, x1d));

    if (res > Math.PI) {
      return 2 * Math.PI - res;
    }

    return res;
  }
  /**
   * Distance
   * @param px
   * @param py
   * @param ax
   * @param ay
   * @param bx
   * @param by
   * @returns {number}
   */


  function pointLineSegmentDistanceSquared(px, py, ax, ay, bx, by) {
    // Copied from asm.js code, that's why
    px = +px;
    py = +py;
    ax = +ax;
    ay = +ay;
    bx = +bx;
    by = +by;
    let t = 0.0,
        tx = 0.0,
        ty = 0.0,
        xd = 0.0,
        yd = 0.0;
    tx = px - ax;
    ty = py - ay;

    if (ax !== bx || ay !== by) {
      xd = bx - ax;
      yd = by - ay;
      t = (xd * (px - ax) + yd * (py - ay)) / (xd * xd + yd * yd); // Clamp t to [0, 1]

      if (t < 0.0) {
        t = 0.0;
      } else if (t > 1.0) {
        t = 1.0;
      }

      tx = ax + t * (bx - ax);
      ty = ay + t * (by - ay);
      tx = px - tx;
      ty = py - ty;
    }

    return tx * tx + ty * ty;
  }

  function distanceSquared(x1, y1, x2, y2) {
    let tx = x2 - x1;
    let ty = y2 - y1;
    return tx * tx + ty * ty;
  }
  /**
   * Compute Math.hypot(x, y), but since all the values of x and y we're using here are not extreme, we don't have to
   * handle overflows and underflows with much accuracy at all. We can thus use the straightforward calculation.
   * Chrome: 61.9 ms/iteration for 1e7 calculations for fastHypot; 444 ms/iteration for Math.hypot
   * @param x {number}
   * @param y {number}
   * @returns {number} hypot(x, y)
   */

  function fastHypot(x, y) {
    return Math.sqrt(x * x + y * y);
  }

  // This code is pretty old, but surprisingly effective!
  /**
   * The maximum number of vertices to be emitted by getDashedPolyline. This condition is here just to prevent dashed
   * polyline from causing a crash from OOM or just taking forever to finish.
   * @type {number}
   */

  const MAX_DASHED_POLYLINE_VERTICES = 1e7;
  /**
   * Convert a polyline into another polyline, but with dashes.
   * @param vertices {Array} The vertices of the polyline.
   * @param pen {Pen} The polyline's pen
   * @param box {BoundingBox} The plotting box, used to clip excess portions of the polyline. There could theoretically be
   * an infinite number of dashes in a long vertical asymptote, for example, but this box condition prevents that from
   * being an issue. Portions of the polyline outside the plotting box are simply returned without dashes.
   * @returns {Array}
   */

  function getDashedPolyline(vertices, pen, box) {
    if (!box) box = new BoundingBox(-Infinity, -Infinity, Infinity, Infinity); // dashPattern is the pattern of dashes, given as the length (in pixels) of consecutive dashes and gaps.
    // dashOffset is the pixel offset at which to start the dash pattern, beginning at the start of every sub polyline.

    let {
      dashPattern,
      dashOffset
    } = pen; // If the dash pattern is odd in length, concat it to itself, creating a doubled, alternating dash pattern

    if (dashPattern.length % 2 === 1) dashPattern = dashPattern.concat(dashPattern); // The length, in pixels, of the pattern

    const patternLength = dashPattern.reduce((a, b) => a + b); // If the pattern is invalid in some way (NaN values, negative dash lengths, total length less than 2), return the
    // polyline without dashes.

    if (patternLength < 2 || dashPattern.some(dashLen => dashLen < 0) || dashPattern.some(Number.isNaN)) return vertices; // currentIndex is the current position in the dash pattern. currentLesserOffset is the offset within the dash or gap
    // ----    ----    ----    ----    ----    ----    ----  ... etc.
    //      ^
    // If we are there, then currentIndex is 1 and currentLesserOffset is 1.

    let currentIndex = 0,
        currentLesserOffset = 0; // Initialize the value of currentLesserOffset based on dashOffset and dashPattern

    recalculateOffset(0); // The returned dashed vertices

    const result = []; // The plotting box

    const boxX1 = box.x,
          boxX2 = box.x + box.w,
          boxY1 = box.y,
          boxY2 = box.y + box.h; // Calculate the value of currentLesserOffset, given the length of the pattern that we have just traversed.

    function recalculateOffset(length) {
      // If there's an absurdly long segment, we just pretend the length is 0 to avoid problems with Infinities/NaNs
      if (length > 1e6) length = 0; // Move length along the dashOffset, modulo the patternLength

      dashOffset += length;
      dashOffset %= patternLength; // It's certainly possible to precompute these sums and use a binary search to find the dash index, but
      // that's unnecessary for dashes with short length

      let sum = 0,
          i = 0,
          lesserOffset = 0;

      for (; i < dashPattern.length; ++i) {
        let dashLength = dashPattern[i]; // Accumulate the length from the start of the pattern to the current dash

        sum += dashLength; // If the dashOffset is within this dash...

        if (dashOffset <= sum) {
          // calculate the lesser offset
          lesserOffset = dashOffset - sum + dashLength;
          break;
        }
      } // Set the current index and lesserOffset


      currentIndex = i;
      currentLesserOffset = lesserOffset;
    } // Generate dashes for the line segment (x1, y1) -- (x2, y2)


    function generateDashes(x1, y1, x2, y2) {
      // length of the segment
      const length = fastHypot(x2 - x1, y2 - y1); // index of where along the dashes we are

      let i = currentIndex; // Length so far of emitted dashes

      let lengthSoFar = 0; // We do this instead of while (true) to prevent the program from crashing

      for (let _ = 0; _ < MAX_DASHED_POLYLINE_VERTICES; _++) {
        // Length of the dash/gap component we need to draw (we subtract currentLesserOffset because that is already drawn)
        const componentLen = dashPattern[i] - currentLesserOffset; // Length when this component ends

        const endingLen = componentLen + lengthSoFar; // Whether we are in a dash

        const inDash = i % 2 === 0;

        if (endingLen <= length) {
          // If the end of the dash/gap occurs before the end of the current segment, we need to continue
          let r = endingLen / length; // if in a gap, this starts the next dash; if in a dash, this ends the dash

          result.push(x1 + (x2 - x1) * r, y1 + (y2 - y1) * r); // If we're ending off a dash, put the gap in

          if (inDash) result.push(NaN, NaN); // Go to the next dash/gap

          ++i;
          i %= dashPattern.length; // Reset the current lesser offset

          currentLesserOffset = 0;
        } else {
          // If we're in a dash, that means we're in the middle of a dash, so we just add the vertex
          if (inDash) result.push(x2, y2);
          break;
        }

        lengthSoFar += componentLen;
      } // Recalculate currentLesserOffset


      recalculateOffset(length);
    } // Where we along on each chunk, which tells us when to yield a progress report
    if (currentIndex % 2 === 0) // We're beginning with a dash, so start it off
      result.push(vertices[0], vertices[1]);

    for (let i = 0; i < vertices.length - 2; i += 2) {
      // For each pair of vertices...
      let x1 = vertices[i];
      let y1 = vertices[i + 1];
      let x2 = vertices[i + 2];
      let y2 = vertices[i + 3];

      if (Number.isNaN(x1) || Number.isNaN(y1)) {
        // At the start of every subpolyline, reset the dash offset
        dashOffset = pen.dashOffset; // Recalculate the initial currentLesserOffset

        recalculateOffset(0); // End off the previous subpolyline

        result.push(NaN, NaN);
        continue;
      } // If the end of the segment is undefined, continue


      if (Number.isNaN(x2) || Number.isNaN(y2)) continue; // Length of the segment

      let length = fastHypot(x2 - x1, y2 - y1); // Find whether the segment intersects the box

      let intersect = lineSegmentIntersectsBox(x1, y1, x2, y2, boxX1, boxY1, boxX2, boxY2); // If the segment doesn't intersect the box, it is entirely outside the box, so we can add its length to pretend
      // like we drew it even though we didn't

      if (!intersect) {
        recalculateOffset(length);
        continue;
      } // Whether (x1, y1) and (x2, y2) are contained within the box


      let pt1Contained = intersect[0] === x1 && intersect[1] === y1;
      let pt2Contained = intersect[2] === x2 && intersect[3] === y2; // If (x1, y1) is contained, fake draw the portion of the line outside of the box

      if (!pt1Contained) recalculateOffset(fastHypot(x1 - intersect[0], y1 - intersect[1]));

      generateDashes(intersect[0], intersect[1], intersect[2], intersect[3]);
      if (!pt2Contained) recalculateOffset(fastHypot(x2 - intersect[2], y2 - intersect[3]));
      if (result.length > MAX_DASHED_POLYLINE_VERTICES) throw new Error('Too many generated vertices in getDashedPolyline.');
    }

    return result;
  }

  // Thanks Emscripten for the names!
  // Scratch buffer for large operations where the length of the resultant array is unknown. There is no "malloc" here, so
  // operations should copy their result to a new array once they are done (which should be relatively fast, since
  // it's just a memcpy)
  let HEAP = new ArrayBuffer(0x1000000);
  let HEAPF32 = new Float32Array(HEAP);
  let HEAPF64 = new Float64Array(HEAP);

  const ENDCAP_TYPES = {
    butt: 0,
    round: 1,
    square: 2
  };
  const JOIN_TYPES = {
    bevel: 0,
    miter: 2,
    round: 1,
    dynamic: 3
  };

  const MIN_RES_ANGLE = 0.05; // minimum angle in radians between roundings in a polyline

  const B = 4 / Math.PI;
  const C = -4 / Math.PI ** 2;

  function fastSin(x) {
    // crude, but good enough for this
    x %= 6.28318530717;
    if (x < -3.14159265) x += 6.28318530717;else if (x > 3.14159265) x -= 6.28318530717;
    return B * x + C * x * (x < 0 ? -x : x);
  }

  function fastCos(x) {
    return fastSin(x + 1.570796326794);
  }

  function fastAtan2$1(y, x) {
    let abs_x = x < 0 ? -x : x;
    let abs_y = y < 0 ? -y : y;
    let a = abs_x < abs_y ? abs_x / abs_y : abs_y / abs_x;
    let s = a * a;
    let r = ((-0.0464964749 * s + 0.15931422) * s - 0.327622764) * s * a + a;
    if (abs_y > abs_x) r = 1.57079637 - r;
    if (x < 0) r = 3.14159265 - r;
    if (y < 0) r = -r;
    return r;
  }

  const glVertices = HEAPF32;
  /**
   * Convert an array of polyline vertices into a Float32Array of vertices to be rendered using WebGL.
   * @param vertices {Array} The vertices of the polyline.
   * @param pen {Object} A JSON representation of the pen. Could also be the pen object itself.
   * @param box {BoundingBox} The bounding box of the plot, used to optimize line dashes
   */

  function calculatePolylineVertices(vertices, pen, box = null) {
    if (pen.dashPattern.length === 0) {
      return convertTriangleStrip(vertices, pen);
    } else {
      return convertTriangleStrip(getDashedPolyline(vertices, pen, box), pen);
    }
  }
  function convertTriangleStrip(vertices, pen) {
    if (pen.thickness <= 0 || pen.endcapRes < MIN_RES_ANGLE || pen.joinRes < MIN_RES_ANGLE || vertices.length <= 3) {
      return {
        glVertices: null,
        vertexCount: 0
      };
    }

    let index = -1;
    let origVertexCount = vertices.length / 2;
    let th = pen.thickness / 2;
    let maxMiterLength = th / fastCos(pen.joinRes / 2);
    let endcap = ENDCAP_TYPES[pen.endcap];
    let join = JOIN_TYPES[pen.join];

    if (endcap === undefined || join === undefined) {
      throw new Error('Undefined endcap or join.');
    } // p1 -- p2 -- p3, generating vertices for point p2


    let x1 = 0,
        x2,
        x3 = vertices[0],
        y1 = 0,
        y2,
        y3 = vertices[1];
    let v1x = 0,
        v1y = 0,
        v2x = 0,
        v2y = 0,
        v1l = 0,
        v2l = 0,
        b1_x,
        b1_y,
        scale,
        dis;

    for (let i = 0; i < origVertexCount; ++i) {
      x1 = i !== 0 ? x2 : NaN; // Previous vertex

      x2 = x3; // Current vertex

      x3 = i !== origVertexCount - 1 ? vertices[2 * i + 2] : NaN; // Next vertex

      y1 = i !== 0 ? y2 : NaN; // Previous vertex

      y2 = y3; // Current vertex

      y3 = i !== origVertexCount - 1 ? vertices[2 * i + 3] : NaN; // Next vertex

      if (Math.abs(x3) > 16384 || Math.abs(y3) > 16384) {
        // Temporary
        x3 = NaN;
        y3 = NaN;
      }

      if (isNaN(x2) || isNaN(y2)) {
        continue;
      }

      if (isNaN(x1) || isNaN(y1)) {
        // The start of every endcap has two duplicate vertices for triangle strip reasons
        v2x = x3 - x2;
        v2y = y3 - y2;
        v2l = fastHypot(v2x, v2y);

        if (v2l < 1e-8) {
          v2x = 1;
          v2y = 0;
        } else {
          v2x /= v2l;
          v2y /= v2l;
        }

        if (isNaN(v2x) || isNaN(v2y)) {
          continue;
        } // undefined >:(


        if (endcap === 1) {
          // rounded endcap
          let theta = fastAtan2$1(v2y, v2x) + Math.PI / 2;
          let steps_needed = Math.ceil(Math.PI / pen.endcapRes);
          let o_x = x2 - th * v2y,
              o_y = y2 + th * v2x;
          let theta_c = theta + 1 / steps_needed * Math.PI; // Duplicate first vertex

          let x = glVertices[++index] = x2 + th * fastCos(theta_c);
          let y = glVertices[++index] = y2 + th * fastSin(theta_c);
          glVertices[++index] = x;
          glVertices[++index] = y;
          glVertices[++index] = o_x;
          glVertices[++index] = o_y;

          for (let i = 2; i <= steps_needed; ++i) {
            let theta_c = theta + i / steps_needed * Math.PI;
            glVertices[++index] = x2 + th * fastCos(theta_c);
            glVertices[++index] = y2 + th * fastSin(theta_c);
            glVertices[++index] = o_x;
            glVertices[++index] = o_y;
          }

          continue;
        } else if (endcap === 2) {
          let x = glVertices[++index] = x2 - th * v2x + th * v2y;
          let y = glVertices[++index] = y2 - th * v2y - th * v2x;
          glVertices[++index] = x;
          glVertices[++index] = y;
          glVertices[++index] = x2 - th * v2x - th * v2y;
          glVertices[++index] = y2 - th * v2y + th * v2x;
          continue;
        } else {
          // no endcap
          let x = glVertices[++index] = x2 + th * v2y;
          let y = glVertices[++index] = y2 - th * v2x;
          glVertices[++index] = x;
          glVertices[++index] = y;
          glVertices[++index] = x2 - th * v2y;
          glVertices[++index] = y2 + th * v2x;
          continue;
        }
      }

      if (isNaN(x3) || isNaN(y3)) {
        // ending endcap
        v1x = x2 - x1;
        v1y = y2 - y1;
        v1l = v2l;

        if (v1l < 1e-8) {
          v1x = 1;
          v1y = 0;
        } else {
          v1x /= v1l;
          v1y /= v1l;
        }

        if (isNaN(v1x) || isNaN(v1y)) {
          continue;
        } // undefined >:(


        glVertices[++index] = x2 + th * v1y;
        glVertices[++index] = y2 - th * v1x;
        glVertices[++index] = x2 - th * v1y;
        glVertices[++index] = y2 + th * v1x;

        if (endcap === 1) {
          let theta = fastAtan2$1(v1y, v1x) + 3 * Math.PI / 2;
          let steps_needed = Math.ceil(Math.PI / pen.endcapRes);
          let o_x = x2 - th * v1y,
              o_y = y2 + th * v1x;

          for (let i = 1; i <= steps_needed; ++i) {
            let theta_c = theta + i / steps_needed * Math.PI;
            glVertices[++index] = x2 + th * fastCos(theta_c);
            glVertices[++index] = y2 + th * fastSin(theta_c);
            glVertices[++index] = o_x;
            glVertices[++index] = o_y;
          }
        } // Duplicate last vertex of ending endcap


        glVertices[index + 1] = glVertices[index - 1];
        glVertices[index + 2] = glVertices[index];
        index += 2;
        continue;
      } // all vertices are defined, time to draw a joinerrrrr


      if (join === 2 || join === 3) {
        // find the two angle bisectors of the angle formed by v1 = p1 -> p2 and v2 = p2 -> p3
        v1x = x1 - x2;
        v1y = y1 - y2;
        v2x = x3 - x2;
        v2y = y3 - y2;
        v1l = v2l;
        v2l = fastHypot(v2x, v2y);
        b1_x = v2l * v1x + v1l * v2x;
        b1_y = v2l * v1y + v1l * v2y;
        scale = 1 / fastHypot(b1_x, b1_y);

        if (scale === Infinity || scale === -Infinity) {
          b1_x = -v1y;
          b1_y = v1x;
          scale = 1 / fastHypot(b1_x, b1_y);
        }

        b1_x *= scale;
        b1_y *= scale;
        scale = th * v1l / (b1_x * v1y - b1_y * v1x);

        if (join === 2 || Math.abs(scale) < maxMiterLength) {
          // Draw a miter. But the length of the miter is massive and we're in dynamic mode (3), we exit this if statement and do a rounded join
          b1_x *= scale;
          b1_y *= scale;
          glVertices[++index] = x2 - b1_x;
          glVertices[++index] = y2 - b1_y;
          glVertices[++index] = x2 + b1_x;
          glVertices[++index] = y2 + b1_y;
          continue;
        }
      }

      v2x = x3 - x2;
      v2y = y3 - y2;
      dis = fastHypot(v2x, v2y);

      if (dis < 0.001) {
        v2x = 1;
        v2y = 0;
      } else {
        v2x /= dis;
        v2y /= dis;
      }

      v1x = x2 - x1;
      v1y = y2 - y1;
      dis = fastHypot(v1x, v1y);

      if (dis === 0) {
        v1x = 1;
        v1y = 0;
      } else {
        v1x /= dis;
        v1y /= dis;
      }

      glVertices[++index] = x2 + th * v1y;
      glVertices[++index] = y2 - th * v1x;
      glVertices[++index] = x2 - th * v1y;
      glVertices[++index] = y2 + th * v1x;

      if (join === 1 || join === 3) {
        let a1 = fastAtan2$1(-v1y, -v1x) - Math.PI / 2;
        let a2 = fastAtan2$1(v2y, v2x) - Math.PI / 2; // if right turn, flip a2
        // if left turn, flip a1

        let start_a, end_a;

        if (mod(a1 - a2, 2 * Math.PI) < Math.PI) {
          // left turn
          start_a = Math.PI + a1;
          end_a = a2;
        } else {
          start_a = Math.PI + a2;
          end_a = a1;
        }

        let angle_subtended = mod(end_a - start_a, 2 * Math.PI);
        let steps_needed = Math.ceil(angle_subtended / pen.joinRes);

        for (let i = 0; i <= steps_needed; ++i) {
          let theta_c = start_a + angle_subtended * i / steps_needed;
          glVertices[++index] = x2 + th * fastCos(theta_c);
          glVertices[++index] = y2 + th * fastSin(theta_c);
          glVertices[++index] = x2;
          glVertices[++index] = y2;
        }
      }

      glVertices[++index] = x2 + th * v2y;
      glVertices[++index] = y2 - th * v2x;
      glVertices[++index] = x2 - th * v2y;
      glVertices[++index] = y2 + th * v2x;
    }

    let ret = new Float32Array(index >= 0 ? glVertices.subarray(0, index) : []);
    return ret;
  }

  /**
   * Contour representing a part of a polyline. Should be contiguous; contains no NaNs
   */

  class Contour {
    constructor(data) {
      this.data = data;
    }

    type() {
      return this.data instanceof Float64Array ? 'f64' : 'f32';
    }

  }
  /**
   * Convert an array of polyline contours into a single float array with NaN spacings
   * @param contourArray {Contour[]}
   * @param type {string} Data type of the resulting flattened float array
   */


  function fromContours(contourArray, type = 'f32') {
    // Convert an array of contours into a polyline array, with NaN spacings
    let len = 0;

    for (const contour of contourArray) {
      len += contour.data.length;
    }

    len += 2 * contourArray.length - 2;
    let ret = new (type === 'f32' ? Float32Array : Float64Array)(len);
    let index = 0;

    for (let i = 0; i < contourArray.length; ++i) {
      const contour = contourArray[i];
      ret.set(contour.data, index);
      index += contour.data.length;

      if (i !== contourArray.length - 1) {
        ret[index] = NaN;
        ret[index + 1] = NaN;
      }

      index += 2;
    }

    return ret;
  }
  /**
   * Convert a flattened polyline array into a contour array
   * @param array {Float32Array|Float64Array|Array} Flattened array of elements, potentially including NaN buffers
   * @param type {string} Whether to create contours of an f32 or f64 variety
   * @param cloneSubarrays {boolean} Whether to clone the subarrays
   * @returns {Array}
   */

  function toContours(array, type = 'f32', cloneSubarrays = true) {
    let arrType = type === 'f32' ? Float32Array : Float64Array;
    let isF32 = array instanceof Float32Array;
    let isF64 = array instanceof Float64Array;

    if (!(isF32 && type === 'f32' || isF64 && type === 'f64')) {
      cloneSubarrays = true;
    }

    if (!isF32 && !isF64) {
      array = new arrType(array);
      cloneSubarrays = false;
    }

    let contours = [];
    /**
     * Given a subarray of the original array, add a contour
     * @param subarray {Float32Array|Float64Array}
     */

    function addContour(subarray) {
      let contour = cloneSubarrays ? new arrType(subarray) : subarray;
      contours.push(new Contour(contour));
    }

    let firstDefIndex = -1; // index of the first defined element

    for (let i = 0; i < array.length; i += 2) {
      let x = array[i];
      let y = array[i + 1];

      if (Number.isNaN(x) || Number.isNaN(y)) {
        if (firstDefIndex !== -1) {
          addContour(array.subarray(firstDefIndex, i));
        }

        firstDefIndex = -1;
      } else {
        if (firstDefIndex === -1) firstDefIndex = i;
      }
    }

    if (firstDefIndex !== -1) addContour(array.subarray(firstDefIndex));
    return contours;
  }
  /**
   * Convert a polyline into a simplified form by trimming vertices which are unnecessary or otherwise manipulating it
   * @param polyline {Float32Array|Float64Array}
   */

  function simplifyPolyline(polyline, {
    type,
    // type of the output; if not specified, assumed to be the same as the polyline (f32 or f64)
    minRes = 0.5 // maximum deviation from a line that is considered non-linear

  } = {}) {
    if (!type) {
      type = getTypedArrayType(polyline);

      if (!type) {
        type = 'f32';
        polyline = new Float32Array(polyline);
      }
    }

    let HEAP = type === 'f32' ? HEAPF32 : HEAPF64;
    let x1,
        y1,
        x2 = polyline[0],
        y2 = polyline[1],
        x3 = polyline[2],
        y3 = polyline[3],
        minResSquared = minRes * minRes;
    let outIndex = -1; // There are three simplifications to be made: eliding NaNs, compacting linear portions, and removing/faking vertices
    // outside a bounding box. For now, let's focus on the second one

    for (let i = 2; i < polyline.length; i += 2) {
      x1 = x2;
      y1 = y2;
      x2 = x3;
      y2 = y3;
      x3 = polyline[i];
      y3 = polyline[i + 1];
      HEAP[++outIndex] = x1;
      HEAP[++outIndex] = y1;
      let dstSquared = pointLineSegmentDistanceSquared(x2, y2, x1, y1, x3, y3);

      if (dstSquared < minResSquared) {
        // We may be able to compact the vertices coming after x1, y1. For now, we just skip one vertex
        let intermediateVertices = [x2, y2];

        loop: for (; i < polyline.length; i += 2) {
          x2 = x3;
          y2 = y3;
          intermediateVertices.push(x2, y2);
          x3 = polyline[i];
          y3 = polyline[i + 1];

          for (let j = 0; j < intermediateVertices.length; j += 2) {
            let x2 = intermediateVertices[j];
            let y2 = intermediateVertices[j + 1];
            let dstSquared = pointLineSegmentDistanceSquared(x2, y2, x1, y1, x3, y3);
            if (dstSquared >= minResSquared) break loop;
          }
        }
      }
    }

    HEAP[++outIndex] = x2;
    HEAP[++outIndex] = y2;
    return new (getTypedArrayConstructor(type))(HEAP.subarray(0, outIndex + 1));
  }

  function getDemarcations(xStart, xEnd, xLen, desiredMinorSep, desiredMajorSep, subdivisions, includeAxis = false) {
    if (xStart >= xEnd || !Number.isFinite(xStart) || !Number.isFinite(xEnd) || !Number.isFinite(xLen) || desiredMajorSep < 1 || desiredMinorSep < 1 || subdivisions.length === 0) return [];
    let xGraphLen = xEnd - xStart;
    let estimatedMajors = xLen / desiredMajorSep; // We look for the base b and subdivision s such that the number of major subdivisions that result would be closest
    // to the number implied by the desired major sep

    let bestBase = 0;
    let bestErr = Infinity;
    let bestSubdivision = [1, 1];

    for (const subdiv of subdivisions) {
      let maj = subdiv[1];
      let desiredBase = Math.log10(maj * xGraphLen / estimatedMajors);
      let nearest = Math.round(desiredBase);
      let err = Math.abs(maj * xGraphLen / Math.pow(10, nearest) - estimatedMajors);

      if (err < bestErr) {
        bestErr = err;
        bestSubdivision = subdiv;
        bestBase = nearest;
      }
    } // Generate the ticks based on the chosen base and subdivision. We first find the offset of the nearest multiple of
    // 10^b preceding xStart, say m * 10^b, then for each interval (m, m+1) generate the ticks that are in the range of
    // xStart and xEnd


    let based = Math.pow(10, bestBase);
    let firstMultiple = Math.floor(xStart / based);
    let lastMultiple = xEnd / based; // In the case that the end is at a power of 10, we want to generate the end as well

    if (Number.isInteger(lastMultiple)) lastMultiple++;
    lastMultiple = Math.ceil(lastMultiple);
    let [min, maj] = bestSubdivision;
    let minTicks = [];
    let majTicks = []; // Note we might start to get float errors here. We'll assume good faith for now that the plot transform constraints
    // are turned on.

    for (let i = firstMultiple; i < lastMultiple; ++i) {
      // Generate ticks
      let begin = i * based;
      let end = (i + 1) * based;
      let diff = end - begin;

      for (let j = 0; j < maj; ++j) {
        let tick = begin + diff * j / maj;
        if (tick > xEnd) continue;
        if (tick >= xStart && (includeAxis || tick !== 0)) majTicks.push(tick);

        for (let k = 1; k < min; ++k) {
          tick = begin + diff * ((j + k / min) / maj);
          if (tick > xEnd || tick < xStart) continue;
          minTicks.push(tick);
        }
      }
    }

    return {
      min: minTicks,
      maj: majTicks
    };
  }
  function get2DDemarcations(xStart, xEnd, xLen, yStart, yEnd, yLen, {
    desiredMinorSep = 20,
    desiredMajorSep = 150,
    subdivisions = [[4
    /* minor */
    , 5
    /* major */
    ], [5, 2], [5, 1]],
    // permissible subdivisions of the powers of ten into major separators and minor separators
    emitAxis = true // emit a special case for axis

  } = {}) {
    let x = getDemarcations(xStart, xEnd, xLen, desiredMinorSep, desiredMajorSep, subdivisions, !emitAxis);
    let y = getDemarcations(yStart, yEnd, yLen, desiredMinorSep, desiredMajorSep, subdivisions, !emitAxis);
    let ret = {
      major: {
        x: x.maj,
        y: y.maj
      },
      minor: {
        x: x.min,
        y: y.min
      }
    };

    if (emitAxis) {
      ret.axis = {
        x: xStart <= 0 || xEnd >= 0 ? [0] : [],
        y: yStart <= 0 || yEnd >= 0 ? [0] : []
      };
    }

    return ret;
  }
  function getRationalDemarcations(xStart, xEnd, xLen) {// Get a series of rational numbers [p, q] between xStart and xEnd.
  }

  /**
   * Error thrown when a parser gets pissed
   */
  class ParserError extends Error {
    constructor(message) {
      super(message);
      this.name = 'ParserError';
    }

  }
  /**
   * Helper function to throw an error at a specific index in a string.
   * @param string {String} The string to complain about
   * @param index {number} The index in the string where the error occurred
   * @param message {String} The error message
   */

  function getAngryAt(string, index = 0, message = "I'm angry!") {
    // Spaces to offset the caret to the correct place along the string
    const spaces = ' '.repeat(index);
    throw new ParserError(message + ' at index ' + index + ':\n' + string + '\n' + spaces + '^');
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _construct(Parent, args, Class) {
    if (_isNativeReflectConstruct()) {
      _construct = Reflect.construct;
    } else {
      _construct = function _construct(Parent, args, Class) {
        var a = [null];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) _setPrototypeOf(instance, Class.prototype);
        return instance;
      };
    }

    return _construct.apply(null, arguments);
  }

  function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  }

  function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;

    _wrapNativeSuper = function _wrapNativeSuper(Class) {
      if (Class === null || !_isNativeFunction(Class)) return Class;

      if (typeof Class !== "function") {
        throw new TypeError("Super expression must either be null or a function");
      }

      if (typeof _cache !== "undefined") {
        if (_cache.has(Class)) return _cache.get(Class);

        _cache.set(Class, Wrapper);
      }

      function Wrapper() {
        return _construct(Class, arguments, _getPrototypeOf(this).constructor);
      }

      Wrapper.prototype = Object.create(Class.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      return _setPrototypeOf(Wrapper, Class);
    };

    return _wrapNativeSuper(Class);
  }

  function _classPrivateMethodGet(receiver, privateSet, fn) {
    if (!privateSet.has(receiver)) {
      throw new TypeError("attempted to get private field on non-instance");
    }

    return fn;
  }

  function _wrapRegExp(re, groups) {
    _wrapRegExp = function (re, groups) {
      return new BabelRegExp(re, undefined, groups);
    };

    var _RegExp = _wrapNativeSuper(RegExp);

    var _super = RegExp.prototype;

    var _groups = new WeakMap();

    function BabelRegExp(re, flags, groups) {
      var _this = _RegExp.call(this, re, flags);

      _groups.set(_this, groups || _groups.get(re));

      return _this;
    }

    _inherits(BabelRegExp, _RegExp);

    BabelRegExp.prototype.exec = function (str) {
      var result = _super.exec.call(this, str);

      if (result) result.groups = buildGroups(result, this);
      return result;
    };

    BabelRegExp.prototype[Symbol.replace] = function (str, substitution) {
      if (typeof substitution === "string") {
        var groups = _groups.get(this);

        return _super[Symbol.replace].call(this, str, substitution.replace(/\$<([^>]+)>/g, function (_, name) {
          return "$" + groups[name];
        }));
      } else if (typeof substitution === "function") {
        var _this = this;

        return _super[Symbol.replace].call(this, str, function () {
          var args = [];
          args.push.apply(args, arguments);

          if (typeof args[args.length - 1] !== "object") {
            args.push(buildGroups(args, _this));
          }

          return substitution.apply(this, args);
        });
      } else {
        return _super[Symbol.replace].call(this, str, substitution);
      }
    };

    function buildGroups(result, re) {
      var g = _groups.get(re);

      return Object.keys(g).reduce(function (groups, name) {
        groups[name] = result[g[name]];
        return groups;
      }, Object.create(null));
    }

    return _wrapRegExp.apply(this, arguments);
  }

  /**
   * Represents a complex number, with a real part and an imaginary part both represented by floats.
   */
  class Complex {
    /**
     * Construct a new complex number.
     * @param re The real part of the complex number.
     * @param im The imaginary part of the complex number.
     */
    constructor(re, im = 0) {
      this.re = re;
      this.im = im;
    }
    /**
     * Get i.
     * @returns {Complex} i.
     * @constructor
     */


    static get I() {
      return new Complex(0, 1);
    }
    /**
     * Get 1.
     * @returns {Complex} 1.
     * @constructor
     */


    static get One() {
      return new Complex(1, 0);
    }
    /**
     * Return the complex argument (principal value) corresponding to the complex number.
     * @returns {number} The complex argument Arg(z).
     */


    arg() {
      return Math.atan2(this.im, this.re);
    }
    /**
     * Returns |z|.
     * @returns {number} The complex magnitude |z|.
     */


    magnitude() {
      return Math.hypot(this.re, this.im);
    }
    /**
     * Returns |z|^2.
     * @returns {number} The square of the complex magnitude |z|^2.
     */


    magnitudeSquared() {
      return this.re * this.re + this.im * this.im;
    }
    /**
     * Returns z bar.
     * @returns {Complex} The conjugate of z.
     */


    conj() {
      return new Complex(this.re, -this.im);
    }
    /**
     * Clone this complex number.
     * @returns {Complex} Clone of z.
     */


    clone() {
      return new Complex(this.re, this.im);
    }
    /**
     * Scale this complex number by the real factor r.
     * @param r {number} The scaling factor.
     */


    scale(r) {
      return new Complex(this.re * r, this.im * r);
    }
    /**
     * Check whether this complex number is equal to another.
     * @param z {Complex} Complex number to compare with.
     */


    equals(z) {
      return this.re === z.re && this.im === z.im;
    }
    /**
     * Return a complex number pointing in the same direction, with magnitude 1.
     * @returns {Complex}
     */


    normalize() {
      let mag = this.magnitude();
      return this.scale(1 / mag);
    }

  }

  function initTypecasts(TypecastDefinition, typecastList, typecastDict) {
    let intToReal = new TypecastDefinition({
      from: 'int',
      to: 'real',
      evaluators: {
        generic: 'identity',
        // Identity conversion,
        fast_interval: 'identity'
      }
    });

    let doubleToComplex = x => new Complex(x, 0);

    let intToComplex = new TypecastDefinition({
      from: 'int',
      to: 'complex',
      evaluators: {
        generic: doubleToComplex
      }
    });
    let realToComplex = new TypecastDefinition({
      from: 'real',
      to: 'complex',
      evaluators: {
        generic: doubleToComplex
      }
    });
    typecastList.push(intToReal, intToComplex, realToComplex); // For simplicity, we convert the list of all typecasts into a dict of from -> to, so that it can be very quickly
    // searched during signature matching.

    for (const typecast of typecastList) {
      let from = typecast.from;

      if (typecastDict[from]) {
        typecastDict[from].push(typecast);
      } else {
        typecastDict[from] = [typecast];
      }
    }
  }

  /**
   * A real interval with only min, max, defMin (bit 0), defMax (bit 1), contMin (bit 2), contMax (bit 3)
   */
  class FastRealInterval {
    constructor(min = 0, max = min, info = 0b111) {
      this.min = min;
      this.max = max;
      this.info = info;
    }

    defMin() {
      return this.info & 0b1;
    }

    defMax() {
      return this.info & 0b10;
    }

    cont() {
      return this.info & 0b100;
    }

    static set(src, dst) {
      dst.min = src.min;
      dst.max = src.max;
      dst.info = src.info;
    }

    static setNumber(num, dst) {
      if (Number.isNaN(num)) {
        dst.info = 0;
      } else {
        dst.min = num;
        dst.max = num;
        dst.info = 0b111;
      }
    }

    static setRange(min, max, dst) {
      dst.min = min;
      dst.max = max;
      dst.info = 0b111;
    }
    /**
     * Add two fast real intervals, sending the result to dst
     * @param src1 {FastRealInterval}
     * @param src2 {FastRealInterval}
     * @param dst {FastRealInterval}
     * @param correctRounding {boolean} Whether to use correct rounding so the result is mathematically guaranteed
     */


    static add(src1, src2, dst, correctRounding) {
      let info = src1.info & src2.info;

      if (info === 0) {
        dst.info = 0;
        return;
      }

      let min = src1.min + src2.min;
      let max = src1.max + src2.max;

      if (correctRounding) {
        min = roundDown(min);
        max = roundUp(max);
      }

      dst.min = min;
      dst.max = max;
      dst.info = info;
    }
    /**
     * Subtract two fast real intervals, sending the result to dst
     * @param src1 {FastRealInterval}
     * @param src2 {FastRealInterval}
     * @param dst {FastRealInterval}
     * @param correctRounding {boolean} Whether to use correct rounding so the result is mathematically guaranteed
     */


    static sub(src1, src2, dst, correctRounding) {
      let info = src1.info & src2.info;

      if (info === 0) {
        dst.info = 0;
        return;
      }

      let min = src1.min - src2.max;
      let max = src1.max - src2.min;

      if (correctRounding) {
        min = roundDown(min);
        max = roundUp(max);
      }

      dst.min = min;
      dst.max = max;
      dst.info = info;
    }
    /**
     * Negate a real interval, sending the result to dst
     * @param src {FastRealInterval}
     * @param dst {FastRealInterval}
     * @param correctRounding {boolean} Whether to use correct rounding so the result is mathematically guaranteed
     */


    static unarySub(src, dst, correctRounding) {
      dst.min = -src.max;
      dst.max = -src.min;
      dst.info = src.info;
    }
    /**
     * Multiply two fast real intervals, sending the result to dst
     * @param src1 {FastRealInterval}
     * @param src2 {FastRealInterval}
     * @param dst {FastRealInterval}
     * @param correctRounding {boolean} Whether to use correct rounding so the result is mathematically guaranteed
     */


    static mul(src1, src2, dst, correctRounding) {
      let info = src1.info & src2.info;

      if (info === 0) {
        dst.info = 0;
        return;
      }

      let s1min = src1.min,
          s1max = src1.max,
          s2min = src2.min,
          s2max = src2.max;
      let p1 = s1min * s2min,
          p2 = s1max * s2min,
          p3 = s1min * s2max,
          p4 = s1max * s2max;
      let min = Math.min(p1, p2, p3, p4);
      let max = Math.max(p1, p2, p3, p4);

      if (correctRounding) {
        min = roundDown(min);
        max = roundUp(max);
      }

      dst.min = min;
      dst.max = max;
      dst.info = info;
    }
    /**
     * Divide two fast real intervals, sending the result to dst
     * @param src1 {FastRealInterval}
     * @param src2 {FastRealInterval}
     * @param dst {FastRealInterval}
     * @param correctRounding {boolean} Whether to use correct rounding so the result is mathematically guaranteed
     */


    static div(src1, src2, dst, correctRounding) {
      let info = src1.info & src2.info;

      if (info === 0) {
        dst.info = 0;
        return;
      }

      let s2min = src2.min,
          s2max = src2.max;

      if (0 < s2min || 0 > s2max) {
        // if 0 is outside the range...
        let s1min = src1.min,
            s1max = src1.max;
        let p1 = s1min / s2min,
            p2 = s1max / s2min,
            p3 = s1min / s2max,
            p4 = s1max / s2max;
        let min = Math.min(p1, p2, p3, p4);
        let max = Math.max(p1, p2, p3, p4);

        if (correctRounding) {
          min = roundDown(min);
          max = roundUp(max);
        }

        dst.min = min;
        dst.max = max;
        dst.info = info;
      } else {
        dst.min = -Infinity;
        dst.max = Infinity;
        dst.info = 1;
      }
    }
    /**
     * Take the square root of a real interval, sending the result to dst
     * @param src {FastRealInterval}
     * @param dst {FastRealInterval}
     * @param correctRounding {boolean} Whether to use correct rounding so the result is mathematically guaranteed
     */


    static sqrt(src, dst, correctRounding) {
      let info = src.info;

      if (info === 0) {
        dst.info = 0;
        return;
      }

      let min = src.min,
          max = src.max;

      if (max < 0) {
        dst.info = 0;
        return;
      } else if (max === 0) {
        dst.min = 0;
        dst.max = 0;
        dst.info = min === 0 ? info : 1;
        return;
      } else {
        if (min < 0) {
          min = 0;
          max = Math.sqrt(max);
          if (correctRounding) max = roundUp(max);
          info = 1;
        } else {
          min = Math.sqrt(min);
          max = Math.sqrt(max);

          if (correctRounding) {
            min = roundDown(min);
            max = roundUp(max);
          }
        }
      }

      dst.min = min;
      dst.max = max;
      dst.info = info;
    }
    /**
     * Take the cube root of a real interval, sending the result to dst
     * @param src {FastRealInterval}
     * @param dst {FastRealInterval}
     * @param correctRounding {boolean} Whether to use correct rounding so the result is mathematically guaranteed
     */


    static cbrt(src, dst, correctRounding) {
      let info = src.info;

      if (info === 0) {
        dst.info = 0;
        return;
      }

      let min = Math.cbrt(src.min);
      let max = src.min === src.max ? min : Math.cbrt(src.max);

      if (correctRounding) {
        min = roundDown(min);
        max = roundUp(max);
      }

      dst.min = min;
      dst.max = max;
      dst.info = info;
    }
    /**
     * Take the sine of a fast real interval and send the result to dst
     * @param src {FastRealInterval}
     * @param dst {FastRealInterval}
     * @param correctRounding {boolean} Whether to use correct rounding so the result is mathematically guaranteed TODO
     */


    static sin(src, dst, correctRounding) {
      const pio2 = Math.PI / 2;
      const pi3o2 = 3 * Math.PI / 2;
      const pi2 = 2 * Math.PI;
      const pi5o2 = 5 * Math.PI / 2;
      const pi7o2 = 7 * Math.PI / 2;
      let info = src.info;

      if (info === 0) {
        dst.info = 0;
        return;
      }

      let srcMin = src.min,
          srcMax = src.max;
      let diff = srcMax - srcMin;

      if (diff > pi2 || Number.isNaN(diff)) {
        dst.min = -1;
        dst.max = 1;
        dst.info = info;
        return;
      }

      srcMin = (srcMin % pi2 + pi2) % pi2;
      srcMax = srcMin + diff; // Whether the range includes one and negative one

      let includesOne = srcMin < pio2 && srcMax > pio2 || srcMin < pi5o2 && srcMax > pi5o2;
      let includesNegOne = srcMin < pi3o2 && srcMax > pi3o2 || srcMin < pi7o2 && srcMax > pi7o2;

      if (includesOne && includesNegOne) {
        dst.min = -1;
        dst.max = 1;
        dst.info = info;
        return;
      }

      let sinSrcMin = Math.sin(srcMin);
      let sinSrcMax = Math.sin(srcMax);
      let min = includesNegOne ? -1 : Math.min(sinSrcMin, sinSrcMax);
      let max = includesOne ? 1 : Math.max(sinSrcMin, sinSrcMax);

      if (correctRounding) {
        if (min !== -1) min = roundDown(min);
        if (max !== 1) max = roundUp(max);
      }

      dst.min = min;
      dst.max = max;
      dst.info = info;
    }
    /**
     * Take the cosine of a fast real interval and send the result to dst
     * @param src {FastRealInterval}
     * @param dst {FastRealInterval}
     * @param correctRounding {boolean} Whether to use correct rounding so the result is mathematically guaranteed TODO
     */


    static cos(src, dst, correctRounding) {
      const pi2 = 2 * Math.PI;
      const pi3 = 3 * Math.PI;
      let info = src.info;

      if (info === 0) {
        dst.info = 0;
        return;
      }

      let srcMin = src.min,
          srcMax = src.max;
      let diff = srcMax - srcMin;

      if (diff > pi2 || Number.isNaN(diff)) {
        dst.min = -1;
        dst.max = 1;
        dst.info = info;
        return;
      }

      srcMin = (srcMin % pi2 + pi2) % pi2;
      srcMax = srcMin + diff; // Whether the range includes one and negative one

      let includesOne = srcMin < pi2 && srcMax > pi2;
      let includesNegOne = srcMin < Math.PI && srcMax > Math.PI || srcMin < pi3 && srcMax > pi3;

      if (includesOne && includesNegOne) {
        dst.min = -1;
        dst.max = 1;
        dst.info = info;
        return;
      }

      let cosSrcMin = Math.cos(srcMin);
      let cosSrcMax = Math.cos(srcMax);
      let min = includesNegOne ? -1 : Math.min(cosSrcMin, cosSrcMax);
      let max = includesOne ? 1 : Math.max(cosSrcMin, cosSrcMax);

      if (correctRounding) {
        if (min !== -1) min = roundDown(min);
        if (max !== 1) max = roundUp(max);
      }

      dst.min = min;
      dst.max = max;
      dst.info = info;
    }
    /**
     * Take the tangent of a fast real interval and send the result to dst
     * @param src {FastRealInterval}
     * @param dst {FastRealInterval}
     * @param correctRounding {boolean} Whether to use correct rounding so the result is mathematically guaranteed TODO
     */


    static tan(src, dst, correctRounding) {
      const pio2 = Math.PI / 2;
      let info = src.info;

      if (info === 0) {
        dst.info = 0;
        return;
      }

      let srcMin = src.min,
          srcMax = src.max;
      let diff = srcMax - srcMin;

      if (diff > Math.PI || Number.isNaN(diff)) {
        dst.min = -Infinity;
        dst.max = Infinity;
        dst.info = 1;
        return;
      }

      srcMin = (srcMin % Math.PI + Math.PI) % Math.PI;
      srcMax = srcMin + diff; // Whether the range includes an undef

      let includesInf = srcMin < pio2 && srcMax > pio2;

      if (includesInf) {
        dst.min = Infinity;
        dst.max = -Infinity;
        dst.info = 1;
        return;
      }

      let tanSrcMin = Math.cos(srcMin);
      let tanSrcMax = Math.cos(srcMax);
      let min = Math.min(tanSrcMin, tanSrcMax);
      let max = Math.max(tanSrcMin, tanSrcMax);

      if (correctRounding) {
        min = roundDown(min);
        max = roundUp(max);
      }

      dst.min = min;
      dst.max = max;
      dst.info = info;
    }
    /**
     * Take the arcsine of a fast real interval and send the result to dst
     * @param src {FastRealInterval}
     * @param dst {FastRealInterval}
     * @param correctRounding {boolean} Whether to use correct rounding so the result is mathematically guaranteed
     */


    static asin(src, dst, correctRounding) {
      let info = src.info;

      if (info === 0) {
        dst.info = 0;
        return;
      }

      let srcMin = src.min,
          srcMax = src.max;

      if (srcMax < -1 || srcMin > 1) {
        dst.info = 0;
        return;
      }

      let min, max;

      if (srcMin === srcMax) {
        min = max = Math.asin(srcMin);
      } else {
        if (srcMin < -1) {
          min = -Math.PI / 2;
          info &= 0b010;
        } else {
          min = Math.asin(srcMin);
        }

        if (srcMax > 1) {
          max = Math.PI / 2;
          info &= 0b010;
        } else {
          max = Math.asin(srcMax);
        }
      }

      if (correctRounding) {
        min = roundDown(min);
        max = roundUp(max);
      }

      dst.min = min;
      dst.max = max;
      dst.info = info;
    }
    /**
     * Take the arccosine of a fast real interval and send the result to dst
     * @param src {FastRealInterval}
     * @param dst {FastRealInterval}
     * @param correctRounding {boolean} Whether to use correct rounding so the result is mathematically guaranteed
     */


    static acos(src, dst, correctRounding) {
      let info = src.info;

      if (info === 0) {
        dst.info = 0;
        return;
      }

      let srcMin = src.min,
          srcMax = src.max;

      if (srcMax < -1 || srcMin > 1) {
        dst.info = 0;
        return;
      }

      let min, max;

      if (srcMin === srcMax) {
        min = max = Math.acos(srcMin);
      } else {
        if (srcMin < -1) {
          max = Math.PI;
          info &= 0b010;
        } else {
          max = Math.acos(srcMin);
        }

        if (srcMax > 1) {
          min = 0;
          info &= 0b010;
        } else {
          min = Math.acos(srcMax);
        }
      }

      if (correctRounding) {
        min = min === 0 ? min : roundDown(min);
        max = roundUp(max);
      }

      dst.min = min;
      dst.max = max;
      dst.info = info;
    }
    /**
     * Take the arctangent of a fast real interval and send the result to dst
     * @param src {FastRealInterval}
     * @param dst {FastRealInterval}
     * @param correctRounding {boolean} Whether to use correct rounding so the result is mathematically guaranteed
     */


    static atan(src, dst, correctRounding) {
      let info = src.info;

      if (info === 0) {
        dst.info = 0;
        return;
      }

      let srcMin = src.min,
          srcMax = src.max;
      let min = Math.atan(srcMin);
      let max = Math.atan(srcMax);

      if (correctRounding) {
        min = roundDown(min);
        max = roundUp(max);
      }

      dst.min = min;
      dst.max = max;
      dst.info = info;
    }
    /**
     * The power operation on two integers. This is a mathematical pow, rather than powSpecial where we try to guess that
     * numbers are rational. This function is a bit intricate because it needs to take care of a lot of cases. 0^0 = 0.
     * @param src1 {FastRealInterval}
     * @param src2 {FastRealInterval}
     * @param dst {FastRealInterval}
     * @param correctRounding {boolean}
     */


    static pow(src1, src2, dst, correctRounding) {
      let info = src1.info & src2.info;

      if (info === 0) {
        dst.info = 0;
        return;
      }

      let s1min = src1.min,
          s1max = src1.max,
          s2min = src2.min,
          s2max = src2.max; // First special case: exponent is a single number

      if (s2min === s2max) {
        let exp = s2min;
        let containsZero = s1min <= 0 && s1max >= 0;

        if (exp === 0) {
          // exponent 0
          dst.min = 1;
          dst.max = 1;
          dst.info = info;
          return;
        } // There are six cases to consider: x^2-like, x^3-like, sqrt(x)-like, 1/x-like, 1/x^2-like, and 1/sqrt(x)-like.
        // Suppose those cases are enumerated 0 through 5. Then positive even integers -> 0, positive odd integers -> 1,
        // negative odd integers -> 3, negative even integers -> 4, positive numbers -> 2, negative numbers -> 5.


        if (Number.isInteger(exp)) {
          if (containsZero) {
            if (exp < 0) {
              // negative even integers: minimum is the pow of the maximum
              if (exp % 2 === 0) {
                // 1/x^2
                dst.min = Math.pow(Math.max(Math.abs(s1min), Math.abs(s1max)), exp);
                dst.max = Infinity;
                dst.info = info & 0b010;
              } else {
                // Odd integers: if contains zero, contains an asymptote
                // 1/x
                dst.min = Infinity;
                dst.max = Infinity;
                dst.info = info & 0b010;
              }

              return;
            } else if (exp % 2 === 0) {
              // x^2
              dst.min = 0;
              let max = Math.pow(Math.max(Math.abs(s1min), Math.abs(s1max)), exp);
              if (correctRounding) max = roundUp(max);
              dst.max = max;
              dst.info = info;
              return;
            }
          } // containsZero

        } else {
          // Exponent is not an integer
          // Totally in the undefined region
          let isDefined = s1max > 0;

          if (!isDefined) {
            dst.info = 0;
            return;
          }

          if (containsZero) {
            let min = 0,
                max = 0;

            if (exp < 0) {
              // 1/sqrt(x)
              max = Infinity;
              min = Math.pow(s1max, exp);
              if (correctRounding) min = roundDown(min);
            } else {
              min = 0;
              max = Math.pow(s1max, exp);
              if (correctRounding) max = roundUp(max);
            }

            dst.min = min;
            dst.max = max;
            dst.info = info & 0b010;
          }
        } // If we've fallen through to here, pow is monotonic and defined


        let powSrcMin = Math.pow(s1min, exp),
            powSrcMax = Math.pow(s1max, exp);
        let min = Math.min(powSrcMin, powSrcMax);
        let max = Math.max(powSrcMin, powSrcMax);

        if (correctRounding) {
          min = roundDown(min);
          max = roundUp(max);
        }

        dst.min = min;
        dst.max = max;
        dst.info = info;
        return;
      } // single-valued exponent
      // Second special case: denominator is a single number


      if (s1min === s1max) {
        let base = s1min;

        if (base === 0) {
          let containsZero = s2max >= 0 && s2min <= 0;
          dst.min = 0;
          dst.max = containsZero ? 1 : 0; // 0^0 = 1

          dst.info = info & (containsZero ? 0b011 : 0b111);
          return;
        } else if (base === 1) {
          dst.min = 1;
          dst.max = 1;
          dst.info = info;
          return;
        } else if (base === -1) {
          dst.min = -1;
          dst.max = 1;
          dst.info = info & 0b010;
          return;
        } // negative bases are weird. They have two branches depending on the denominator of the power they're being
        // raised to... so we deal with it :)


        let min = 0,
            max = 0;

        if (base < -1) {
          // Shape: (-2)^x
          let m = Math.pow(base, s2max);
          min = -m;
          max = m;
          info &= 0b010;
        } else if (base < 0) {
          // Shape: (-1/2)^x
          let m = Math.pow(base, s2min);
          min = -m;
          max = m;
          info &= 0b010;
        } else if (base < 1) {
          // Monotonically decreasing
          min = Math.pow(base, s2max);
          max = Math.pow(base, s2min);
        } else {
          // Monotonically increasing
          min = Math.pow(base, s2min);
          max = Math.pow(base, s2max);
        }

        if (correctRounding) {
          min = roundDown(min);
          max = roundUp(max);
        }

        dst.min = min;
        dst.max = max;
        dst.info = info;
        return;
      } // If we've gotten here, things are a bit tricky. The key is that the minimum may be -Infinity, 0, or the minimum of
      // evaluated pows, and the maximum may be 0, Infinity, or the maximum of evaluated pows. Because this is a fast
      // real interval we don't have to get deep into the weeds of which are the actual attainable intervals (though that
      // isn't *too* hard)


      let hasAsymptote = s2min <= 0 && 0 <= s2max && s1min <= 0;

      if (hasAsymptote) {
        dst.min = -Infinity;
        dst.max = Infinity;
        dst.info = info & 0b010;
        return;
      } // Things are potentially undefined iff the denominator has negative numbers.


      let isAllDefined = s1min < 0;
      if (isAllDefined) info &= 0b010;
      let minPow = Infinity,
          maxPow = -Infinity;
      let ps1mins2min = Math.pow(Math.abs(s1min), s2min);
      let ps1mins2max = Math.pow(Math.abs(s1min), s2max);
      let ps1maxs2min = Math.pow(Math.abs(s1max), s2min);
      let ps1maxs2max = Math.pow(Math.abs(s1max), s2max);
      minPow = Math.min(minPow, ps1mins2min);
      maxPow = Math.max(maxPow, ps1mins2min);
      minPow = Math.min(minPow, ps1mins2max);
      maxPow = Math.max(maxPow, ps1mins2max);

      if (s1min < 0) {
        minPow = Math.min(minPow, -ps1mins2min);
        maxPow = Math.max(maxPow, -ps1mins2min);
        minPow = Math.min(minPow, -ps1mins2max);
        maxPow = Math.max(maxPow, -ps1mins2max);
      }

      minPow = Math.min(minPow, ps1maxs2min);
      maxPow = Math.max(maxPow, ps1maxs2min);
      minPow = Math.min(minPow, ps1maxs2max);
      maxPow = Math.max(maxPow, ps1maxs2max);

      if (s2min < 0) {
        minPow = Math.min(minPow, -ps1maxs2min);
        maxPow = Math.max(maxPow, -ps1maxs2min);
        minPow = Math.min(minPow, -ps1maxs2max);
        maxPow = Math.max(maxPow, -ps1maxs2max);
      }

      if (correctRounding) {
        minPow = roundDown(minPow);
        maxPow = roundUp(maxPow);
      }

      dst.min = minPow;
      dst.max = maxPow;
      dst.info = info;
    }

  }

  class FastVec2Interval {
    constructor() {
      this.xMin = 0;
      this.xMax = 0;
      this.yMin = 0;
      this.yMax = 0;
      this.info = 0b111;
    }
    /**
     * Whether this vec2 interval intersects a given bounding box
     * @param bbox {BoundingBox}
     */


    intersectsBoundingBox(bbox) {
      if (this.info === 0) return false;
      let x1 = bbox.x,
          y1 = bbox.y,
          w = bbox.w,
          h = bbox.h,
          x2 = x1 + w,
          y2 = y1 + h;
      let xMin = this.xMin,
          xMax = this.xMax,
          yMin = this.yMin,
          yMax = this.yMax; // Two boxes intersect if each of their intervals taken individually intersect

      return (xMin <= x1 && x1 <= xMax || x1 <= xMin && xMin <= x2) && (yMin <= y1 && y1 <= yMax || y1 <= yMin && yMin <= y2);
    }

    entirelyWithin(bbox) {
      if (this.info === 0) return false;
      let x1 = bbox.x,
          y1 = bbox.y,
          w = bbox.w,
          h = bbox.h,
          x2 = x1 + w,
          y2 = y1 + h;
      let xMin = this.xMin,
          xMax = this.xMax,
          yMin = this.yMin,
          yMax = this.yMax;
      return x1 <= xMin && xMax <= x2 && y1 <= yMin && yMax <= y2;
    }

  }

  // List of valid types in Grapheme math language (as distinct from the props and stuff)
  const TYPES = {
    bool: {
      typecheck: {
        generic: {
          f: x => typeof x === 'boolean'
        },
        fast_interval: {
          f: x => typeof x === "number" && 0 <= x && x < 16
        }
      },
      init: {
        generic: {
          f: () => false
        },
        fast_interval: {
          f: () => new FastRealInterval()
        }
      },
      fast_init: {
        generic: {
          f: () => false
        },
        fast_interval: {
          f: () => new FastRealInterval()
        }
      },
      cast: {
        generic: {
          f: x => !!x
        },
        fast_interval: {
          f: () => new FastRealInterval()
        }
      }
    },
    int: {
      typecheck: {
        generic: {
          f: Number.isInteger
        },
        fast_interval: {
          f: x => x instanceof FastRealInterval
        }
      },
      init: {
        generic: {
          f: x => x
        },
        fast_interval: {
          f: x => new FastRealInterval()
        }
      },
      fast_init: {
        generic: {
          f: () => 0
        },
        fast_interval: {
          f: () => new FastRealInterval()
        }
      },
      clone: {
        generic: {
          f: x => x
        },
        fast_interval: {
          f: x => {
            return new FastRealInterval(x.min, x.max, x.info);
          }
        }
      },
      cast: {
        generic: {
          f: x => Math.round(+x)
        },
        fast_interval: {
          f: int => {
            if (int instanceof FastRealInterval) return int;
            if (typeof int === "number") return new FastRealInterval(int, int);
            return new FastRealInterval(0, 0, 0);
          }
        }
      }
    },
    real: {
      typecheck: {
        generic: {
          f: x => typeof x === 'number'
        },
        fast_interval: {
          f: x => x instanceof FastRealInterval
        }
      },
      init: {
        generic: {
          f: x => x
        },
        fast_interval: {
          f: x => new FastRealInterval(x, x)
        }
      },
      fast_init: {
        generic: {
          f: () => 0
        },
        fast_interval: {
          f: () => new FastRealInterval()
        }
      },
      clone: {
        generic: {
          f: x => x
        },
        fast_interval: {
          f: x => {
            return new FastRealInterval(x.min, x.max, x.info);
          }
        }
      },
      cast: {
        generic: {
          f: x => +x
        },
        fast_interval: {
          f: int => {
            if (int instanceof FastRealInterval) return int;
            if (typeof int === "number") return new FastRealInterval(int, int);
            return new FastRealInterval(0, 0, 0);
          }
        }
      }
    },
    complex: true,
    vec2: {
      typecheck: {
        generic: {
          f: x => x instanceof Vec2
        },
        fast_interval: {
          f: x => x instanceof FastVec2Interval
        }
      },
      init: {
        generic: {
          f: v => new Vec2(v.x, v.y)
        },
        fast_interval: {
          f: v => new FastVec2Interval(v.xMin, v.xMax, v.yMin, v.yMax, v.info)
        }
      },
      fast_init: {
        generic: {
          f: () => new Vec2()
        },
        fast_interval: {
          f: () => new FastVec2Interval()
        }
      },
      cast: {
        generic: {
          f: v => new Vec2(v.x, v.y)
        },
        fast_interval: {
          f: v => new FastVec2Interval(v.xMin, v.xMax, v.yMin, v.yMax, v.info)
        }
      }
    },
    null: true
  };
  function getTypecheck(type, mode) {
    let info = TYPES[type];
    if (!info) throw new Error("Invalid type ".concat(type));
    let typecheck = info.typecheck[mode];
    if (!typecheck) throw new Error("No typecheck");
    return typecheck;
  }
  function getInitializer(type, mode) {
    let info = TYPES[type];
    if (!info) throw new Error("Invalid type ".concat(type));
    let init = info.cast[mode];
    if (!init) throw new Error("No initializer");
    return init;
  }
  function getFastInitializer(type, mode) {
    let info = TYPES[type];
    if (!info) throw new Error("Invalid type ".concat(type));
    let init = info.fast_init[mode];
    if (!init) throw new Error("No fast initializer");
    return init;
  }
  function getCloner(type, mode) {
    let info = TYPES[type];
    if (!info) throw new Error("Invalid type ".concat(type));
    let cloner = info.clone[mode];
    if (!cloner) throw new Error("No cloner");
    return cloner;
  }
  function getConvenienceCaster(type, mode) {
    let info = TYPES[type];
    if (!info) throw new Error("Invalid type ".concat(type));
    let cast = info.cast[mode];
    if (!cast) throw new Error("No cast");
    return cast;
  }

  /**
   * Get typecast definition between two types--if the definition exists. Can also be used as a boolean test for whether
   * two types are castable. The list of allowed casts is generated in typecasts.js
   * @param from {string}
   * @param to {string}
   * @returns {TypecastDefinition|*}
   */

  function getCast(from, to) {
    let candidates = typecastDict[from];
    if (!candidates) return;

    for (let i = candidates.length - 1; i >= 0; --i) {
      let candidate = candidates[i];
      if (candidate.to === to) return candidate;
    }
  }
  function canCast(from, to) {
    return from === to || !!getCast(from, to);
  }
  /**
   * Whether a type is valid
   * @param typename {string}
   * @returns {boolean}
   */

  function isValidType(typename) {
    return typeof typename === 'string' && typename in TYPES;
  }
  /**
   * Throw a (hopefully helpful) error when a type is invalid
   * @param typename {string}
   * @returns {boolean}
   */


  function throwInvalidType(typename) {
    if (!isValidType(typename)) {
      if (typeof typename !== 'string') throw new Error('Non-string passed as typename');
      let didYouMean = '';
      let minDistance = Infinity,
          closestType;
      Object.keys(TYPES).forEach(type => {
        let dist = levenshtein(typename, type);

        if (dist < minDistance) {
          minDistance = dist;
          closestType = type;
        }
      });

      if (minDistance < 2) {
        didYouMean = '. Did you mean ' + closestType + '?';
      } else {
        didYouMean = "; valid types are ".concat(Object.keys(TYPES).join(', '), ".");
      }

      throw new Error("Unrecognized type \"".concat(typename, "\"").concat(didYouMean));
    }
  }
  /**
   * Abstract class: definition of an evaluable operator
   */


  class OperatorDefinition {
    constructor(params = {}) {
      var _params$evaluators;

      throwInvalidType(this.returnType = params.returnType);
      /**
       * Mapping of evaluation mode -> evaluator which can evaluate the operator in that mode. "generic" accepts arguments
       * of various types--that is the intent
       * @type {{}}
       */

      this.evaluators = (_params$evaluators = params.evaluators) !== null && _params$evaluators !== void 0 ? _params$evaluators : {};
    }

  }
  /**
   * Taking in a signature argument like "real", ["real", "complex"], or undefined and converting it to a normalized form
   * @param obj {string[]|string|undefined}
   * @returns {string[]}
   */

  function signatureNormalize(obj) {
    if (Array.isArray(obj)) {
      obj.forEach(throwInvalidType);
      return obj;
    } else if (!obj) {
      return [];
    } else {
      throwInvalidType(obj);
      return [obj];
    }
  }

  const specialEvaluators = {
    identity: {
      type: 'special',
      name: 'identity',
      f: x => x
    },
    addition: {
      type: 'special_binary',
      binary: '+',
      f: (a, b) => a + b
    },
    subtraction: {
      type: 'special_binary',
      binary: '-',
      f: (a, b) => a - b
    },
    unary_subtraction: {
      type: 'special',
      f: a => -a
    },
    multiplication: {
      type: 'special_binary',
      binary: '*',
      f: (a, b) => a * b
    },
    division: {
      type: 'special_binary',
      binary: '/',
      f: (a, b) => a / b
    },
    pow: {
      type: 'special',
      name: 'pow',
      f: Math.pow
    }
  };
  /**
   * Given an evaluator description, return a normalized evaluator of the form { type: (str), f: (function) } and
   * potentially more information that the compiler can use to optimize the evaluator (identity, piecewiseness, etc.)
   * An evaluator is either a special_binary, which can be optimized inline to a JS operator, a special, which has
   * optimization information for the compiler, a returns, which means it returns the result of the function, and a
   * writes, which means it writes the result of the function to a destination register.
   * @param obj
   */

  function evaluatorNormalize(obj) {
    if (typeof obj === 'string') {
      let evaluator = specialEvaluators[obj];
      if (!obj) throw new Error("Unknown special evaluator ".concat(obj));
      return evaluator;
    } else if (typeof obj === 'function') {
      return {
        type: 'returns',
        f: obj
      };
    }

    return obj;
  }
  /**
   * Normalize the form of evaluators in an evaluator dictionary. Modifies the passed object.
   * @param obj {{}}
   */


  function evaluatorsNormalize(obj) {
    for (let key in obj) {
      if (!obj.hasOwnProperty(key)) continue;
      obj[key] = evaluatorNormalize(obj[key]);
    }

    return obj;
  }
  /**
   * Operator with a fixed type signature and type output
   */


  class FixedOperatorDefinition extends OperatorDefinition {
    constructor(params = {}) {
      super(params);
      this.signature = signatureNormalize(params.signature);
      this.evaluators = evaluatorsNormalize(params.evaluators);
    }

    argCount() {
      return this.signature.length;
    }
    /**
     * Return whether a given signature is compatible with this operator definition
     * @param signature {string[]}
     * @returns {boolean}
     */


    signatureWorks(signature) {
      let match = this.signature;
      if (match.length !== signature.length) return false;
      return match.every((type, i) => canCast(signature[i], type));
    }

  } // List of typecasts and dict from (source type) -> (dst type)

  let typecastList = [],
      typecastDict = {};

  class TypecastDefinition extends FixedOperatorDefinition {
    constructor(params = {}) {
      let from = params.from;
      let to = params.to;
      super(_objectSpread2(_objectSpread2({}, params), {}, {
        returnType: to,
        signature: from
      }));
      this.from = from;
      this.to = to;
    }

  }

  initTypecasts(TypecastDefinition, typecastList, typecastDict);

  /**
   * Mapping of operator name to list of operators with that name
   */

  const Operators = {};
  /**
   * Find the operator of a given name which matches a signature--a list of types. If types can be successfully casted,
   * then it is a match (the signatures don't have to be identical, just compatible).
   * @param name {string} The operator name (ex. +)
   * @param signature {string[]} The type signature to call the function (ex. ["real", "real"])
   * @returns {OperatorDefinition|undefined} The OperatorDefinition corresponding to that function call, if it exists
   */

  function resolveOperator(name, signature) {
    let candidates = Operators[name];
    if (!candidates) return;

    for (let candidate of candidates) {
      if (candidate.signatureWorks(signature)) {
        return candidate;
      }
    }
  }
  /**
   * Given the name of an operator and its definition, place it into the register of operators
   * @param name {string}
   * @param ops {OperatorDefinition[]}
   */

  function registerOperator(name, ...ops) {
    if (Operators[name]) {
      Operators[name].push(...ops);
    } else {
      Operators[name] = ops;
    }
  }

  function defineSimpleBinaryOperator(type, name, generic, fast_interval) {
    registerOperator(name, new FixedOperatorDefinition({
      signature: [type, type],
      returnType: type,
      evaluators: {
        generic,
        fast_interval: {
          type: "writes",
          f: fast_interval
        }
      }
    }));
  }

  defineSimpleBinaryOperator('int', '+', 'addition', FastRealInterval.add);
  defineSimpleBinaryOperator('int', '-', 'subtraction', FastRealInterval.sub);
  defineSimpleBinaryOperator('int', '*', 'multiplication', FastRealInterval.mul);
  defineSimpleBinaryOperator('int', '^', Math.pow, FastRealInterval.pow);
  defineSimpleBinaryOperator('real', '+', 'addition', FastRealInterval.add);
  defineSimpleBinaryOperator('real', '-', 'subtraction', FastRealInterval.sub);
  defineSimpleBinaryOperator('real', '*', 'multiplication', FastRealInterval.mul);
  defineSimpleBinaryOperator('real', '/', 'division', FastRealInterval.div);
  defineSimpleBinaryOperator('real', '^', Math.pow, FastRealInterval.pow);
  registerOperator('-', new FixedOperatorDefinition({
    signature: ['int'],
    returnType: 'int',
    evaluators: {
      generic: 'unary_subtraction',
      fast_interval: {
        type: "writes",
        f: FastRealInterval.unarySub
      }
    }
  }));
  registerOperator('-', new FixedOperatorDefinition({
    signature: ['real'],
    returnType: 'real',
    evaluators: {
      generic: 'unary_subtraction',
      fast_interval: {
        type: "writes",
        f: FastRealInterval.unarySub
      }
    }
  }));

  function defineUnaryReal(name, evaluator, fast_interval) {
    registerOperator(name, new FixedOperatorDefinition({
      signature: ['real'],
      returnType: 'real',
      evaluators: {
        generic: evaluator,
        fast_interval: {
          type: "writes",
          f: fast_interval
        }
      }
    }));
  }

  defineUnaryReal('sin', Math.sin, FastRealInterval.sin);
  defineUnaryReal('cos', Math.cos, FastRealInterval.cos);
  defineUnaryReal('tan', Math.tan, FastRealInterval.tan);
  defineUnaryReal('asin', Math.asin, FastRealInterval.asin);
  defineUnaryReal('acos', Math.acos, FastRealInterval.acos);
  defineUnaryReal('atan', Math.atan, FastRealInterval.atan);
  defineUnaryReal('sinh', Math.sinh);
  defineUnaryReal('cosh', Math.cosh);
  defineUnaryReal('tanh', Math.tanh);
  defineUnaryReal('asinh', Math.asinh);
  defineUnaryReal('acosh', Math.acosh);
  defineUnaryReal('atanh', Math.atanh);
  defineUnaryReal('sqrt', Math.sqrt, FastRealInterval.sqrt);
  defineUnaryReal('cbrt', Math.cbrt, FastRealInterval.cbrt);
  registerOperator('vec2', new FixedOperatorDefinition({
    signature: ['real', 'real'],
    returnType: 'vec2',
    evaluators: {
      generic: {
        type: "writes",
        f: (x, y, v) => {
          v.x = x;
          v.y = y;
        }
      },
      fast_interval: {
        type: "writes",
        f: (int1, int2, v) => {
          v.xMin = int1.min;
          v.xMax = int1.max;
          v.yMin = int2.min;
          v.yMax = int2.max;
          v.info = int1.info & int2.info;
        }
      }
    }
  }));
  registerOperator('+', new FixedOperatorDefinition({
    signature: ["vec2", "vec2"],
    returnType: "vec2",
    evaluators: {
      generic: {
        type: "writes",
        f: (x, y, v) => {
          v.x = x.x + y.x;
          v.y = x.y + y.y;
        }
      },
      fast_interval: {
        type: "writes",
        f: (x, y, v) => {
          v.xMin = x.xMin + y.xMin;
          v.xMax = x.xMax + y.xMax;
          v.yMin = x.yMin + y.yMin;
          v.yMax = x.yMax + y.yMax;
          v.info = x.info & y.info;
        }
      }
    }
  }));

  class EvaluationError extends Error {
    constructor(message) {
      super(message);
      this.name = 'EvaluationError';
    }

  }
  /**
   * Abstract base class for AST nodes
   */


  class ASTNode {
    applyAll(func, onlyGroups = true, childrenFirst = false, depth = 0) {
      if (!onlyGroups) func(this, depth);
    }

    nodeType() {
      return 'node';
    }

    usedVariables() {
      // Map var -> type
      let types = new Map();
      this.applyAll(node => {
        if (node.nodeType() === 'var') {
          if (!types.has(node.name)) types.set(node.name, node.type);
        }
      });
      return types;
    }

  }
  /**
   * Base class for a node in a Grapheme expression. Has children and a string type (returnType).
   *
   * A node can be one of a variety of types. A plain ASTNode signifies grouping, i.e. parentheses. Extended ASTNodes,
   * like constant nodes and operator nodes have more complexity.
   */

  class ASTGroup extends ASTNode {
    /**
     * A relatively simple base constructor, taking in only the children and the return type, which is "any" by default.
     * @param children {Array}
     * @param type {string}
     */
    constructor(children = [], type = null) {
      super();
      /**
       * Children of this node, which should also be ASTNodes
       * @type {Array}
       */

      this.children = children;
      /**
       * MathematicalType of this ASTNode (real, complex, etc.)
       * @type {string}
       */

      this.type = type;
    }
    /**
     * Apply a function to this node and all of its children, recursively.
     * @param func {Function} The callback function. We call it each time with (node, depth) as arguments
     * @param onlyGroups
     * @param childrenFirst {boolean} Whether to call the callback function for each child first, or for the parent first.
     * @param depth {number}
     * @returns {ASTNode}
     */


    applyAll(func, onlyGroups = false, childrenFirst = false, depth = 0) {
      if (!childrenFirst) func(this, depth);
      let children = this.children;

      for (let i = 0; i < children.length; ++i) {
        let child = children[i];

        if (child instanceof ASTNode) {
          child.applyAll(func, onlyGroups, childrenFirst, depth + 1);
        }
      }

      if (childrenFirst) func(this, depth);
      return this;
    }
    /**
     * Deep clone this ASTGroup.
     * @returns {ASTGroup}
     */


    clone() {
      return new ASTGroup(this.children.map(c => c.clone()), this.type);
    }
    /**
     * Evaluate the value of this node using a given scope, which gives the evaluation parameters (values of the
     * variables) among other things
     * @param scope {{}}
     * @returns {*}
     */


    evaluate(scope) {
      return this.children[0].evaluate(scope);
    }
    /**
     * Given the types of variables, construct function definitions, et cetera
     * @param typeInfo {{}} Dictionary of variable name -> variable type
     * @param opts {{}}
     */


    resolveTypes(typeInfo, opts = {}) {
      this.children.forEach(child => child.resolveTypes(typeInfo, opts));
      this.type = this.children[0].type;
    }

    nodeType() {
      return 'group';
    }

  }
  class VariableNode extends ASTNode {
    constructor(name, type = null) {
      super();
      this.name = name;
      this.type = type;
    }
    /**
     * Deep clone this node.
     * @returns {VariableNode}
     */


    clone() {
      return new VariableNode(this.name, this.type);
    }

    evaluate(scope) {
      let val = scope.variables[this.name];
      if (!val) throw new EvaluationError("Variable ".concat(this.name, " was not found in the scope"));
      return val;
    }
    /**
     * Given the types of variables, construct function definitions, et cetera
     * @param typeInfo {{}} Dictionary of variable name -> variable type
     * @param opts {{}}
     */


    resolveTypes(typeInfo, opts = {}) {
      let type = typeInfo[this.name];
      let strict = !!opts.strict;
      if (strict && !type) throw new Error("MathematicalType of variable ".concat(this.name, " is unknown"));
      this.type = type !== null && type !== void 0 ? type : 'real';
    }

    nodeType() {
      return 'var';
    }

  }
  class OperatorNode extends ASTGroup {
    constructor(operator) {
      super();
      this.op = operator;
      this.definition = null; // One of the definitions in operators.js is actually going to be used to evaluate the node
    }
    /**
     * Deep clone this node.
     * @returns {OperatorNode}
     */


    clone() {
      let children = this.children.map(c => c.clone());
      let node = new OperatorNode(this.op);
      node.children = children;
      node.type = this.type;
      node.definition = this.definition;
      return node;
    }

    getChildrenSignature() {
      return this.children.map(child => child.type);
    }

    evaluate(scope) {
      if (!this.definition) throw new EvaluationError("Evaluation definition not generated for operator node");
      const children = this.children;
      let params = this.children.map(child => child.evaluate(scope));
      const definition = this.definition,
            sig = definition.signature; // Cast arguments appropriately

      params.forEach((param, i) => {
        let dstType = sig[i];
        let srcType = children[i].type;
        if (dstType !== srcType) params[i] = getCast(srcType, dstType)(param);
      });
      return definition.evaluators.generic.f.apply(null, params);
    }
    /**
     * Given the types of variables, construct function definitions, et cetera
     * @param typeInfo {{}} Dictionary of variable name -> variable type
     * @param opts {{}}
     */


    resolveTypes(typeInfo, opts = {}) {
      // We need to find the function definition that matches
      this.children.forEach(child => child.resolveTypes(typeInfo));
      let signature = this.getChildrenSignature();
      let definition = resolveOperator(this.op, signature);
      if (!definition) throw new Error('Could not find a suitable definition for operator ' + this.op + '(' + signature.join(', ') + ').');
      this.definition = definition;
      this.type = definition.returnType;
      return this;
    }

    nodeType() {
      return 'op';
    }

  }
  class ConstantNode extends ASTNode {
    constructor(value, text, type = 'real') {
      super();
      this.value = value;
      this.text = text;
      this.type = type;
    }

    clone() {
      return new ConstantNode(this.value, this.text, this.type);
    }

    evaluate(scope) {
      return this.value;
    }

    resolveTypes(typeInfo, opts) {// Nothing to do here
    }

    nodeType() {
      return 'const';
    }

  }

  /**
   * In this file, we convert strings representing expressions in Grapheme into their ASTNode counterparts. For example,
   * x^2 is compiled to OperatorNode{operator=^, children=[VariableNode{name="x"}, ConstantNode{value="2"}]}
   */
  const OperatorSynonyms = {
    arcsinh: 'asinh',
    arsinh: 'asinh',
    arccosh: 'acosh',
    arcosh: 'acosh',
    arctanh: 'atanh',
    artanh: 'atanh',
    arcsech: 'asech',
    arccsch: 'acsch',
    arccoth: 'acoth',
    arsech: 'asech',
    arcsch: 'acsch',
    arcoth: 'acoth',
    arcsin: 'asin',
    arsin: 'asin',
    arccos: 'acos',
    arcos: 'acos',
    arctan: 'atan',
    artan: 'atan',
    arcsec: 'asec',
    arccsc: 'acsc',
    arccot: 'acot',
    arsec: 'asec',
    arcsc: 'acsc',
    arcot: 'acot',
    log: 'ln'
  };
  const operator_regex = /^[*\-\/+^]|^[<>]=?|^[=!]=|^and\s+|^or\s+/;
  const function_regex = /^([a-zA-Z_][a-zA-Z0-9_]*)\(/;
  const constant_regex = /^[0-9]*\.?[0-9]*e?[0-9]+/;
  const variable_regex = /^[a-zA-Z_][a-zA-Z0-9_]*/;
  const paren_regex = /^[()\[\]]/;
  const comma_regex = /^,/;
  const string_regex = /^"(?:[^"\\]|\\.)*"/;
  /**
   * Take a string and check whether its parentheses are balanced, throwing a ParserError if not.
   * @param string
   */

  function checkParensBalanced(string) {
    // Stack of parentheses
    const stack = [];
    let i = 0;
    let err = false;

    outer: for (; i < string.length; ++i) {
      const chr = string[i];

      switch (chr) {
        case '(':
        case '[':
          stack.push(chr);
          break;

        case ')':
        case ']':
          if (stack.length === 0) {
            err = true;
            break outer;
          }

          if (chr === ')') {
            let pop = stack.pop();

            if (pop !== '(') {
              err = true;
              break outer;
            }
          } else {
            let pop = stack.pop();

            if (pop !== '[') {
              err = true;
              break outer;
            }
          }

      }
    }

    if (stack.length !== 0) err = true;
    if (err) getAngryAt(string, i, 'Unbalanced parentheses/brackets');
  }


  let testObj = {};
  function isValidVariableName(str) {
    return typeof str === 'string' && !!str.match(variable_regex) && str[0] !== '$' && !testObj[str];
  }

  function* tokenizer(string) {
    // what constitutes a token? a sequence of n letters, one of the operators *-/+^, parentheses or brackets
    string = string.trimEnd();
    let i = 0;
    let prev_len = string.length;
    let original_string = string;

    while (string) {
      string = string.trim();
      i += prev_len - string.length;
      prev_len = string.length;
      let match;

      do {
        match = string.match(paren_regex);

        if (match) {
          yield {
            type: 'paren',
            paren: match[0],
            index: i
          };
          break;
        }

        match = string.match(constant_regex);

        if (match) {
          yield {
            type: 'constant',
            value: match[0],
            index: i
          };
          break;
        }

        match = string.match(operator_regex);

        if (match) {
          yield {
            type: 'operator',
            op: match[0].replace(/\s+/g, ''),
            index: i
          };
          break;
        }

        match = string.match(comma_regex);

        if (match) {
          yield {
            type: 'comma',
            index: i
          };
          break;
        }

        match = string.match(function_regex);

        if (match) {
          yield {
            type: 'function',
            name: match[1],
            index: i
          };
          yield {
            type: 'paren',
            paren: '(',
            index: i + match[1].length
          };
          break;
        }

        match = string.match(variable_regex);

        if (match) {
          yield {
            type: 'variable',
            name: match[0],
            index: i
          };
          break;
        }

        match = string.match(string_regex);

        if (match) {
          yield {
            type: 'string',
            contents: match[0].slice(1, -1),
            index: i
          };
        }

        getAngryAt(original_string, i, 'Unrecognized token');
      } while (false);

      let len = match[0].length;
      string = string.slice(len);
    }
  }

  function checkValid(string, tokens) {
    for (let i = 0; i < tokens.length - 1; ++i) {
      let token1 = tokens[i];
      let token2 = tokens[i + 1];
      let token2IsUnary = token2.op === '-' || token2.op === '+';

      if ((token1.type === 'operator' || token1.type === 'comma') && (token2.type === 'operator' || token2.type === 'comma') && (!token2IsUnary || i === tokens.length - 2)) {
        getAngryAt(string, token2.index, 'No consecutive operators/commas');
      }

      if (token1.paren === '(' && token2.paren === ')') getAngryAt(string, token2.index, 'No empty parentheses');
      if (token1.paren === '[' && token2.paren === ']') getAngryAt(string, token2.index, 'No empty brackets');
      if (token1.type === 'operator' && token2.paren === ')') getAngryAt(string, token2.index, 'No operator followed by closing parenthesis');
      if (token1.type === 'operator' && token2.paren === ']') getAngryAt(string, token2.index, 'No operator followed by closing bracket');
      if (token1.type === 'comma' && token2.paren === ')') getAngryAt(string, token2.index, 'No comma followed by closing parenthesis');
      if (token1.type === 'comma' && token2.paren === ']') getAngryAt(string, token2.index, 'No comma followed by closing bracket');
      if (token1.paren === '(' && token2.type === 'comma') getAngryAt(string, token2.index, 'No comma after starting parenthesis');
      if (token1.paren === '[' && token2.type === 'comma') getAngryAt(string, token2.index, 'No comma after starting bracket');
      if (token1.paren === '(' && token2.type === 'operator' && !token2IsUnary) getAngryAt(string, token2.index, 'No operator after starting parenthesis');
      if (token1.paren === '[' && token2.type === 'operator' && !token2IsUnary) getAngryAt(string, token2.index, 'No operator after starting bracket');
    }

    if (tokens[0].type === 'comma' || tokens[0].type === 'operator' && !(tokens[0].op === '-' || tokens[0].op === '+')) getAngryAt(string, 0, 'No starting comma/operator');
    const last_token = tokens[tokens.length - 1];
    if (last_token.type === 'comma' || last_token.type === 'operator') getAngryAt(string, tokens.length - 1, 'No ending comma/operator');
  }
  /**
   * Find a pair of parentheses in a list of tokens, namely the first one as indexed by the closing paren/bracket. For
   * example, in (x(y(z)(w))) it will find (z).
   * @param children
   * @returns {number[]}
   */


  function findParenIndices(children) {
    let startIndex = -1;

    for (let i = 0; i < children.length; ++i) {
      let child = children[i];
      if (!child.paren) continue;
      if (child.paren === '(' || child.paren === '[') startIndex = i;
      if ((child.paren === ')' || child.paren === ']') && startIndex !== -1) return [startIndex, i];
    }
  }
  /**
   * Convert constants and variables to their ASTNode counterparts
   * @param tokens {Array}
   */


  function processConstantsAndVariables(tokens) {
    for (let i = 0; i < tokens.length; ++i) {
      let token = tokens[i];

      switch (token.type) {
        case 'constant':
          let v = parseFloat(token.value);
          let node = new ConstantNode(v, token.value);
          if (Number.isInteger(v)) node.type = 'int';
          tokens[i] = node;
          break;

        case 'variable':
          tokens[i] = new VariableNode(token.name);
          break;
      }
    }
  } // To process parentheses, we find pairs of them and combine them into ASTNodes containing the nodes and
  // tokens between them. We already know the parentheses are balanced, which is a huge help here. We basically go
  // through each node recursively and convert all paren pairs to a node, then recurse into those new nodes


  function processParentheses(rootNode) {
    rootNode.applyAll(node => {
      let parensRemaining = true;

      while (parensRemaining) {
        parensRemaining = false;
        let indices = findParenIndices(node.children);

        if (indices) {
          parensRemaining = true;
          let newNode = new ASTGroup();
          let expr = node.children.splice(indices[0], indices[1] - indices[0] + 1, newNode);
          newNode.children = expr.slice(1, expr.length - 1);
        }
      }
    }, true);
  } // Turn function tokens followed by ASTNodes into OperatorNodes


  function processFunctions(rootNode) {
    rootNode.applyAll(node => {
      let children = node.children;

      for (let i = 0; i < children.length; ++i) {
        let token = children[i];

        if (token.type === 'function') {
          let synonym = OperatorSynonyms[token.name];
          let newNode = new OperatorNode(synonym !== null && synonym !== void 0 ? synonym : token.name);
          children[i] = newNode; // Take children from the node coming immediately after

          newNode.children = children[i + 1].children; // Remove the node immediately after

          children.splice(i + 1, 1);
        }
      }
    }, true);
  } // Given a node and an index i of a binary operator, combine the nodes immediately to the left and right of the node
  // into a single binary operator


  function combineBinaryOperator(node, i) {
    const children = node.children;
    let newNode = new OperatorNode(children[i].op);
    newNode.children = [children[i - 1], children[i + 1]];
    children.splice(i - 1, 3, newNode);
  } // Process the highest precedence operators. Note that e^x^2 = (e^x)^2 and e^-x^2 = e^(-x^2).


  function processUnaryAndExponentiation(root) {
    root.applyAll(node => {
      let children = node.children; // We iterate backwards

      for (let i = children.length - 1; i >= 0; --i) {
        let child = children[i];
        if (child instanceof ASTNode || !child.op) continue;

        if (child.op === '-') {
          // If the preceding token is an unprocessed non-operator token, or node, then it's a binary expression
          if (i !== 0 && children[i - 1].type !== 'operator') continue;
          let newNode = new OperatorNode('-');
          newNode.children = [children[i + 1]];
          children.splice(i, 2, newNode);
        } else if (child.op === '+') {
          // See above
          if (i !== 0 && children[i - 1].type !== 'operator') continue; // Unary + is a no-op

          children.splice(i, 1);
        } else if (child.op === '^') {
          combineBinaryOperator(node, i);
          --i;
        }
      }
    }, true);
  } // Combine binary operators, going from left to right, with equal precedence for all


  function processOperators(root, operators) {
    root.applyAll(node => {
      let children = node.children;

      for (let i = 0; i < children.length; ++i) {
        let child = children[i];
        if (child instanceof ASTNode || !child.op) continue;

        if (operators.includes(child.op)) {
          combineBinaryOperator(node, i);
          --i;
        }
      }
    }, true);
  } // The index of each operator is also an enum, which is used in comparison chains to describe which operator is being used


  const comparisonOperators = ['<', '<=', '==', '!=', '>=', '>']; // Process "comparison chains", which are sequences of the form 0 <= x < 2. Internally these are transformed into
  // "cchain" operators, which have the form cchain(0, 1 (enum comparison), x, 0 (enum comparison), 2). Gross, but
  // it's hard to cleanly represent these comparison chains otherwise. You *could* represent them using boolean operations,
  // but that duplicates the internal nodes which is inefficient

  function processComparisonChains(root) {
    root.applyAll(node => {
      const children = node.children;

      for (let i = 0; i < children.length; ++i) {
        let child = children[i];
        if (child instanceof ASTNode || !child.op) continue;

        if (comparisonOperators.includes(children[i].op)) {
          let comparisonChainFound = false; // Found a comparison operator token; we now check for whether the tokens +2, +4, etc. ahead of it are also
          // comparison tokens. If so, we emit a comparison chain
          // Index of the last comparison token, plus 2

          let j = i + 2;

          for (; j < children.length; j += 2) {
            let nextChild = children[j];
            if (nextChild instanceof ASTNode || !nextChild.op) continue;

            if (comparisonOperators.includes(children[j].op)) {
              comparisonChainFound = true;
            } else {
              break;
            }
          }

          if (comparisonChainFound) {
            // The nodes i, i+2, i+4, ..., j-4, j-2 are all comparison nodes. Thus, all nodes in the range i-1 ... j-1
            // should be included in the comparison chain
            let comparisonChain = new OperatorNode('cchain');
            let cchainChildren = comparisonChain.children = children.splice(i - 1, j - i + 1, comparisonChain);

            for (let i = cchainChildren.length - 2; i >= 0; i -= 2) {
              // Convert operator tokens into constant node corresponding to their enum status
              let token = cchainChildren[i];
              let tokenEnum = comparisonOperators.indexOf(token.op);
              cchainChildren[i] = new ConstantNode(tokenEnum, tokenEnum + '', 'int');
            }

            return;
          }
        }
      }
    }, true);
  } // Remove residual commas from the node


  function removeCommas(root) {
    root.applyAll(node => {
      let children = node.children;
      let i = children.length;

      while (i--) {
        if (children[i].type === 'comma') children.splice(i, 1);
      }
    }, true);
  }
  /**
   * Parse a given list of tokens, returning a single ASTNode. At this point, the tokens are a list of the form
   * { type: "function"|"variable"|"paren"|"operator"|"constant"|"comma", index: <index of the token in the original string>,
   *  op?: <operator>, name?: <name of variable>, paren?: <type of paren> }
   * @param tokens
   * @returns {ASTNode}
   */


  function parseTokens(tokens) {
    processConstantsAndVariables(tokens);
    let root = new ASTGroup(tokens);
    processParentheses(root);
    processFunctions(root);
    processUnaryAndExponentiation(root); // PEMDAS

    processOperators(root, ['*', '/']);
    processOperators(root, ['-', '+']);
    processComparisonChains(root);
    processOperators(root, comparisonOperators);
    processOperators(root, ['and', 'or']);
    removeCommas(root);
    return root;
  }

  function parseString(string, types = {}) {
    checkParensBalanced(string);
    let tokens = [];

    for (let token of tokenizer(string)) {
      tokens.push(token);
    }

    checkValid(string, tokens);
    let node = parseTokens(tokens).children[0];
    return node;
  }

  /**
   * Convert a node into a function, or set of functions.
   * @param root
   * @param opts
   */
  function compileNode(root, opts = {}) {
    // Whether to do typechecks to passed arguments
    let doTypechecks = !!opts.typechecks;
    if (!opts.mode) opts.mode = "generic"; // We construct the text of a function of the form (imports) => { let setup = ... ; return function (...) { ... }}
    // then create the function via new Function. The evaluation process basically involves generating variables $0, $1,
    // $2, ... that correspond to the nodes in the graph. For example, x^2+3 becomes
    // $0 = scope.x
    // $1 = 2
    // $2 = Math.pow($0, $1)
    // $3 = 3
    // $4 = $2 + $3
    // return $4
    // Breaking down the evaluation like this allows for much greater optimizations, including conditional eval (we'll
    // get to that later).

    let id = 0;
    /**
     * Get id to be used for intermediate functions and the like
     * @returns {string}
     */

    function getVarName() {
      return '$' + ++id;
    } // Map between nodes and information about those nodes (corresponding var names, optimizations, etc.)


    let nodeInfo = new Map(); // Create stores for each node for information about each

    root.applyAll(node => {
      nodeInfo.set(node, {});
    }, false
    /* call the function on all nodes, not just group nodes */
    ); // Mapping between function/constant import objects and their variable names

    let importInfo = new Map(); // Text of the setup code preceding all the exported functions

    let globalSetup = '';
    /**
     * Import a function f and return a constant variable name corresponding to that function, to be placed in
     * globalSetup. Importing the same function twice returns the same variable
     * @param f {Function}
     * @returns {string}
     */

    function importFunction(f) {
      if (typeof f !== 'function') throw new TypeError("Unable to import function ".concat(f));
      let stored = importInfo.get(f);
      if (stored) return stored;
      let fName = getVarName() + '_f';
      if (doTypechecks) // Make sure f is actually a function
        globalSetup += "if (typeof ".concat(fName, " !== \"function\") throw new TypeError(\"Imported parameter ").concat(fName, " is not a function\");\n");
      importInfo.set(f, fName);
      return fName;
    }
    /**
     * Import a generic variable of any type
     * @param c {any} External constant
     * @returns {string} Variable name corresponding to the constant
     */


    function importConstant(c) {
      let stored = importInfo.get(c);
      if (stored) return stored;
      let cName = getVarName() + '_c';
      importInfo.set(c, cName);
      return cName;
    } // Dict of exported functions; mapping between names of functions and their arguments, setup and body


    let exportedFunctions = {};

    function exportFunction(name, args, body, setup) {
      exportedFunctions[name] = {
        args,
        body,
        setup
      };
    } // Compile a function which, given a scope, evaluates the function


    compileEvaluationFunction(root, nodeInfo, importFunction, importConstant, exportFunction, getVarName, opts); // efText is of the form return { evaluate: function ($1, $2, ) { ... } }

    let efText = Object.values(exportedFunctions).map(f => f.setup).join('\n') + // setup
    'return {\n' + Object.entries(exportedFunctions).map(([name, info]) => "".concat(name, ": function (").concat(info.args.join(','), ") { ").concat(info.body, " }")).join(',') + '\n}';
    let nfText = globalSetup + efText;
    let imports = Array.from(importInfo.keys());
    let importNames = Array.from(importInfo.values()); // Last argument is the text of the function itself

    importNames.push(nfText);
    return Function.apply(null, importNames).apply(null, imports);
  }

  function compileEvaluationFunction(root, nodeInfo, importFunction, importConstant, exportFunction, getUnusedVarName, opts) {
    var _opts$args;

    let doTypechecks = !!opts.typechecks;
    let doCasts = !!opts.casts;
    let mode = opts.mode;
    let copyResult = !!opts.copyResult; // List of arguments to be placed BEFORE the scope variable. For example, we might do
    // compileNode("x^2+y^2", { args: ["x", "y"] }) and then do res.evaluate(3, 4) -> 25, eliminating the need for a scope
    // object.

    let exportedArgs = (_opts$args = opts.args) !== null && _opts$args !== void 0 ? _opts$args : [];
    exportedArgs.forEach(a => {
      if (!isValidVariableName(a)) throw new Error("Invalid exported variable name ".concat(a));
    });
    let scopeVarName = "scope";
    let scopeUsed = !!opts.scope; // Components to a compiled function:
    // Pre-allocated variables

    let allocationsText = ""; // Typecheck scope

    let typecheckScopeText = ""; // Get scoped variables

    let scopedText = ""; // Typecheck/cast variables

    let typecheckText = ""; // Allocate local variables

    let localsText = ""; // Computation

    let computationText = ""; // Result

    let returnText = ""; // Add a typecheck for a variable

    function addTypecheck(jsVariableName, variableName, type) {
      let typecheck = getTypecheck(type, mode);
      let tcFunc = importFunction(typecheck.f);
      typecheckText += "if (!".concat(tcFunc, "(").concat(jsVariableName, ")) throw new TypeError(").concat(jsVariableName, " === undefined ? \"Expected variable ").concat(variableName, " to be defined\" : \"Expected variable ").concat(variableName, " to have type ").concat(type, "\");\n");
    }

    function addCast(jsVariableName, variableName, type) {
      let typecheck = getConvenienceCaster(type, mode);
      let tcFunc = importFunction(typecheck.f);
      typecheckText += "".concat(jsVariableName, "=").concat(tcFunc, "(").concat(jsVariableName, ");\nif (").concat(jsVariableName, " === undefined) throw new TypeError(\"Failed to cast variable ").concat(variableName, " to type ").concat(type, "\");\n");
    } // Get a variable from the scope


    function getScopedVariable(scopedVarName) {
      let varName = getUnusedVarName();
      scopedText += "var ".concat(varName, "=").concat(scopeVarName, ".").concat(scopedVarName, ";\n");
      return varName;
    } // Allocate a variable using a given allocator


    function allocateVariable(type, initValue, local = false) {
      let hasInitValue = initValue !== undefined;
      let text;
      let varName = getUnusedVarName();

      if (mode === "generic" && (type === "real" || type === "bool" || type === "int")) {
        // special case where the allocation function can be elided
        text = "var ".concat(varName, "=").concat(initValue !== null && initValue !== void 0 ? initValue : getFastInitializer(type, mode).f(), ";\n");
      } else {
        let allocator = (hasInitValue ? getInitializer : getFastInitializer)(type, mode);
        let allFunc = importFunction(allocator.f);
        text = "var ".concat(varName, "=").concat(allFunc, "(").concat(hasInitValue ? importConstant(initValue) : '', ");\n");
      }

      if (local) {
        localsText += text;
      } else {
        allocationsText += text;
      }

      return varName;
    } // Allocate a *local* variable using a given allocator


    function localVariable(type, initValue) {
      allocateVariable(type, initValue, true);
    }

    function computeVariable(type, args, contextArgs, evaluator, local = false) {
      if (!evaluator) {
        throw new Error("No evaluator for function");
      }

      if (evaluator.type === "special") {
        if (evaluator.name === "identity") {
          return args[0];
        }
      }

      let evaluatorType = evaluator.type === "writes" ? "writes" : "returns";
      let varName;
      let evalFunc = importFunction(evaluator.f);

      if (evaluatorType === "writes") {
        varName = (local ? localVariable : allocateVariable)(type);
        computationText += "".concat(evalFunc, "(").concat(args.join(', '), ", ").concat(varName).concat(contextArgs.length ? ', ' + contextArgs.join(', ') : '', ");\n");
      } else {
        varName = local ? getUnusedVarName() : allocateVariable(type);
        let allArgs = args.concat(contextArgs).join(', ');
        computationText += "".concat(local ? "var " : "").concat(varName, "=").concat(evalFunc, "(").concat(allArgs, ");\n");
      }

      return varName;
    }

    function getCasted(node, dstType) {
      let info = nodeInfo.get(node);
      if (node.type === dstType) return info.varName;
      let casts = info.casts;
      if (!casts) casts = info.casts = {};
      if (casts[dstType]) return casts[dstType];
      let typecast = getCast(node.type, dstType);
      return casts[dstType] = computeVariable(dstType, [info.varName], [], typecast.evaluators[mode]);
    } // Map between variable name -> JS variable name


    let varMap = new Map();
    let variables = root.usedVariables();

    for (const [name, type] of variables) {
      let isExported = exportedArgs.includes(name);
      let varName;

      if (isExported) {
        varName = name;
      } else {
        scopeUsed = true; // Does something like var $1 = scope.x

        varName = getScopedVariable(name);
      }

      varMap.set(name, varName);
      if (doTypechecks) addTypecheck(varName, name, type);
      if (doCasts) addCast(varName, name, type);
    }

    if (scopeUsed) {
      if (doTypechecks) {
        typecheckScopeText += "if (typeof ".concat(scopeVarName, " !== \"object\" || Array.isArray(").concat(scopeVarName, ")) throw new TypeError(\"Scope must be an object\");\n");
      }

      exportedArgs.push(scopeVarName);
    }

    root.applyAll(node => {
      let info = nodeInfo.get(node);

      switch (node.nodeType()) {
        case "var":
          info.varName = varMap.get(node.name);
          break;

        case "const":
          info.varName = allocateVariable(node.type, node.value);
          break;

        case "op":
          let definition = node.definition;
          let signature = definition.signature;
          let children = node.children;
          let args = children.map((child, i) => getCasted(child, signature[i]));
          let evaluator = definition.evaluators[mode];
          if (!evaluator) throw new Error("No evaluator found for function ".concat(definition.name, " under mode ").concat(mode));
          info.varName = computeVariable(node.type, args, [], evaluator);
          break;

        case "group":
          info.varName = nodeInfo.get(node.children[0]).varName;
          break;
      }
    }, false, true); // Return text

    let rootInfo = nodeInfo.get(root);
    let rootVarName = rootInfo.varName;

    if (copyResult) {
      rootVarName = computeVariable(rootInfo, [rootVarName], [], getCloner(type, mode), true);
    }

    returnText += "return ".concat(rootVarName, ";\n");
    let fText = typecheckScopeText + scopedText + typecheckText + localsText + computationText + returnText;
    exportFunction("evaluate", exportedArgs, fText, allocationsText);
  }

  /**
   * A base class to use for event listeners and the like. Supports things like addEventListener(eventName, callback),
   * triggerEvent(name, ?data), removeEventListener( ... ), removeEventListeners(?name). Listeners are called with
   * data and this as parameters. If a listener returns true, the event does not propagate to any other listeners.
   */
  class Eventful {
    constructor() {
      _defineProperty(this, "eventListeners", new Map());
    }

    /**
     * Register an event listener to a given event name. It will be given lower priority than the ones that came before.
     * The callbacks will be given a single parameter "data".
     * @param eventName {string} The name of the event
     * @param callback {function|Array} The callback(s) to register
     * @returns {Eventful} Returns self (for chaining)
     */
    addEventListener(eventName, callback) {
      if (Array.isArray(callback)) {
        for (const c of callback) this.addEventListener(eventName, c);

        return this;
      } else if (typeof callback === 'function') {
        if (typeof eventName !== 'string' || !eventName) throw new TypeError('Invalid event name');
        let listeners = this.eventListeners.get(eventName);

        if (!listeners) {
          listeners = [];
          this.eventListeners.set(eventName, listeners);
        }

        if (!listeners.includes(callback)) listeners.push(callback);
        return this;
      } else throw new TypeError('Invalid callback');
    }
    /**
     * Get the event listeners under "eventName", cloned so that they can be derped around with
     * @param eventName {string} Name of the event whose listeners we want
     * @returns {Array<function>}
     */


    getEventListeners(eventName) {
      const listeners = this.eventListeners.get(eventName);
      return Array.isArray(listeners) ? listeners.slice() : [];
    }
    /**
     * Whether there are any event listeners registered for the given name
     * @param eventName
     * @returns {boolean} Whether any listeners are registered for that event
     */


    hasEventListenersFor(eventName) {
      return Array.isArray(this.eventListeners.get(eventName));
    }
    /**
     * Remove an event listener from the given event. Fails silently if that listener is not registered.
     * @param eventName {string} The name of the event
     * @param callback {function} The callback to remove
     * @returns {Eventful} Returns self (for chaining)
     */


    removeEventListener(eventName, callback) {
      if (Array.isArray(callback)) {
        for (const c of callback) this.removeEventListener(eventName, c);

        return this;
      }

      const listeners = this.eventListeners.get(eventName);

      if (Array.isArray(listeners)) {
        const index = listeners.indexOf(callback);
        if (index !== -1) listeners.splice(index, 1);
        if (listeners.length === 0) this.eventListeners.delete(eventName);
      }

      return this;
    }
    /**
     * Remove all event listeners for a given event. Fails silently if there are no listeners registered for that event.
     * @param eventName {string} The name of the event whose listeners should be cleared
     * @returns {Eventful} Returns self (for chaining)
     */


    removeEventListeners(eventName) {
      this.eventListeners.delete(eventName);
      return this;
    }
    /**
     * Trigger the listeners registered under an event name, passing (data, this, eventName) to each. Returns true if
     * some listener returned true, stopping propagation; returns false otherwise
     * @param eventName {string} Name of the event to be triggered
     * @param data {any} Optional data parameter to be passed to listeners
     * @returns {boolean} Whether any listener stopped propagation
     */


    triggerEvent(eventName, data) {
      if (this.eventListeners.size === 0) return false;
      const listeners = this.eventListeners.get(eventName);

      if (Array.isArray(listeners)) {
        for (let i = 0; i < listeners.length; ++i) {
          if (listeners[i](data)) return true;
        }
      }

      return false;
    }

  }

  // The general form of a prop store is { value: , changed: , userValue: , }
  const proxyHandlers = {
    get: (target, propName) => {
      return target.get(propName);
    },
    set: (target, propName, value) => {
      target.set(propName, value);
    }
  };
  /**
   * The properties class stores an element's internal properties, in contrast to the user-facing properties, which are
   * effectively getters and setters. There are benefits and costs to this approach. One of the main benefits is an easier
   * API for the programmer to manipulate complex stylings and properties. Another benefit is the built-in ability to
   * track whether a value has changed and whether it should be passed on to child elements. It also provides a sort of
   * abstract concept where the properties are the definition of how a given object is *rendered*.
   *
   * A property that does not exist essentially has the value of undefined. Deleting a property is thus essentially
   * equivalent to setting its value to undefined, with some important caveats, because the property's changed status
   * must still be stored. Such "undefined properties" are technical only and not inheritable or useable.
   *
   * Beyond a simple property store, this object provides two paramount functionalities: changedness and inheritance.
   * The concept of "changed" is relatively simple: it is whether a property has changed since the last time the element
   * was fully updated, *or* when the property's change was dealt with in a way such that it is consistent that the
   * element has fully updated. In other words, it is *functionally* identical to the last time an element was fully
   * updated. That means that if a given array is mutated, its changed value must be set to true, because it is not
   * functionally identical, even though it is strictly equal. It also means that if a given bounding box is cloned, its
   * "changed" status may still be unchanged.
   *
   * There are some simple things we can do to avoid recomputations. For sceneDimensions, for example, its call to set its
   * value is marked with equalityCheck = 2, meaning a deep equals comparison. Thus if the same dimensions are computed,
   * it will not be marked as a change. Cached values may also be used if that's appropriate, but it is generally not
   * (overhead and code complexity).
   *
   * Inheritance is whether a property should be forwarded to an element's descendants, stored in the property store's
   * inherit property. An inherit value of 2 means that the property is owned by the current element; an inherit value of
   * 1 means that the property is being passed along from an element above the current one. For example, sceneDimensions
   * is an inheritable property of a top-level scene, and thus has { inherit: 2 } in the scene's property store, while
   * in a figure below that scene, it has { inherit: 1 }. Inheritable properties must be treated slightly differently than
   * normal properties because they have effects outside the current element, and influence other elements directly.
   * Ideally, all elements should know whether an inheritable property has changed, but it would be inefficient and
   * ultimately inelegant to propagate down inherited properties every time one was changed. Instead, the inheritance
   * chain occurs during an update; an element inherits the inheritable properties from above it. An element only looks
   * for inheritable properties if parent.props.hasChangedInheritableProperties is 1 or 2, or if the element's updateStage
   * is -1. The latter case is for when an element has just been added to a group, and thus needs all the group's
   * inherited properties, whether they are changed or not.
   *
   * Another special property of inherited properties is that their "changed/unchanged" status is supplemented by a simple
   * time-based versioning system, as are many other Grapheme components. Inheritable properties thus have a version
   * value of some integer n, where n is unique and assigned in order of when the property was last set. A given
   * value of a property is associated with a unique integer n. When inheriting properties from a parent, all inheritable
   * properties are traversed, and those properties whose version is greater than the version in the child will be
   * inherited (or if the child doesn't have the property at all). An inheritable property is thus "changed" to a given
   * element if its value is less than the element's own version value, which is assigned in a similar temporal fashion
   * immediately following that element's update completion. It provides an efficient way of dealing with the concept of
   * "changed" for a certain property, but across multiple elements.
   *
   * A given element may set its private properties' "changed" status to false as long as it is consistent, and the
   * element may set the changed values of any of its inheritable properties to false, *provided* they leave the value
   * of this.props.hasChangedInheritableProperties alone. That's because that value is checked by children if they are
   * wondering whether they need to inherit props, and even if a parent's job may be done, the children still need to
   * check in case their version values don't match up. hasChangedInheritableProperties is only set to 0 (er, only should
   * be set to 0, as there is no enforcement mechanism) by the scene, during a global update, which will ensure that
   * inherited properties do not need to be propagated down anywhere. The other thing is that if an element ever changes
   * one of its inheritable properties, all of its direct children's updateStages need to be set to 0/-1, since they need
   * to be recomputed. Note that this will not lead to much overhead, because inheritable properties are supposed to be
   * used sparingly, and because setting a child's updateStage to 0 would mean they would simply check if any inheritable
   * props have changed and any of their props have changed, which will often mean a couple boolean accesses (many
   * elements can just explicitly inherit a few values).
   *
   * It is perhaps instructive to consider how properties will work on an actual example. Let's take a scene with
   * width: 640, height: 320, and dpr: 1, all of which are *local* properties, with an inheritance value of 0. Also, take
   * a figure with margins: { left: 0, top: 0, ... }, another local property. Finally, let a function plot with
   * function: "x^2" and pen: "red" be a child of the figure.
   *
   * It's a simple scene, and as nothing has been updated yet, all elements' versions and updateStages are -1. Indeed,
   * the figure has no clue about its position on the scene, let alone the transformation of coordinates needed for the
   * function to be happy. All elements have their local, uninheritable properties and those only. All of those
   * properties, being set moments ago, have changed: true (think of it as, they're being changed from being undefined).
   *
   * When scene.updateAll() is called, it traverses the tree of elements, calling update() on each one. scene.update()
   * sees that its updateStage is not 100, and so calls scene._update(), which observes that "width", "height", and "dpr"
   * have changed. It thus computes an inheritable property called sceneDimensions, which is just an object containing
   * those three parameters in one inheritable bundle. This property's version is, say, 501. The scene also sets all
   * of the children's update stages to the minimum of 0 and their current stage, which means they all stay at -1.
   * The scene is now permitted to set its own "changed" values to false for local properties. hasChangedInheritable
   * Properties, however, remains at 2. (One nuance: it's at 2 when inherited properties have been added or deleted, and
   * at 1 when only their values have changed.) The scene's updateStage is now 100
   *
   * figure.update() is next in line. Seeing its updateStage is not 100, it calls figure._update(), which observes that
   * its updateStage is -1, and thus properties must be inherited. It does so, keeping the version of sceneDimensions and
   * setting its own hasChangedInheritableProperties to 2, along with setting all its children's update stages to 0/-1.
   * Its version of sceneDimensions has inherit: 1, not 2. It also calculates its plotting box and other things, creating
   * a new value called plotTransform, with inherit: 2! It also sets all the children's update stages to the minimum of
   * 0 and their current value, which leaves them at -1. Also, focus on the sceneDimensions has a copied version. The
   * changed value of sceneDimensions is only used by the figure; the children inheriting always look at the version. In
   * other words, the changed is local to the element.
   *
   * function.update() is the last. Seeing its updateStage is not 100, it calls function._update(), which observes that
   * its updateStage is -1, and thus all properties must be inherited. It does so, keeping the versions of sceneDimensions
   * and plotTransform, along with private changed values for those properties. Again, THE CHANGED VALUE OF THE PARENT'S
   * PROPERTY IS IRRELEVANT. All inheritable properties are checked and their changed values compared to the element's
   * current value.
   *
   * At this point, the remainder of scene.updateAll() goes through all elements and sets their props.hasChangedInheritabl
   * eProperties to 0, knowing that all elements have updated and no longer need to check their parents for changed
   * inheritable properties. Let this state of the scene be STATE 1, a fully updated scene.
   *
   * Beginning from STATE 1, suppose another function plot, called function2, is added to the figure. Its updateStage is
   * -1. Thus, when scene.updateAll() is called and it gets to function2.update(), it knows to ignore the fact that
   * figure.props.hasChangedInheritableProperties is 0, and inherit all properties anyway. It stores those properties'
   * versions as before. But in the future, when its updateStage is 0, it knows it can take the value of figure.props.
   * hasChangedInheritableProperties literally.
   *
   * Beginning from STATE 1, suppose the scene's private width property is set to 500. The sceneDimensions does not
   * immediately update, locally or across elements. During updating, the scene's update stage is 0, so it computes
   * sceneDimensions. Seeing that an inheritable property has changed, scene.props.hasChangedInheritableProperties is
   * set to 1 and the figure's updateStage is set to 0. In turn, when updating, the figure sees that the scene's
   * hasChangedInheritableProperties has changed, so it checks its version of sceneDimensions versus the scene's version.
   * Finding the former is less, it copies the new version and new value of sceneDimensions, then sets figure.props.
   * hasChangedInheritableProperties to 1, and sets function's updateStage to 0.
   *
   * Beginning from STATE 1, suppose the scene deletes sceneDimensions, setting its value to undefined.
   * This operation sets the hasChangedInheritableProperties to 2 and all the children's update stages to 0. 2 means that
   * the actual types of inherited properties have changed. In this case, the child has to both inherit changed properties
   * AND delete the properties which it had inherited. The operation is similar; it sets its value to undefined and
   * inherit to 0, and its hasChangedInheritableProperties to 2. Other operations which set it to "2" are adding an
   * inheritable property and setting the inheritance of a property back to 0.
   *
   * Alongside the value of a property, there may or may not be a user-intended value and a program value. For some
   * parameters for which preprocessing is necessary, the user-intended value is the value that is actually changed when
   * .set() is called. Consider a pen, for instance. If the user does set("pen", "blue"), then the expected result should
   * be a blue line. Simple enough. But the pen used is not actually the string "blue"; it is an object of the form
   * {color, thickness, ...}. Thus, the user-intended value of pen is "blue", and the actual value of pen is the pen
   * object. The program value is a value indicating an "internal set". For example, a label may be a child of a certain
   * element, which sets the child's position to (50, 20). In this case, the program value is (50, 20) and the value is
   * (50, 20). We indicate these values by using bitsets for the changed and hasChangedProperties values, where bit 0
   * is the actual value, bit 1 is the user value, bit 2 is the program value, and the remaining bits are reserved for
   * other values if ever needed.
   */

  class Props {
    constructor() {
      /**
       * A key-object dictionary containing the values. The keys are the property names and the objects are of the form
       * { value, changed, ... some other metadata for the given property ... }.
       * @type {any}
       */
      this.store = new Map(); // Just for fun... not sure if I'll keep this. Makes programming a bit less painful

      this.proxy = new Proxy(this, proxyHandlers); // Stores whether any property has changed as a bitmask

      this.hasChangedProperties = 0; // 0 when no inheritable properties have changed, 1 when an inheritable property has changed since the last time
      // the scene was fully updated, and 2 when the actual list of inheritable properties has changed (different
      // signature of inheritance, if you will).

      this.hasChangedInheritableProperties = 0;
    }

    static toBit(as) {
      switch (as) {
        case 'program':
          return 2;

        case 'user':
          return 1;

        case 'real':
        case 'default':
          return 0;
      }
    } // Access functions, in case we want to switch to Object.create(null)


    getPropertyStore(propName) {
      return this.store.get(propName);
    }

    setPropertyStore(propName, value) {
      this.store.set(propName, value);
    }
    /**
     * Create a property store for a given prop, returning the store. It returns the already-existing store, if appropriate.
     * @param propName {string}
     * @returns {{}} Property store associated with the given property name
     */


    createPropertyStore(propName) {
      let existing = this.getPropertyStore(propName);

      if (!existing) {
        existing = {
          value: undefined,
          changed: false
        };
        this.setPropertyStore(propName, existing);
      }

      return existing;
    }
    /**
     * Deletes a property store wholesale, not trying to account for changed values and the like.
     * @param propName
     */


    deletePropertyStore(propName) {
      this.store.delete(propName);
    }

    forEachStore(callback) {
      for (let value of this.store.values()) {
        callback(value);
      }
    }

    forEachProperty(callback) {
      for (let [key, value] of this.store.entries()) {
        callback(key, value);
      }
    }
    /**
     * Get a list of all properties, including ones which are undefined but have a store
     * @returns {string[]}
     */


    listProperties() {
      return Array.from(this.store.keys());
    }
    /**
     * Returns whether a property has changed, locally speaking.
     * @param propName {string}
     * @returns {boolean}
     */


    hasChanged(propName) {
      var _this$getPropertyStor;

      return !!((_this$getPropertyStor = this.getPropertyStore(propName)) === null || _this$getPropertyStor === void 0 ? void 0 : _this$getPropertyStor.changed);
    }
    /**
     * Returns whether any property of a list of properties has changed, locally speaking.
     * @param propList {string[]}
     * @returns {boolean}
     */


    haveChanged(propList) {
      return this.hasChangedProperties && propList.some(prop => this.hasChanged(prop));
    }
    /**
     * Returns whether a given property is inheritable (i.e., an inherit of 1 or 2).
     * @param propName {string}
     * @returns {boolean}
     */


    isPropertyInheritable(propName) {
      var _this$getPropertyStor2;

      return !!((_this$getPropertyStor2 = this.getPropertyStore(propName)) === null || _this$getPropertyStor2 === void 0 ? void 0 : _this$getPropertyStor2.inherit);
    }
    /**
     * Returns a list of properties which have changed, locally speaking.
     * @returns {string[]}
     */


    listChangedProperties() {
      return this.listProperties().filter(prop => this.hasChanged(prop));
    }
    /**
     * Returns a list of properties which can be inherited (i.e., an inherit of 1 or 2).
     * @returns {string[]}
     */


    listInheritableProperties() {
      return this.listProperties().filter(prop => this.isPropertyInheritable(prop));
    }
    /**
     * Inherit all inheritable properties from a given props. The function does this by comparing the local inherited
     * prop's version to the given props's version. If the local version is lower, the property and version are copied,
     * and the changed status is set to true. If updateAll is set to true, the function makes sure to check that the
     * actual list of inherited properties is synchronized, because it normally only checks the local inheritable
     * properties and compares them. In fact, it only checks the local inheritable properties with inherit: 1, since that
     * indicates it came from a parent rather than being defined in the current element.
     * @param props {Props}
     * @param updateAll {boolean} Whether to force a complete update, in which the inheritable properties are verifiably
     * synced with the top element's properties. This usually happens after an element is added to a group, or after a
     * group's inheritance signature has changed.
     */


    inheritPropertiesFrom(props, updateAll = false) {
      // Early exit condition, where if no inheritable properties have changed, we need not do anything
      if (!(updateAll || props.hasChangedInheritableProperties)) return;
      updateAll = updateAll || props.hasChangedInheritableProperties === 2; // We recalculate all local properties whose inheritance is 1, indicating they were inherited from above. Properties
      // not found above are deleted, properties found above are copied if their version is greater than or equal to the
      // version of the current property. This ensures that this props does not have any extraneous properties or any
      // incorrect/nonupdated values.

      for (const [propName, propStore] of this.store.entries()) {
        if (propStore.inherit !== 1) continue;
        const otherPropsStore = props.getPropertyStore(propName); // if no such inheritable property, *delete* the local property (do not keep it as inheritable)

        if (!otherPropsStore || otherPropsStore.inherit < 1 || otherPropsStore.value === undefined) {
          propStore.value = undefined;
          propStore.changed |= 0b1;
          propStore.inherit = 0;
          this.changed |= 0b1;
          this.markHasChangedInheritableProperties();
        } // Value has been changed!


        if (otherPropsStore.version > propStore.version) {
          propStore.version = otherPropsStore.version;
          propStore.value = otherPropsStore.value;
          propStore.changed |= 0b1;
          this.changed |= 0b1;
          this.markHasChangedInheritableProperties();
        }
      } // If updateAll is true, we run through all the given properties and inherit all 1s and 2s.


      if (updateAll) {
        for (const [propName, propStore] of props.store.entries()) {
          if (!propStore.inherit || propStore.value === undefined) continue;
          let ourPropStore = this.getPropertyStore(propName); // Where things are actually inherited!!

          if (!ourPropStore || ourPropStore.inherit === 1 && propStore.version > ourPropStore.version) {
            if (!ourPropStore) {
              ourPropStore = this.createPropertyStore(propName); // Goes around set

              ourPropStore.inherit = 1;
              ourPropStore.value = propStore.value;
              this.markHasChangedInheritanceSignature();
            }

            ourPropStore.version = propStore.version;
            ourPropStore.value = propStore.value;
            ourPropStore.changed |= 0b1;
            this.markHasChangedProperties();
          }
        }
      }
    }
    /**
     * This function sets the value of a property. It is meant mostly for internal use. If prompted, it will check to see
     * whether the value given and the current value are strictly equal, or deeply equal, and if so, not mark the property
     * as changed. By default, this check is turned off, meaning all value assignments are marked as "changed". The third
     * parameter indicates whether the value should be directly modified, or
     * @param propName {string} The name of the property
     * @param value {any} The value of the property
     * @param as {number} Which value to change. 0 if real, 1 if user, 2 if program
     * @param equalityCheck {number} What type of equality check to perform against the current value, if any, to assess
     * the changed value. 0 - no check, 1 - strict equals, 2 - deep equals
     * @param markChanged {boolean} Whether to actually mark the value as changed. In turn, if the property is a changed
     * inheritable property, that will be noted
     * @returns {any}
     */


    set(propName, value, as = 0, equalityCheck = 0, markChanged = true) {
      let store = this.getPropertyStore(propName); // Helper functions to abstract away the "user/program/real" concept

      function getStoreValue() {
        switch (as) {
          case 0:
            return store.value;

          case 1:
            return store.userValue;

          case 2:
            return store.programValue;
        }
      }

      function setStoreValue(v) {
        switch (as) {
          case 0:
            store.value = v;
            break;

          case 1:
            store.userValue = v;
            break;

          case 2:
            store.programValue = v;
            break;
        }
      }

      if (value === undefined) {
        // Special case of deletion. If the property exists, we set its value to undefined, and if that property is
        // defined to be inheritable, we set this.hasChangedInheritableProperties to 2. Note that an inheritED property
        // cannot be deleted, as that would be inconsistent. It can only be overridden.
        // trivial case, don't do anything
        if (!store || getStoreValue() === undefined) return value;

        if (store.inherit === 1) {
          // If the store has an inheritance value of 1, we don't do anything
          return value;
        } else if (store.inherit === 2) {
          // If the property has inheritance 2, we keep it as undefined and notify that the signature of inheritable properties has
          // changed.
          setStoreValue(undefined); // If setting the real value, need to change the version

          if (as === 0) {
            store.version = getVersionID();
            if (markChanged) this.markHasChangedInheritanceSignature();
          }
        } else {
          // Set its value to undefined
          setStoreValue(undefined);
        }

        if (markChanged) {
          // Mark which bit has changed
          store.changed |= 1 << as;
          this.hasChangedProperties |= 1 << as;
        }

        return undefined;
      } // Otherwise, we need to get a property store


      if (!store) store = this.createPropertyStore(propName); // We reject assignments to an inherited property. This can be overridden by setting the property's inheritance
      // status.

      if (store.inherit === 1) return value;

      if (equalityCheck !== 0) {
        let storeValue = getStoreValue(); // Perform various equality checks

        if (equalityCheck === 1 && storeValue === value) return value;else if (equalityCheck === 2 && deepEquals(storeValue, value)) return value;
      } // Set the value and changed values


      setStoreValue(value);

      if (markChanged) {
        store.changed |= 1 << as;
        this.hasChangedProperties |= 1 << as; // For values to be inherited, store the version of this value. Only for inherit: 2 properties

        if (store.inherit === 2 && as === 0) {
          store.version = getVersionID();
          this.markHasChangedInheritableProperties();
        }
      }

      return value;
    }

    setProperties(values, equalityCheck = 0, markChanged = true) {
      for (const [propName, propValue] of Object.entries(values)) {
        this.set(propName, propValue, equalityCheck, markChanged);
      }

      return this;
    }

    markHasChangedProperties() {
      this.hasChangedProperties = true;
    }

    markHasChangedInheritableProperties() {
      this.hasChangedInheritableProperties = Math.max(this.hasChangedInheritableProperties, 1);
    }

    markHasChangedInheritanceSignature() {
      this.hasChangedInheritableProperties = 2;
    }

    configureProperty(propName, opts = {}) {
      const store = this.getPropertyStore(propName);

      if (opts.inherit !== undefined) {
        this.setPropertyInheritance(propName, opts.inherit);
      }
    }

    configureProperties(propNames, opts = {}) {
      for (const propName of propNames) this.configureProperty(propName, opts);
    }
    /**
     * Set a property's inheritance to 2 (if inherit is true) or 0
     * @param propName {string}
     * @param inherit {boolean}
     * @return {Props}
     */


    setPropertyInheritance(propName, inherit = false) {
      const store = this.createPropertyStore(propName);
      let currentInheritance = !!store.inherit;
      if (currentInheritance === !!inherit) return this;

      if (inherit) {
        store.version = getVersionID();
        store.inherit = 2;
      } else {
        delete store.version;
        delete store.inherit;
      }

      if (store.value !== undefined) this.hasChangedInheritableProperties = 2;
      return this;
    }
    /**
     * Get the value of a property.
     * @param propName {string}
     * @param as {number} 0 if getting the real value, 1 if getting the user value, 2 if getting the program value
     * @returns {*}
     */


    get(propName, as = 0) {
      let store = this.getPropertyStore(propName);
      if (!store) return undefined;

      switch (as) {
        case 0:
          return store.value;

        case 1:
          return store.userValue;

        case 2:
          return store.programValue;
      }
    }

    getUserValue(propName) {
      return this.get(propName, 1);
    }

    getProgramValue(propName) {
      return this.get(propName, 2);
    }
    /**
     * Get the values of a list of properties.
     * @param propNameList {string[]}
     * @returns {*}
     */


    getProperties(propNameList) {
      return propNameList.map(propName => this.get(propName));
    }
    /**
     * Mark all properties as locally updated (changed = false).
     */


    markAllUpdated(bitmask = 0b111) {
      bitmask = ~bitmask;
      this.hasChangedProperties &= bitmask;
      this.forEachStore(store => {
        store.changed &= bitmask;
      });
    }
    /**
     * Mark a specific property as locally updated (changed = false).
     * @param propName {string}
     */


    markPropertyUpdated(propName) {
      const store = this.getPropertyStore(propName);
      if (store) store.changed = 0;
    }
    /**
     * Mark a given property as changed.
     * @param propName {string}
     */


    markChanged(propName) {
      let store = this.getPropertyStore(propName);
      store.changed |= 0b1;
      this.hasChangedProperties |= 0b1; // If the store is inheritable, we need to generate a version ID

      if (store.inherit) {
        store.version = getVersionID();
        this.markHasChangedInheritableProperties();
      }
    }
    /**
     * Mark that no more inheritance is necessary. This function should only be called by the scene
     */


    markGlobalUpdateComplete() {
      if (this.hasChangedProperties) this.markAllUpdated();
      this.hasChangedInheritableProperties = 0;
    }

    stringify() {
      const obj = {};

      for (const [propName, propStore] of this.store) {
        obj[propName] = propStore;
      }

      console.log(JSON.stringify(obj, null, 4));
    }

  }

  // Principles: Some things in Grapheme have styling information that may be shared or may be composed from other bits of
  // Could use a library, but... good experience for me too

  class Color {
    constructor({
      r = 0,
      g = 0,
      b = 0,
      a = 255
    } = {}) {
      this.r = r;
      this.g = g;
      this.b = b;
      this.a = a;
    }

    rounded() {
      return {
        r: Math.round(this.r),
        g: Math.round(this.g),
        b: Math.round(this.b),
        a: Math.round(this.a)
      };
    }

    toJSON() {
      return {
        r: this.r,
        g: this.g,
        b: this.b,
        a: this.a
      };
    }

    hex() {
      const rnd = this.rounded();
      return "#".concat([rnd.r, rnd.g, rnd.b, rnd.a].map(x => leftZeroPad(x.toString(16), 2)).join(''));
    }

    glColor() {
      return {
        r: this.r / 255,
        g: this.g / 255,
        b: this.b / 255,
        a: this.a / 255
      };
    }

    toNumber() {
      return this.r * 0x1000000 + this.g * 0x10000 + this.b * 0x100 + this.a;
    }

    clone() {
      return new Color(this);
    }

    static rgb(r, g, b) {
      return new Color({
        r,
        g,
        b
      });
    }

    static rgba(r, g, b, a = 255) {
      return new Color({
        r,
        g,
        b,
        a
      });
    }

    static hsl(h, s, l) {
      return new Color(hslToRgb(h, s, l));
    }

    static hsla(h, s, l, a) {
      let color = Color.hsl(h, s, l);
      color.a = 255 * a;
      return color;
    }

    static fromHex(string) {
      return new Color(hexToRgb(string));
    }

    static fromCss(cssColorString) {
      function throwBadColor() {
        throw new Error('Unrecognized colour ' + cssColorString);
      }

      cssColorString = cssColorString.toLowerCase().replace(/\s+/g, '');

      if (cssColorString.startsWith('#')) {
        return Color.fromHex(cssColorString);
      }

      let argsMatch = /\((.+)\)/g.exec(cssColorString);

      if (!argsMatch) {
        let color = Colors[cssColorString.toUpperCase()];
        return color ? color : throwBadColor();
      }

      let args = argsMatch[1].split(',').map(parseFloat);

      if (cssColorString.startsWith('rgb')) {
        return Color.rgb(...args.map(s => s * 255));
      } else if (cssColorString.startsWith('rgba')) {
        return Color.rgba(...args.map(s => s * 255));
      } else if (cssColorString.startsWith('hsl')) {
        return Color.hsl(...args);
      } else if (cssColorString.startsWith('hsla')) {
        return Color.hsla(...args);
      }

      throwBadColor();
    }

    static fromObj(obj) {
      if (typeof obj === 'string') {
        return Color.fromCss(obj);
      }

      return new Color(obj);
    }

  } // Credit to https://stackoverflow.com/a/11508164/13458117


  function hexToRgb(hex) {
    let bigint = parseInt(hex.replace('#', ''), 16);
    let r = bigint >> 16 & 255;
    let g = bigint >> 8 & 255;
    let b = bigint & 255;
    return {
      r,
      g,
      b
    };
  }

  function hue2rgb(p, q, t) {
    if (t < 0) t += 1;
    if (t > 1) t -= 1;
    if (t < 1 / 6) return p + (q - p) * 6 * t;
    if (t < 1 / 2) return q;
    if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
    return p;
  } // Credit to https://stackoverflow.com/a/9493060/13458117


  function hslToRgb(h, s, l) {
    var r, g, b;

    if (s === 0) {
      r = g = b = l; // achromatic
    } else {
      var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
      var p = 2 * l - q;
      r = hue2rgb(p, q, h + 1 / 3);
      g = hue2rgb(p, q, h);
      b = hue2rgb(p, q, h - 1 / 3);
    }

    return {
      r: 255 * r,
      g: 255 * g,
      b: 255 * b
    };
  }

  const rgb = Color.rgb;
  const Colors = {
    get LIGHTSALMON() {
      return rgb(255, 160, 122);
    },

    get SALMON() {
      return rgb(250, 128, 114);
    },

    get DARKSALMON() {
      return rgb(233, 150, 122);
    },

    get LIGHTCORAL() {
      return rgb(240, 128, 128);
    },

    get INDIANRED() {
      return rgb(205, 92, 92);
    },

    get CRIMSON() {
      return rgb(220, 20, 60);
    },

    get FIREBRICK() {
      return rgb(178, 34, 34);
    },

    get RED() {
      return rgb(255, 0, 0);
    },

    get DARKRED() {
      return rgb(139, 0, 0);
    },

    get CORAL() {
      return rgb(255, 127, 80);
    },

    get TOMATO() {
      return rgb(255, 99, 71);
    },

    get ORANGERED() {
      return rgb(255, 69, 0);
    },

    get GOLD() {
      return rgb(255, 215, 0);
    },

    get ORANGE() {
      return rgb(255, 165, 0);
    },

    get DARKORANGE() {
      return rgb(255, 140, 0);
    },

    get LIGHTYELLOW() {
      return rgb(255, 255, 224);
    },

    get LEMONCHIFFON() {
      return rgb(255, 250, 205);
    },

    get LIGHTGOLDENRODYELLOW() {
      return rgb(250, 250, 210);
    },

    get PAPAYAWHIP() {
      return rgb(255, 239, 213);
    },

    get MOCCASIN() {
      return rgb(255, 228, 181);
    },

    get PEACHPUFF() {
      return rgb(255, 218, 185);
    },

    get PALEGOLDENROD() {
      return rgb(238, 232, 170);
    },

    get KHAKI() {
      return rgb(240, 230, 140);
    },

    get DARKKHAKI() {
      return rgb(189, 183, 107);
    },

    get YELLOW() {
      return rgb(255, 255, 0);
    },

    get LAWNGREEN() {
      return rgb(124, 252, 0);
    },

    get CHARTREUSE() {
      return rgb(127, 255, 0);
    },

    get LIMEGREEN() {
      return rgb(50, 205, 50);
    },

    get LIME() {
      return rgb(0, 255, 0);
    },

    get FORESTGREEN() {
      return rgb(34, 139, 34);
    },

    get GREEN() {
      return rgb(0, 128, 0);
    },

    get DARKGREEN() {
      return rgb(0, 100, 0);
    },

    get GREENYELLOW() {
      return rgb(173, 255, 47);
    },

    get YELLOWGREEN() {
      return rgb(154, 205, 50);
    },

    get SPRINGGREEN() {
      return rgb(0, 255, 127);
    },

    get MEDIUMSPRINGGREEN() {
      return rgb(0, 250, 154);
    },

    get LIGHTGREEN() {
      return rgb(144, 238, 144);
    },

    get PALEGREEN() {
      return rgb(152, 251, 152);
    },

    get DARKSEAGREEN() {
      return rgb(143, 188, 143);
    },

    get MEDIUMSEAGREEN() {
      return rgb(60, 179, 113);
    },

    get SEAGREEN() {
      return rgb(46, 139, 87);
    },

    get OLIVE() {
      return rgb(128, 128, 0);
    },

    get DARKOLIVEGREEN() {
      return rgb(85, 107, 47);
    },

    get OLIVEDRAB() {
      return rgb(107, 142, 35);
    },

    get LIGHTCYAN() {
      return rgb(224, 255, 255);
    },

    get CYAN() {
      return rgb(0, 255, 255);
    },

    get AQUA() {
      return rgb(0, 255, 255);
    },

    get AQUAMARINE() {
      return rgb(127, 255, 212);
    },

    get MEDIUMAQUAMARINE() {
      return rgb(102, 205, 170);
    },

    get PALETURQUOISE() {
      return rgb(175, 238, 238);
    },

    get TURQUOISE() {
      return rgb(64, 224, 208);
    },

    get MEDIUMTURQUOISE() {
      return rgb(72, 209, 204);
    },

    get DARKTURQUOISE() {
      return rgb(0, 206, 209);
    },

    get LIGHTSEAGREEN() {
      return rgb(32, 178, 170);
    },

    get CADETBLUE() {
      return rgb(95, 158, 160);
    },

    get DARKCYAN() {
      return rgb(0, 139, 139);
    },

    get TEAL() {
      return rgb(0, 128, 128);
    },

    get POWDERBLUE() {
      return rgb(176, 224, 230);
    },

    get LIGHTBLUE() {
      return rgb(173, 216, 230);
    },

    get LIGHTSKYBLUE() {
      return rgb(135, 206, 250);
    },

    get SKYBLUE() {
      return rgb(135, 206, 235);
    },

    get DEEPSKYBLUE() {
      return rgb(0, 191, 255);
    },

    get LIGHTSTEELBLUE() {
      return rgb(176, 196, 222);
    },

    get DODGERBLUE() {
      return rgb(30, 144, 255);
    },

    get CORNFLOWERBLUE() {
      return rgb(100, 149, 237);
    },

    get STEELBLUE() {
      return rgb(70, 130, 180);
    },

    get ROYALBLUE() {
      return rgb(65, 105, 225);
    },

    get BLUE() {
      return rgb(0, 0, 255);
    },

    get MEDIUMBLUE() {
      return rgb(0, 0, 205);
    },

    get DARKBLUE() {
      return rgb(0, 0, 139);
    },

    get NAVY() {
      return rgb(0, 0, 128);
    },

    get MIDNIGHTBLUE() {
      return rgb(25, 25, 112);
    },

    get MEDIUMSLATEBLUE() {
      return rgb(123, 104, 238);
    },

    get SLATEBLUE() {
      return rgb(106, 90, 205);
    },

    get DARKSLATEBLUE() {
      return rgb(72, 61, 139);
    },

    get LAVENDER() {
      return rgb(230, 230, 250);
    },

    get THISTLE() {
      return rgb(216, 191, 216);
    },

    get PLUM() {
      return rgb(221, 160, 221);
    },

    get VIOLET() {
      return rgb(238, 130, 238);
    },

    get ORCHID() {
      return rgb(218, 112, 214);
    },

    get FUCHSIA() {
      return rgb(255, 0, 255);
    },

    get MAGENTA() {
      return rgb(255, 0, 255);
    },

    get MEDIUMORCHID() {
      return rgb(186, 85, 211);
    },

    get MEDIUMPURPLE() {
      return rgb(147, 112, 219);
    },

    get BLUEVIOLET() {
      return rgb(138, 43, 226);
    },

    get DARKVIOLET() {
      return rgb(148, 0, 211);
    },

    get DARKORCHID() {
      return rgb(153, 50, 204);
    },

    get DARKMAGENTA() {
      return rgb(139, 0, 139);
    },

    get PURPLE() {
      return rgb(128, 0, 128);
    },

    get INDIGO() {
      return rgb(75, 0, 130);
    },

    get PINK() {
      return rgb(255, 192, 203);
    },

    get LIGHTPINK() {
      return rgb(255, 182, 193);
    },

    get HOTPINK() {
      return rgb(255, 105, 180);
    },

    get DEEPPINK() {
      return rgb(255, 20, 147);
    },

    get PALEVIOLETRED() {
      return rgb(219, 112, 147);
    },

    get MEDIUMVIOLETRED() {
      return rgb(199, 21, 133);
    },

    get WHITE() {
      return rgb(255, 255, 255);
    },

    get SNOW() {
      return rgb(255, 250, 250);
    },

    get HONEYDEW() {
      return rgb(240, 255, 240);
    },

    get MINTCREAM() {
      return rgb(245, 255, 250);
    },

    get AZURE() {
      return rgb(240, 255, 255);
    },

    get ALICEBLUE() {
      return rgb(240, 248, 255);
    },

    get GHOSTWHITE() {
      return rgb(248, 248, 255);
    },

    get WHITESMOKE() {
      return rgb(245, 245, 245);
    },

    get SEASHELL() {
      return rgb(255, 245, 238);
    },

    get BEIGE() {
      return rgb(245, 245, 220);
    },

    get OLDLACE() {
      return rgb(253, 245, 230);
    },

    get FLORALWHITE() {
      return rgb(255, 250, 240);
    },

    get IVORY() {
      return rgb(255, 255, 240);
    },

    get ANTIQUEWHITE() {
      return rgb(250, 235, 215);
    },

    get LINEN() {
      return rgb(250, 240, 230);
    },

    get LAVENDERBLUSH() {
      return rgb(255, 240, 245);
    },

    get MISTYROSE() {
      return rgb(255, 228, 225);
    },

    get GAINSBORO() {
      return rgb(220, 220, 220);
    },

    get LIGHTGRAY() {
      return rgb(211, 211, 211);
    },

    get SILVER() {
      return rgb(192, 192, 192);
    },

    get DARKGRAY() {
      return rgb(169, 169, 169);
    },

    get GRAY() {
      return rgb(128, 128, 128);
    },

    get DIMGRAY() {
      return rgb(105, 105, 105);
    },

    get LIGHTSLATEGRAY() {
      return rgb(119, 136, 153);
    },

    get SLATEGRAY() {
      return rgb(112, 128, 144);
    },

    get DARKSLATEGRAY() {
      return rgb(47, 79, 79);
    },

    get BLACK() {
      return rgb(0, 0, 0);
    },

    get CORNSILK() {
      return rgb(255, 248, 220);
    },

    get BLANCHEDALMOND() {
      return rgb(255, 235, 205);
    },

    get BISQUE() {
      return rgb(255, 228, 196);
    },

    get NAVAJOWHITE() {
      return rgb(255, 222, 173);
    },

    get WHEAT() {
      return rgb(245, 222, 179);
    },

    get BURLYWOOD() {
      return rgb(222, 184, 135);
    },

    get TAN() {
      return rgb(210, 180, 140);
    },

    get ROSYBROWN() {
      return rgb(188, 143, 143);
    },

    get SANDYBROWN() {
      return rgb(244, 164, 96);
    },

    get GOLDENROD() {
      return rgb(218, 165, 32);
    },

    get PERU() {
      return rgb(205, 133, 63);
    },

    get CHOCOLATE() {
      return rgb(210, 105, 30);
    },

    get SADDLEBROWN() {
      return rgb(139, 69, 19);
    },

    get SIENNA() {
      return rgb(160, 82, 45);
    },

    get BROWN() {
      return rgb(165, 42, 42);
    },

    get MAROON() {
      return rgb(128, 0, 0);
    },

    get RANDOM() {
      var keys = Object.keys(Colors);
      return Colors[keys[keys.length * Math.random() << 0]];
    },

    get TRANSPARENT() {
      return new Color({
        r: 0,
        g: 0,
        b: 0,
        a: 0
      });
    }

  };
  const Pen = {
    // take a list of partial pen specifications and combine them into a complete pen by combining each and keeping only
    // the valid parameters TODO
    compose: (...args) => {
      let ret = {};

      for (let i = 0; i < args.length; ++i) {
        let arg = args[i];

        if (typeof arg === 'string') {
          arg = {
            color: Color.fromObj(arg)
          };
        }

        Object.assign(ret, arg);
      }

      ret.color = Color.fromObj(ret.color);
      return ret;
    },
    create: params => {
      return Pen.compose(Pen.default, params);
    },
    signature: {
      color: 'color',
      thickness: 'number'
    },
    default: deepFreeze({
      color: {
        r: 0,
        g: 0,
        b: 0,
        a: 255
      },
      thickness: 2,
      dashPattern: [],
      dashOffset: 0,
      endcap: 'round',
      endcapRes: 1,
      join: 'dynamic',
      joinRes: 1,
      useNative: false,
      visible: true
    }),

    fromObj(strOrObj) {
      if (typeof strOrObj === 'string') return _interpretStringAsPen(strOrObj);
      return Pen.compose(Pen.default, strOrObj);
    }

  }; // Generic dictionary of pens, like { major: Pen, minor: Pen }. Partial pen specifications may be used and they will
  // turn into fully completed pens in the final product

  const Pens = {
    compose: (...args) => {
      let ret = {}; // Basically just combine all the pens

      for (let i = 0; i < args.length; ++i) {
        for (let key in args[i]) {
          let retVal = ret[key];
          if (!retVal) ret[key] = retVal = Pen.default;
          ret[key] = Pen.compose(ret[key], args[key]);
        }
      }
    },
    create: params => {
      return Pens.compose(Pens.default, params);
    },
    default: Object.freeze({})
  };
  /**const textElementInterface = constructInterface({
    font: { setAs: "user" },
    fontSize: { setAs: "user" },
    text: true,
    align: { setAs: "user" },
    baseline: { setAs: "user" },
    color: { setAs: "user" },
    shadowRadius: { setAs: "user" },
    shadowColor: { setAs: "user" },
    position: { conversion: Vec2.fromObj }
  }, */

  const TextStyle = {
    compose: (...args) => {
      let ret = {};

      for (let i = 0; i < args.length; ++i) {
        Object.assign(ret, args[i]);
      }

      ret.color = Color.fromObj(ret.color);
      ret.shadowColor = Color.fromObj(ret.shadowColor);
      return ret;
    },
    create: params => {
      return TextStyle.compose(TextStyle.default, params);
    },
    default: deepFreeze({
      color: {
        r: 0,
        g: 0,
        b: 0,
        a: 255
      },
      shadowColor: {
        r: 255,
        g: 255,
        b: 255,
        a: 255
      },
      font: 'Cambria',
      fontSize: 12,
      shadowRadius: 0,
      align: 'left',
      baseline: 'bottom'
    })
  }; // Object of the form { x: ("dynamic"|"none"|"axis"|"outside"|"inside"|"bottom"|"top"), y: ( ..., "left"|"right") } (might change later)

  const LabelPosition = {
    compose: (...args) => {
      let ret = {};

      for (let i = 0; i < args.length; ++i) {
        let arg = args[i];

        if (typeof arg === 'string') {
          ret.x = arg;
          ret.y = arg;
        } else {
          Object.assign(ret, args[i]);
        }
      }

      return ret;
    },
    create: params => {
      return LabelPosition.compose(LabelPosition.default, params);
    },
    default: deepFreeze({
      x: 'dynamic',
      y: 'dynamic'
    })
  };
  const GenericObject = {
    compose: (...args) => {
      let ret = {};

      for (let i = 0; i < args.length; ++i) {
        Object.assign(ret, args[i]);
      }

      return ret;
    },
    create: params => {
      return GenericObject.compose(GenericObject.default, params);
    },
    default: Object.freeze({})
  };
  const BooleanDict = {
    compose: (...args) => {
      let ret = {};

      for (let i = 0; i < args.length; ++i) {
        let arg = args[i];

        if (typeof arg === 'boolean') {
          for (let key in ret) {
            ret[key] = arg;
          }
        } else Object.assign(ret, args[i]);
      }

      return ret;
    },
    create: params => {
      return GenericObject.compose(GenericObject.default, params);
    },
    default: Object.freeze({})
  };
  function lookupCompositionType(type) {
    switch (type) {
      case 'TextStyle':
        return TextStyle;

      case 'Pen':
        return Pen;

      case 'Pens':
        return Pens;

      case 'LabelPosition':
        return LabelPosition;

      case 'Object':
        return GenericObject;

      case 'BooleanDict':
        return BooleanDict;
    }
  } // Fun Asymptote Vector Graphics–like thing :) We break up str into tokens which each have some meaning TODO

  function _interpretStringAsPen(str) {
    try {
      let color = Color.fromCss(str);
      return Pen.fromObj({
        color
      });
    } catch (_unused) {
      return Pen.default;
    }
  }

  const DefaultStyles = {
    gridlinesMajor: Pen.create({
      thickness: 2,
      color: Color.rgba(0, 0, 0, 127),
      endcap: 'butt'
    }),
    gridlinesMinor: Pen.create({
      thickness: 1,
      color: Color.rgba(0, 0, 0, 80),
      endcap: 'butt'
    }),
    gridlinesAxis: Pen.create({
      thickness: 4,
      endcap: 'butt'
    }),
    plotLabelPositions: LabelPosition.default,
    Pen: Pen.default,
    label: TextStyle.create({
      fontSize: 16,
      shadowRadius: 2
    })
  };

  // Defines an interface between a user-facing getter/setter and the internal properties of an element. There is not a
  /**
   * Print object to string in a way that isn't too painful (limit the length of the string to 100 chars or so)
   * @param obj
   * @param limit {number} (Estimated) number of characters to restrict the display to
   */

  function relaxedPrint(obj, limit = 100) {
    if (typeof obj === 'number' || typeof obj === 'boolean') {
      return '' + obj;
    } else if (typeof obj === 'function') {
      let name = obj.name;
      let ret = name ? '[function ' + name : '[function]';
      if (ret.length > limit) return '...';
      return ret;
    } else if (typeof obj === 'object') {
      let keys = Object.keys(obj).slice(0, 3);

      if (keys.length === 0) {
        return '{}';
      }

      let keysUsed = 0;
      let keyValues = [];
      let totalLen = 5;

      for (let key of keys) {
        let n = obj[key];
        let pp = relaxedPrint(n, limit - totalLen - 4);
        totalLen += pp.length + 4;
        if (totalLen > limit) break;
        keyValues.push(pp);
        keysUsed++;
      }

      if (keysUsed === 0) {
        return '{ ... }';
      } else {
        let ret = '{ ';

        for (let i = 0; i < keysUsed; ++i) {
          ret += keys[i];
          ret += ': ';
          ret += keyValues[i];
          if (i !== keysUsed - 1) ret += ', ';
        }

        return ret + ' }';
      }
    } else if (typeof obj === 'string') {
      if (obj.length <= limit - 2) return "\"".concat(obj, "\"");
      let len = Math.max((limit / 2 | 0) - 4, 0);
      return '"' + obj.slice(0, len) + ' ... ' + obj.slice(obj.length - len) + '"';
    }
  }

  function genTypecheckRangedInteger(lo, hi) {
    if (lo === undefined) {
      return obj => !Number.isInteger(obj) || obj > hi ? "Expected $p to be an integer less than ".concat(hi, "; got $v.") : undefined;
    } else if (hi === undefined) {
      return obj => !Number.isInteger(obj) || obj < lo ? "Expected $p to be an integer greater than ".concat(lo, "; got $v.") : undefined;
    } else {
      return obj => !Number.isInteger(obj) || obj < lo || obj > hi ? "Expected $p to be an integer in the range [".concat(lo, ", ").concat(hi, "], inclusive; got $v.") : undefined;
    }
  }

  function typecheckInteger(obj) {
    if (!Number.isInteger(obj)) return 'Expected $p to be an integer, not $v.';
  }

  function genTypecheckRangedNumber(lo, hi, finite) {
    let finiteMsg = finite ? 'finite ' : '';

    if (lo === undefined) {
      return obj => typeof obj !== 'number' || obj > hi || finite && !Number.isFinite(obj) ? "Expected $p to be a ".concat(finiteMsg, "number less than ").concat(hi, ", got $v.") : undefined;
    } else if (hi === undefined) {
      return obj => typeof obj !== 'number' || obj < lo ? "Expected $p to be a ".concat(finiteMsg, "number greater than ").concat(lo, ", got $v.") : undefined;
    } else {
      return obj => typeof obj !== 'number' || obj < lo || obj > hi ? "Expected $p to be a ".concat(finiteMsg, "number in the range [").concat(lo, ", ").concat(hi, "], inclusive; got $v.") : undefined;
    }
  }

  function typecheckNumber(obj) {
    if (typeof obj !== 'number') return 'Expected $p to be a number, got $v.';
  }

  function typecheckFiniteNumber(obj) {
    if (typeof obj !== 'number' || !Number.isFinite(obj)) return 'Expected $p to be a finite number, got $v.';
  }

  function createIntegerTypecheck(check) {
    let min = check.min;
    let max = check.max;

    if (min === undefined && max === undefined) {
      return typecheckInteger;
    } else {
      return genTypecheckRangedInteger(min, max);
    }
  }

  function createNumberTypecheck(check) {
    let min = check.min;
    let max = check.max;
    let finite = check.finite;

    if (min === undefined && max === undefined) {
      if (finite) {
        return typecheckFiniteNumber;
      } else {
        return typecheckNumber;
      }
    } else {
      return genTypecheckRangedNumber(min, max, finite);
    }
  }

  function booleanTypecheck(obj) {
    return typeof obj !== 'boolean' ? 'Expected $p to be a boolean, got $v.' : undefined;
  }

  function stringTypecheck(obj) {
    return typeof obj !== 'string' ? 'Expected $p to be a string, got $v.' : undefined;
  }

  function variableNameTypecheck(obj) {
    return !isValidVariableName(obj) ? 'Expected $p to be a valid variable name, got $v. Variable ' : undefined;
  }

  function createTypecheck(check) {
    if (typeof check === 'string') check = {
      type: check
    };
    let type = check.type;

    switch (type) {
      case 'integer':
        return createIntegerTypecheck(check);

      case 'number':
        return createNumberTypecheck(check);

      case 'boolean':
        return booleanTypecheck;

      case 'string':
        return stringTypecheck;

      case 'VariableName':
        return variableNameTypecheck;

      default:
        throw new Error("Unrecognized typecheck type ".concat(type, "."));
    }
  }

  let CONVERSION_MSG;

  function colorConversion(obj) {
    obj = Color.fromObj(obj);
    if (obj) return obj;
    CONVERSION_MSG = "Expected $p to be convertible to a Color, got $v.";
  }

  function vec2Conversion(obj) {
    let x = 0,
        y = 0;

    if (typeof obj === 'number' || typeof obj === 'string') {
      CONVERSION_MSG = 'Expected $p to be convertible to a Vec2, got $v.';
    } else if (typeof obj === 'object') {
      if (Array.isArray(obj)) {
        if (obj.length !== 2) {
          CONVERSION_MSG = "Expected $p to be convertible to a Vec2, got $v (length ".concat(obj.length, ").");
        } else {
          x = obj[0];
          y = obj[1];
        }
      } else {
        var _obj$x, _obj$y;

        x = (_obj$x = obj.x) !== null && _obj$x !== void 0 ? _obj$x : obj.re;
        y = (_obj$y = obj.y) !== null && _obj$y !== void 0 ? _obj$y : obj.im;
      }
    }

    return new Vec2(x, y);
  }

  function vec2NonFlatArrayConversion(arr, f32 = true) {
    let ret = new (f32 ? Float32Array : Float64Array)(arr.length * 2);
    let retIndex = -1;

    for (let i = 0; i < arr.length; ++i) {
      let elem = arr[i];

      if (elem.x) {
        ret[++retIndex] = elem.x;
        ret[++retIndex] = elem.y;
      } else if (Array.isArray(elem)) {
        if (elem.length !== 2) {
          CONVERSION_MSG = "Expected $p to be convertible to a flat array of Vec2s, found element ".concat(relaxedPrint(elem), " at index ").concat(i);
          return;
        }

        ret[++retIndex] = elem[0];
        ret[++retIndex] = elem[1];
      } else {
        CONVERSION_MSG = "Expected $p to be convertible to a flat array of Vec2s, found element ".concat(relaxedPrint(elem), " at index ").concat(i);
        return;
      }
    }

    return ret;
  }

  function vec2ArrayConversion(obj, f32 = true) {
    if (Array.isArray(obj)) {
      for (let i = 0; i < obj.length; ++i) {
        if (typeof obj[i] !== 'number') {
          return vec2NonFlatArrayConversion(obj);
        }
      } // Obj is just an array of numbers


      if (obj.length & 1) {
        CONVERSION_MSG = "Expected $p to be convertible to a flat array of Vec2s, got numeric array of odd length ".concat(obj.length, ".");
        return;
      }

      return new (f32 ? Float32Array : Float64Array)(obj);
    } else if (isTypedArray(obj)) {
      if (obj.length & 1) {
        CONVERSION_MSG = "Expected $p to be convertible to a flat array of Vec2s, got typed array of odd length ".concat(obj.length, ".");
        return;
      }

      if (f32 && obj instanceof Float32Array) return obj;
      if (!f32 && obj instanceof Float64Array) return obj;
      return new (f32 ? Float32Array : Float64Array)(obj);
    }
  }
  /**
   * Return a function which, when evaluated, either sets CONVERSION_MSG to a message indicating why the conversion is
   * impossible and returns nothing or returns a converted result.
   * @param conversion
   */


  function createConversion(conversion) {
    if (typeof conversion === 'string') conversion = {
      type: conversion
    };else if (typeof conversion === 'function') return conversion;
    let type = conversion.type;

    switch (type) {
      case 'Color':
        return colorConversion;

      case 'Vec2':
        return vec2Conversion;

      case 'f32_vec2_array':
        return vec2ArrayConversion;

      default:
        throw new Error("Unknown conversion type ".concat(type, "."));
    }
  }

  function constructInterface(description) {
    const interfaceDesc = description.interface;
    const internal = description.internal; //if (!interfaceDesc) throw new Error("Interface description lacks an interface")
    //if (!internal) throw new Error("Interface description lacks an internal description")
    // Instructions on how to get and set properties, respectively

    const setters = {};
    const getters = {};

    function handleProp(name, desc) {
      let needsSetter = !desc.readOnly;
      let needsGetter = !desc.writeOnly;
      if (!needsSetter && !needsGetter) return;

      if (needsSetter) {
        var _ref;

        let setter = {};
        let {
          typecheck,
          target,
          setTarget,
          setAs,
          conversion,
          aliases,
          merge
        } = desc;
        setAs = Props.toBit(setAs);
        if (typecheck) setter.typecheck = createTypecheck(typecheck);
        if (conversion) setter.conversion = createConversion(conversion);
        if (setAs) setter.setAs = setAs;
        if (merge) setter.merge = true;
        setter.target = (_ref = setTarget !== null && setTarget !== void 0 ? setTarget : target) !== null && _ref !== void 0 ? _ref : name;
        setters[name] = setter;
        if (aliases) for (const alias of Array.from(aliases)) setters[alias] = setter;
      }

      if (needsGetter) {
        var _ref2;

        let getter = {};
        let {
          target,
          getAs,
          getTarget
        } = desc;
        getAs = Props.toBit(getAs);
        if (getAs) getter.getAs = getAs;
        getter.target = (_ref2 = getTarget !== null && getTarget !== void 0 ? getTarget : target) !== null && _ref2 !== void 0 ? _ref2 : name;
        getters[name] = getter;
      }
    }

    for (let propName in interfaceDesc) {
      if (interfaceDesc.hasOwnProperty(propName)) {
        let propDesc = interfaceDesc[propName];
        handleProp(propName, propDesc);
      }
    }

    function _set(props, propName, value) {
      var _setter$setAs;

      let setter = setters[propName];

      if (!setter) {
        if (getters[propName]) throw new Error("Parameter \"".concat(propName, "\" is read-only."));
        throw new Error("Unrecognized parameter \"".concat(propName, "\"."));
      }

      if (setter.typecheck) {
        let result = setter.typecheck(value);

        if (result) {
          throw new TypeError("Failed typecheck: ".concat(result.replace('$v', relaxedPrint(value)).replace('$p', 'parameter "' + propName + '"')));
        }
      }

      if (setter.conversion) {
        let newValue = setter.conversion(value);
        if (newValue === undefined) throw new TypeError("Failed conversion: ".concat(CONVERSION_MSG.replace('$v', relaxedPrint(value)).replace('$p', 'parameter "' + propName + '"')));
        value = newValue;
      }

      let setAs = (_setter$setAs = setter.setAs) !== null && _setter$setAs !== void 0 ? _setter$setAs : 0;
      /* real */

      let merge = !!setter.merge;

      if (merge) {
        props.set(setter.target, deepMerge(props.get(setter.target, setAs), value), setAs);
      } else {
        props.set(setter.target, value, setAs);
      }
    }

    function set(elem, propName, value) {
      if (typeof propName === 'object') {
        setDict(elem.props, propName);
      } else if (typeof propName === 'string') {
        _set(elem.props, propName, value);
      }
    }

    function get(elem, propName) {
      var _getter$getAs;

      let getter = getters[propName];

      if (!getter) {
        if (setters[propName]) throw new Error("Parameter \"".concat(propName, "\" is write-only."));
        throw new Error("Unrecognized parameter \"".concat(propName, "\"."));
      }

      let getAs = (_getter$getAs = getter.getAs) !== null && _getter$getAs !== void 0 ? _getter$getAs : 0;
      /* real */

      return elem.props.get(getter.target, getAs);
    }

    function setDict(props, propDict) {

      for (let propName in propDict) {
        _set(props, propName, propDict[propName]);
      }
    }
    /**
     * Given the internal description of the properties, compute their values based on their user values, current values,
     * et cetera. If isInitialized is true, compute all properties as if they are new.
     * @param props
     * @param isInitialized
     */


    function computeProps(props, isInitialized = true) {
      function getDefault(instructions) {
        let def = instructions.default;

        if (instructions.evaluateDefault) {
          if (typeof def !== 'function') throw new Error('Internal instruction computation instruction says to evaluate the default value, but given default is not a function');
          return def();
        }

        return def;
      }

      for (let propName in internal) {
        let instructions = internal[propName];
        let computed = instructions.computed;
        let doCompose = !!instructions.compose;
        if (computed === 'none') continue;

        if (computed === 'default') {
          // Check whether the current value is undefined. If so, fill it with the default
          if (props.get(propName) === undefined) {
            props.set(propName, getDefault(instructions));
          }
        } else if (computed === 'user') {
          // Check whether the user value is undefined, then the value, then the default
          let store = props.getPropertyStore(propName); // just to make things more efficient

          if (!store) {
            props.set(propName, getDefault(instructions));
          } else {
            if (store.userValue !== undefined) {
              if (doCompose) {
                var _getDefault;

                let type = lookupCompositionType(instructions.type);
                if (!type) throw new Error("Unknown composition type ".concat(instructions.type, "."));
                props.set(propName, type.compose((_getDefault = getDefault(instructions)) !== null && _getDefault !== void 0 ? _getDefault : type.default, store.userValue));
              } else {
                props.set(propName, store.userValue);
              }
            } else if (store.value !== undefined) ; else {
              props.set(propName, getDefault(instructions));
            }
          }
        }
      }
    }

    return {
      set,
      get,
      computeProps,
      description
    };
  }

  const attachGettersAndSetters = () => null;
  const NullInterface = constructInterface({
    interface: {},
    internal: {}
  });

  /**
   * @file This file specifies an Element, which is a component of a Grapheme scene. Elements are similar in design to
   * DOM elements, being nestable and having events.
   *
   * An Element has properties, which may be explicitly specified, inherited
   */
  /**
   * The element class.
   */

  class Element extends Eventful {
    constructor(params = {}) {
      var _params$id;

      super();
      /**
       * Unique string id of this element
       * @type {string}
       * @property
       */

      this.id = (_params$id = params.id) !== null && _params$id !== void 0 ? _params$id : getStringID();
      if (typeof this.id !== 'string' || this.id.length === 0) throw new TypeError('The element id must be a non-empty string.');
      /**
       * The parent of this element; null if it has no parent
       * @type{Element|null}
       * @property
       */

      this.parent = null;
      /**
       * The scene this element is a part of
       * @type {Scene|null}
       * @property
       */

      this.scene = null;
      /**
       * Stores most of the state of the element. Similar to internal but with a lot more predefined behavior
       * @type {Props}
       * @property
       */

      this.props = new Props();
      /**
       * -1 corresponds to an element that has just been created, added, or removed. 0 corresponds to an element which
       * needs an update. 100 corresponds to a completely updated element
       * @type {number}
       */

      this.updateStage = -1;
      /**
       * Used for storing intermediate results required for rendering, interactivity and other things
       * @type {Object}
       * @property
       */

      this.internal = {
        version: getVersionID()
      }; // Call the element-defined constructor

      this.init(params); // Call set on remaining parameters. Corollary: constructor-only parameters should not also be parameters (no "id",
      // for example)

      this.set(params);
    }

    _update() {}

    add() {
      throw new Error("Element is not a group and does not support having children");
    }

    apply(callback) {
      callback(this);
    }

    defaultInheritProps() {
      if (this.parent) this.props.inheritPropertiesFrom(this.parent.props, this.updateStage === -1);
    }

    getRenderingInfo() {
      if (this.internal.renderInfo) return this.internal.renderInfo;
    }

    isChild(child, recursive = true) {
      return false;
    }

    isScene() {
      return false;
    }

    init(params) {}

    set(propName, value) {
      this.getInterface().set(this, propName, value);
    }

    get(propName) {
      return this.getInterface().get(this, propName);
    }

    getDict(propNames) {
      return this.getInterface().getDict(this, propNames);
    }
    /**
     * For all given properties, check which ones need to be filled in with default values.
     * @param defaults
     * @param evaluate
     */


    defaultComputeProps() {
      let inter = this.getInterface();
      const needsInitialize = this.updateStage === -1;
      inter.computeProps(this.props, needsInitialize);
    }

    getInterface() {
      return NullInterface;
    }

    setScene(scene) {
      this.scene = scene;
    }

    stringify() {
      this.props.stringify();
    }

    update() {
      // If some properties have changed, set the update stage accordingly. We use .min in case the update stage is -1
      if (this.props.hasChangedProperties) this.updateStage = Math.min(this.updateStage, 0);
      if (this.updateStage === 100) return;

      this._update();

      this.updateStage = 100;
    }

  }

  class Group extends Element {
    constructor(params = {}) {
      super(params);
      this.children = [];
    }

    _update() {
      this.defaultInheritProps();
    }
    /**
     * Add an element to this group.
     * @param elem {Element}
     * @returns {Group}
     */


    add(elem) {
      if (elem.isScene()) throw new Error('Scene cannot be a child');
      if (elem.parent) throw new Error('Element to be added already has a parent');
      if (!(elem instanceof Element)) throw new TypeError('Element not element');
      if (elem === this) throw new Error("Can't add self");
      if (elem.isChild(this)) throw new Error("Can't make cycle");
      this.children.push(elem);
      elem.parent = this;
      elem.setScene(this.scene);
      elem.updateStage = -1;
      return this;
    }
    /**
     * Run callback(element) on this element and all the element's children
     * @param callback {Function}
     */


    apply(callback) {
      callback(this);
      this.children.forEach(child => child.apply(callback));
    }
    /**
     * If some inheritable properties have changed since the last global update completion, set all the children's update
     * stages to 0. May change how this works later
     */


    informChildrenOfInheritance() {
      if (this.props.hasChangedInheritableProperties && this.children) {
        this.children.forEach(child => {
          child.updateStage = Math.min(child.updateStage, 0); // math.min so that update stage -1 still works
        });
      }
    }

    isChild(elem, recursive = true) {
      for (const child of this.children) {
        if (child === elem) return true;
        if (recursive && child.isChild(elem, true)) return true;
      }

      return false;
    }

    isGroup() {
      return true;
    }

    remove(elem) {
      const index = this.children.indexOf(elem);

      if (index !== -1) {
        this.children.splice(index, 1);
        elem.parent = null;
        elem.setScene(null);
        elem.updateStage = -1;
        return this;
      }

      throw new Error('Not a direct child');
    }

    setScene(scene) {
      this.scene = scene;
      this.children.forEach(child => child.setScene(scene));
    }

    triggerEvent(eventName, data) {
      for (const child of this.children) {
        if (child.triggerEvent(eventName, data)) return true;
      }

      super.triggerEvent(eventName, data);
    }

    update() {
      super.update();
      this.informChildrenOfInheritance();
    }

  }

  const sceneInterface = constructInterface({
    interface: {
      width: {
        description: 'The width of the scene',
        typecheck: {
          type: 'integer',
          min: 100,
          max: 16384
        }
      },
      height: {
        description: 'The height of the scene',
        typecheck: {
          type: 'integer',
          min: 100,
          max: 16384
        }
      },
      dpr: {
        description: 'The device pixel ratio of the scene',
        typecheck: {
          type: 'number',
          min: 1 / 32,
          max: 32
        } //setAs: "user"

      },
      backgroundColor: {
        description: 'The color of the scene background',
        setAs: 'user',
        conversion: {
          type: 'Color'
        }
      },
      sceneDims: {
        description: 'The dimensions of the scene',
        readOnly: true
      }
    },
    internal: {
      width: {
        type: 'number',
        computed: 'default',
        default: 640
      },
      height: {
        type: 'number',
        computed: 'default',
        default: 480
      },
      dpr: {
        type: 'number',
        computed: 'default',
        default: 1
      },
      backgroundColor: {
        type: 'Color',
        computed: 'user',
        default: Colors.TRANSPARENT
      },
      sceneDims: {
        type: 'SceneDimensions',
        computed: 'none'
      }
    }
  });
  /**
   * Passed to children as the parameter "sceneDimensions"
   */

  class SceneDimensions {
    constructor(width, height, dpr) {
      this.width = width;
      this.height = height;
      this.dpr = dpr; // The size of the canvas in true device pixels, rather than CSS pixels

      this.canvasWidth = this.dpr * this.width;
      this.canvasHeight = this.dpr * this.height;
    }
    /**
     * Get the bounding box of the entire scene.
     * @returns {BoundingBox}
     */


    getBoundingBox() {
      return new BoundingBox(0, 0, this.width, this.height);
    }

  }
  /**
   * Top level element in a Grapheme context. The scene has a width, height, and device pixel ratio as its defining
   * geometric patterns, and potentially other properties -- interactivity information, for example. Uniquely, every
   * element knows its scene directly as its .scene property.
   */


  class Scene extends Group {
    getInterface() {
      return sceneInterface;
    }

    init() {
      this.scene = this;
      this.props.setPropertyInheritance('sceneDims', true);
    }
    /**
     * Compute the internal property "sceneDimensions"
     */


    calculateSceneDimensions() {
      const {
        props
      } = this;

      if (props.haveChanged(['width', 'height', 'dpr'])) {
        const {
          width,
          height,
          dpr
        } = props.proxy;
        const sceneDimensions = new SceneDimensions(width, height, dpr); // Equality check of 2 for deep comparison, in case width, height, dpr have not actually changed

        props.set('sceneDims', sceneDimensions, 0
        /* real */
        , 2
        /* equality check */
        );
      }
    }

    updateProps() {
      this.defaultComputeProps();
      this.calculateSceneDimensions();
    }
    /**
     * Only scenes (and derived scenes) return true
     * @returns {boolean}
     */


    isScene() {
      return true;
    }

    _update() {
      this.updateProps();
      this.internal.renderInfo = {
        contexts: {
          type: 'scene',
          dims: this.get('sceneDims'),
          backgroundColor: this.get('backgroundColor')
        }
      };
    }
    /**
     * This function updates all the elements and is the only one with the authority to mark all properties, including
     * inheritable properties, as unchanged.
     */


    updateAll() {
      this.apply(child => {
        child.update();
      }); // Mark the update as completed (WIP)

      this.apply(child => child.props.markGlobalUpdateComplete());
    }

  }

  let canvas, ctx;

  function initCanvas() {
    if (canvas) return;
    canvas = document.createElement('canvas');
    ctx = canvas.getContext('2d');
  }
  /**
   *
   * @param text {string}
   * @param textStyle {TextStyle}
   * @returns {BoundingBox}
   */


  function measureText(text, textStyle) {
    var _textStyle$fontSize, _textStyle$shadowRadi;

    initCanvas();
    let font = textStyle.font;
    let fontSize = (_textStyle$fontSize = textStyle.fontSize) !== null && _textStyle$fontSize !== void 0 ? _textStyle$fontSize : 12;
    let shadowDiameter = 2 * ((_textStyle$shadowRadi = textStyle.shadowRadius) !== null && _textStyle$shadowRadi !== void 0 ? _textStyle$shadowRadi : 0);
    if (!font || !fontSize) throw new Error('Invalid text style');
    ctx.font = "".concat(fontSize, "px ").concat(font);
    let m = ctx.measureText(text);
    let w = m.width + shadowDiameter;
    let h = m.actualBoundingBoxAscent + m.actualBoundingBoxDescent + shadowDiameter;
    return new BoundingBox(0, 0, w, h);
  }
  function toDir(obj) {
    if (obj instanceof Vec2) {
      return obj;
    } else if (typeof obj === "string") {
      switch (obj) {
        case "N":
          return new Vec2(0, -1);

        case "S":
          return new Vec2(0, 1);

        case "W":
          return new Vec2(1, 0);

        case "E":
          return new Vec2(-1, 0);

        case "NE":
          return new Vec2(-1, -1);

        case "NW":
          return new Vec2(1, -1);

        case "SE":
          return new Vec2(-1, 1);

        case "SW":
          return new Vec2(1, 1);

        case "C":
          return new Vec2(0, 0);
      }
    } else if (typeof obj === "undefined") {
      return new Vec2(0, 0);
    } else {
      throw new TypeError("Invalid direction");
    }
  }
  function calculateRectShift(rect, dir, spacing) {
    dir = toDir(dir);
    let shiftX = dir.x * rect.w / 2,
        shiftY = dir.y * rect.h / 2;
    let shiftLen = Math.hypot(shiftX, shiftY);
    let scaleSpacing = shiftLen === 0 ? 0 : (shiftLen + spacing) / shiftLen;
    shiftX *= scaleSpacing;
    shiftY *= scaleSpacing;
    shiftX += -rect.w / 2;
    shiftY += -rect.h / 2;
    return new BoundingBox(rect.x + shiftX, rect.y + shiftY, rect.w, rect.h);
  }
  /**
   * Generate a text location, using an anchor, direction and spacing. This system is inspired by Asymptote Vector
   * Graphics, where dir might be something like 'N' and the text would shift itself by that much in the north direction
   * @param text {string} Text of the instruction
   * @param textStyle {TextStyle} Style of the text
   * @param anchor {Vec2} Location of the text's anchor
   * @param dir {Vec2|string} Direction in which to shift the text. <1, 1> means shifting the text's bounding box so that the
   * box's top left corner is on the anchor, <0, 1> means shifting so that the anchor is on the text's top midpoint
   * @param spacing {number} Number of extra pixels to add to the shift
   * @returns {BoundingBox} Bounding box of the text
   */

  function genTextRect(text, textStyle, anchor, dir, spacing = 1) {
    let rect = measureText(text, textStyle);
    rect.x = anchor.x;
    rect.y = anchor.y;
    return calculateRectShift(rect, dir, spacing);
  }
  function genTextInstruction(text, textStyle, anchor, dir, spacing = 1) {
    return {
      type: 'text',
      text: text,
      pos: genTextRect(text, textStyle, anchor, dir, spacing).tl(),
      style: textStyle
    };
  }

  let sceneInterface$1 = Scene.prototype.getInterface();
  let interactiveSceneInterface = {
    interface: _objectSpread2(_objectSpread2({}, sceneInterface$1.description.interface), {}, {
      interactivity: {
        typecheck: {
          type: 'boolean'
        }
      }
    }),
    internal: _objectSpread2(_objectSpread2({}, sceneInterface$1.description.internal), {}, {
      interactivity: {
        type: 'boolean',
        computed: 'default',
        default: true
      }
    })
  };
  interactiveSceneInterface = constructInterface(interactiveSceneInterface);
  /**
   * A scene endowed with an actual DOM element.
   */

  var _disableInteractivityListeners = new WeakSet();

  var _enableInteractivityListeners = new WeakSet();

  class InteractiveScene extends Scene {
    constructor(...args) {
      super(...args);

      _enableInteractivityListeners.add(this);

      _disableInteractivityListeners.add(this);
    }

    init(params) {
      super.init(params);
      this.domElement = document.createElement("div");
      this.domElement.style.position = "relative"; // so that absolute html children are positioned relative to the div

      this.domCanvas = document.createElement('canvas');
      this.domCanvas.id = this.id;
      this.domElement.appendChild(this.domCanvas);
      this.bitmapRenderer = this.domCanvas.getContext('bitmaprenderer');
    }

    toggleInteractivity() {
      let internal = this.internal;
      let interactivity = this.props.get('interactivity');

      if (!!internal.interactivityListeners !== interactivity) {
        interactivity ? _classPrivateMethodGet(this, _enableInteractivityListeners, _enableInteractivityListeners2).call(this) : _classPrivateMethodGet(this, _disableInteractivityListeners, _disableInteractivityListeners2).call(this);
      }
    }

    _update() {
      super._update();

      this.toggleInteractivity();
      this.resizeCanvas();
    }

    getInterface() {
      return interactiveSceneInterface;
    }

    resizeCanvas() {
      const {
        sceneDims
      } = this.props.proxy;
      const {
        domCanvas
      } = this;
      domCanvas.width = sceneDims.canvasWidth;
      domCanvas.height = sceneDims.canvasHeight;
      domCanvas.style.width = sceneDims.width + 'px';
      domCanvas.style.height = sceneDims.height + 'px';
    }

    addHTMLElement(element) {
      let domElement = this.domElement;
      domElement.appendChild(element);
    }

    setHTMLElements(instructions) {
      let internal = this.internal,
          htmlElements;
      let that = this; // huzzah

      if (!internal.htmlElements) internal.htmlElements = [];
      htmlElements = internal.htmlElements; // A latex element is of the form { type: "html" | "latex", content: "...", pos: Vec2, domElement: (div), w: (number), h: (number), claimed: false }

      htmlElements.forEach(elem => elem.claimed = false);

      function addElementToDOM(html) {
        let div = document.createElement("div");
        div.innerHTML = html;
        div.style.position = "absolute";
        div.style.left = div.style.top = '0';
        div.style.visibility = "none";
        that.domElement.appendChild(div);
        let rect = div.getBoundingClientRect();
        return {
          div,
          rect
        };
      }

      function addElement(html, pos, dir, spacing) {
        let {
          div,
          rect
        } = addElementToDOM(html);
        let shiftedRect = calculateRectShift(new BoundingBox(pos.x, pos.y, rect.width, rect.height), dir, spacing);
        div.style.left = shiftedRect.x + 'px';
        div.style.top = shiftedRect.y + 'px';
        return {
          pos: new Vec2(shiftedRect.x, shiftedRect.y),
          domElement: div,
          w: rect.width,
          h: rect.height,
          claimed: true
        };
      }

      main: for (const instruction of instructions) {
        if (instruction.type === "latex") {
          let {
            pos,
            dir,
            spacing
          } = instruction;

          for (const elem of htmlElements) {
            if (elem.claimed || elem.type !== "latex" || elem.content !== instruction.content) continue; // then the element's latex content is the same, so we calculate the new position. Note we reuse the old
            // width/height values so that getBoundingClientRect() is only called once

            let shiftedRect = calculateRectShift(new BoundingBox(pos.x, pos.y, elem.w, elem.h), dir, spacing);
            pos = shiftedRect.tl();

            if (elem.pos.x !== pos.x || elem.pos.y !== pos.y) {
              // need to move the element
              elem.domElement.style.left = shiftedRect.x + 'px';
              elem.domElement.style.top = shiftedRect.y + 'px';
              elem.pos = pos;
            }

            elem.claimed = true;
            continue main;
          } // No latex element exists that's unclaimed and has the same content, so we create one


          let elem = addElement(instruction.html, pos, dir, spacing);
          elem.type = "latex";
          elem.content = instruction.content;
          htmlElements.push(elem);
        }
      } // Destroy unclaimed html elements


      this.internal.htmlElements = htmlElements.filter(elem => {
        let claimed = elem.claimed;

        if (!claimed) {
          this.domElement.removeChild(elem.domElement);
        }

        return claimed;
      });
    }

    destroyHTMLElements() {
      let children = Array.from(this.domElement.children);

      for (const child of children) {
        if (child.id !== this.id) {
          child.style.visibility = "none";
          this.domElement.removeChild(child);
        }
      }
    }

  }

  var _disableInteractivityListeners2 = function _disableInteractivityListeners2() {
    let internal = this.internal;
    let interactivityListeners = internal.interactivityListeners;
    if (!interactivityListeners) return;

    for (let listenerType in interactivityListeners) {
      let listener = interactivityListeners[listenerType];
      this.domElement.removeEventListener(listenerType, listener);
    }

    internal.interactivityListeners = null;
  };

  var _enableInteractivityListeners2 = function _enableInteractivityListeners2() {
    _classPrivateMethodGet(this, _disableInteractivityListeners, _disableInteractivityListeners2).call(this);

    let listeners = this.internal.interactivityListeners = {}; // Convert mouse event coords (which are relative to the top left corner of the page) to canvas coords

    const getSceneCoords = evt => {
      let rect = this.domElement.getBoundingClientRect();
      return new Vec2(evt.clientX - rect.x, evt.clientY - rect.y);
    };

    ['mousedown', 'mousemove', 'mouseup', 'wheel'].forEach(eventName => {
      let listener;

      if (eventName === 'wheel') {
        listener = evt => {
          this.triggerEvent(eventName, {
            pos: getSceneCoords(evt),
            deltaY: evt.deltaY
          });
          evt.preventDefault();
        };
      } else {
        listener = evt => {
          this.triggerEvent(eventName, {
            pos: getSceneCoords(evt)
          });
          evt.preventDefault();
        };
      }

      let elem = eventName === "mouseup" ? document : this.domElement;
      elem.addEventListener(eventName, listeners[eventName] = listener);
    });
  };

  const figureInterface = constructInterface({
    interface: {
      interactivity: {
        description: 'Whether interactivity is enabled',
        typecheck: {
          type: 'boolean'
        }
      }
    },
    internal: {
      // Scene dims (inherited from above)
      sceneDims: {
        computed: 'none'
      },
      // Bounding box of the entire figure
      figureBoundingBox: {
        computed: 'none'
      },
      // Box in which things are actually plotted
      plottingBox: {
        computed: 'none'
      },
      // Margin between the plotting box and figure bounding box
      margins: {
        computed: 'default',
        default: {
          left: 30,
          right: 30,
          top: 30,
          bottom: 30
        }
      },
      // Interactivity
      interactivity: {
        computed: 'default',
        default: true
      }
    }
  });
  class Figure extends Group {
    _update() {
      this.defaultInheritProps();
      this.defaultComputeProps();
      this.computeBoxes();
      this.computeScissor();
    }

    computeBoxes() {
      const {
        props
      } = this;
      props.set('figureBoundingBox', props.get('sceneDims').getBoundingBox());
      let margins = props.get('margins');
      props.set('plottingBox', props.get('figureBoundingBox').squishAsymmetrically(margins.left, margins.right, margins.bottom, margins.top), 0
      /* real */
      , 2
      /* deep equality */
      );
    }

    computeScissor() {
      const {
        props
      } = this;
      this.internal.renderInfo = {
        contexts: {
          type: 'scissor',
          scissor: props.get('plottingBox')
        }
      };
    }

    getInterface() {
      return figureInterface;
    }

  }

  const pointInterface = constructInterface({
    interface: {
      position: {
        description: 'Position of the point, potentially under a plot transformation',
        conversion: {
          type: 'Vec2'
        },
        target: 'pos',
        aliases: ['pos']
      },
      color: {
        description: 'Color of the point',
        conversion: {
          type: 'Color'
        },
        setAs: 'user'
      },
      size: {
        description: 'Radius in pixels of the dot',
        typecheck: {
          type: 'number',
          min: 0,
          max: 100
        },
        setAs: 'user'
      }
    },
    internal: {
      pos: {
        type: 'Vec2',
        computed: 'none'
        /* No defaults, no user value, no nothing */

      },
      color: {
        type: 'Color',
        computed: 'user',
        default: Colors.BLACK
      },
      size: {
        type: 'number',
        computed: 'user',
        default: 5
      }
    }
  });
  class PointElement extends Element {
    getInterface() {
      return pointInterface;
    }

    _update() {
      this.defaultInheritProps();
      this.defaultComputeProps();
      let {
        pos,
        color,
        size,
        plotTransform,
        numberLineTransform
      } = this.props.proxy;

      if (!pos || !color || !size) {
        this.internal.renderInfo = null;
        return;
      }

      if (plotTransform) {
        pos = plotTransform.graphToPixel(pos);
      } else if (numberLineTransform) {
        var _pos$x;

        pos = numberLineTransform.graphToPixel((_pos$x = pos.x) !== null && _pos$x !== void 0 ? _pos$x : pos);
      }

      let circleVertices = generateCircleTriangleStrip(size, pos.x, pos.y);
      this.internal.renderInfo = {
        instructions: {
          type: 'triangle_strip',
          color,
          vertices: circleVertices
        }
      };
    }

  }

  const DefaultOutlinePen = Pen.create({
    endcap: 'square'
  });
  const DefaultGridlinePens = {
    major: DefaultStyles.gridlinesMajor,
    minor: DefaultStyles.gridlinesMinor,
    axis: DefaultStyles.gridlinesAxis
  };
  const figureBaublesInterface = constructInterface({
    interface: {
      showOutline: {
        typecheck: 'boolean',
        description: 'Whether to show an outline of the figure'
      },
      showGridlines: {
        setAs: 'user',
        description: 'Whether to show gridlines'
      },
      sharpenGridlines: {
        typecheck: 'boolean',
        description: 'Whether to make the gridlines look sharp by aligning them to pixel boundaries'
      },
      outlinePen: {
        setAs: 'user',
        description: 'The pen used to draw the outline'
      }
    },
    internal: {
      // Whether to show a bounding outline of the figure
      showOutline: {
        type: 'boolean',
        computed: 'default',
        default: true
      },
      // Pen to use for the bounding outline
      outlinePen: {
        type: 'Pen',
        computed: 'user',
        default: DefaultOutlinePen,
        compose: true
      },
      // Internal variable of the form { major: { x: [ ... ], y: [ ... ] }, minor: ... } expressed in graph coordinates
      ticks: {
        computed: 'none'
      },
      // Whether to show the figure's gridlines
      showGridlines: {
        type: 'BooleanDict',
        computed: 'user',
        default: {
          major: true,
          minor: true,
          axis: true
        },
        compose: true
      },
      // Whether to show axes instead of major gridlines
      generateGridlinesAxis: {
        type: 'boolean',
        computed: 'default',
        default: true
      },
      // Whether to sharpen the gridlines
      sharpenGridlines: {
        type: 'boolean',
        computed: 'default',
        default: true
      },
      // Dictionary of pens
      gridlinePens: {
        type: 'Pens',
        computed: 'user',
        default: DefaultGridlinePens,
        compose: true
      },
      // Whether to show labels
      showLabels: {
        type: 'boolean',
        computed: 'default',
        default: true
      },
      // Where to put the labels
      labelPosition: {
        type: 'LabelPosition',
        computed: 'user',
        default: DefaultStyles.plotLabelPositions,
        compose: true
      }
    }
  }); // Credit: https://stackoverflow.com/a/20439411

  /* Turns a float into a pretty float by removing dumb floating point things */

  function beautifyFloat(f, prec = 12) {
    let strf = f.toFixed(prec);

    if (strf.includes('.')) {
      return strf.replace(/\.?0+$/g, '');
    } else {
      return strf;
    }
  }

  function isApproxEqual(v, w, eps = 1e-5) {
    return Math.abs(v - w) < eps;
  }

  const standardLabelFunction = x => {
    if (x === 0) return '0'; // special case
    else if (Math.abs(x) < 1e5 && Math.abs(x) > 1e-5) // non-extreme floats displayed normally
        return beautifyFloat(x);else {
        // scientific notation for the very fat and very small!
        let exponent = Math.floor(Math.log10(Math.abs(x)));
        let mantissa = x / 10 ** exponent;
        let prefix = isApproxEqual(mantissa, 1) ? '' : beautifyFloat(mantissa, 8) + "\\cdot ";
        let exponent_suffix = '10^' + exponent;
        return prefix + exponent_suffix;
      }
  };
  /**
   * Given a plot transform, ticks and set of pens, generate a set of polyline calls that draw gridlines.
   * @param plotTransform {LinearPlot2DTransform}
   * @param ticks
   * @param gridlinePens
   * @param enabledPens {{}|null} Dict (pen name -> boolean) of enabled pens to generate ticks for
   * @param sharpen {boolean} Whether to align the ticks to pixel boundaries to make them look sharper
   * @returns {Array}
   */


  function generateGridlinesInstructions(plotTransform, ticks, gridlinePens, enabledPens = null, sharpen = true) {
    let pixelBox = plotTransform.pixelBox();
    let instructions = [];

    for (let [style, entries] of Object.entries(ticks)) {
      if (enabledPens && !enabledPens[style]) continue;
      let pen = gridlinePens[style];
      let thickness = pen.thickness; // Used to make thin lines appear "sharper"

      let shift = thickness % 2 === 1 ? 0.5 : 0;
      if (!pen) continue;
      let vertices = [];

      for (let tick of entries.x) {
        let x = plotTransform.graphToPixelX(tick);

        if (sharpen) {
          x = (x | 0) + shift;
        }

        vertices.push(x, pixelBox.y, x, pixelBox.y2);
        vertices.push(NaN, NaN);
      }

      for (let tick of entries.y) {
        let y = (plotTransform.graphToPixelY(tick) | 0) + shift;

        if (sharpen) {
          y = (y | 0) + shift;
        }

        vertices.push(pixelBox.x, y, pixelBox.x2, y);
        vertices.push(NaN, NaN);
      }

      instructions.push({
        type: 'polyline',
        vertices: new Float32Array(vertices),
        pen
      });
    }

    return instructions;
  }

  class FigureBaubles extends Group {
    getInterface() {
      return figureBaublesInterface;
    }

    _update() {
      this.defaultInheritProps();
      this.defaultComputeProps();
      this.computeTicks();
      this.computeGridlines();
      this.computeLabels();
      this.toggleOutline();
      this.computeRenderInfo();
    }

    computeTicks() {
      const {
        props
      } = this;

      if (props.hasChanged('plotTransform')) {
        let tr = props.get('plotTransform'),
            ticks;
        if (tr) ticks = get2DDemarcations(tr.gx1, tr.gx1 + tr.gw, tr.pw, tr.gy1, tr.gy1 + tr.gh, tr.ph, {
          emitAxis: props.get('generateGridlinesAxis')
        });
        props.set('ticks', ticks);
      }
    }

    computeLabels() {
      const instructions = [];

      if (this.props.haveChanged(['ticks', 'showLabels'])) {
        let {
          ticks,
          plotTransform
        } = this.props.proxy;
        if (ticks && plotTransform) for (let style of ['major']) {
          let entries = ticks[style];
          let x = entries.x,
              y = entries.y;

          for (let i = 0; i < x.length; ++i) {
            let pos = plotTransform.graphToPixel(new Vec2(x[i], 0));
            instructions.push({
              type: "latex",
              latex: standardLabelFunction(x[i]),
              pos: pos,
              dir: 'S',
              spacing: 3
            });
          }

          for (let i = 0; i < y.length; ++i) {
            let pos = plotTransform.graphToPixel(new Vec2(0, y[i]));
            instructions.push({
              type: "latex",
              latex: standardLabelFunction(y[i]),
              pos: pos,
              dir: 'E',
              spacing: 3
            });
          }
        }
        this.internal.labelInstructions = instructions;
      }
    }

    computeGridlines() {
      if (this.props.haveChanged(['ticks', 'showGridlines', 'sharpenGridlines'])) {
        let {
          showGridlines,
          ticks,
          gridlinePens,
          plotTransform,
          sharpenGridlines
        } = this.props.proxy;
        this.internal.gridlinesInstructions = ticks && plotTransform ? generateGridlinesInstructions(plotTransform, ticks, gridlinePens, showGridlines, sharpenGridlines) : [];
      }
    }

    toggleOutline() {
      let {
        showOutline,
        plotTransform,
        outlinePen: pen
      } = this.props.proxy;
      let int = this.internal;

      if (showOutline && plotTransform) {
        // We inset the box by the thickness of the line so that it doesn't jut out
        let box = plotTransform.pixelBox().squish(pen.thickness / 2);
        let vertices = generateRectangleCycle(box);
        int.outlineInstruction = {
          type: 'polyline',
          vertices,
          pen
        };
      } else {
        int.outlineInstruction = null;
      }
    }

    computeRenderInfo() {
      let int = this.internal;
      int.renderInfo = {
        instructions: [int.outlineInstruction, ...int.labelInstructions, ...int.gridlinesInstructions]
      };
    }

  }

  let textElementInterface = constructInterface({
    interface: {
      style: {
        description: 'The style of the text.',
        setAs: 'user',
        merge: true
      },
      position: {
        description: 'The position of the text.',
        conversion: {
          type: 'Vec2'
        },
        target: 'pos'
      },
      text: {
        description: 'The string of text.',
        typecheck: 'string'
      }
    },
    internal: {
      pos: {
        type: 'Vec2',
        computed: 'none'
      },
      style: {
        type: 'TextStyle',
        computed: 'user',
        compose: true,
        default: TextStyle.default
      }
    }
  });
  class TextElement extends Element {
    getInterface() {
      return textElementInterface;
    }

    _update() {
      this.defaultComputeProps();
      this.internal.renderInfo = {
        instructions: {
          type: 'text',
          text: this.props.get('text'),
          pos: this.props.get('pos'),
          style: this.props.get('style')
        }
      };
    }

  }

  // Sort of a test object for now so that I can figure out the rest of Grapheme's internals
  const pointCloudInterface = constructInterface({
    data: true,
    pointRadius: true,
    color: true
  });
  class PointCloudElement extends Element {
    init() {
      this.set({
        pointRadius: 4,
        color: Colors.BLUE
      });
    }

    getInterface() {
      return pointCloudInterface;
    }

    _update() {
      this.defaultInheritProps();
      const {
        data,
        pointRadius,
        color,
        plotTransform
      } = this.props.proxy;
      let circle = generateCircleTriangleStrip(pointRadius, 0, 0, 16);
      let vertices = new Float32Array(circle.length * data.length / 2);
      let {
        xm,
        ym,
        xb,
        yb
      } = plotTransform.getReducedGraphToPixelTransform();
      let verticesOffset = 0;

      for (let i = 0; i < data.length; i += 2) {
        let x = data[i],
            y = data[i + 1];
        x = xm * x + xb;
        y = ym * y + yb;

        for (let j = 0; j < circle.length; j += 2) {
          vertices[verticesOffset + j] = circle[j] + x;
          vertices[verticesOffset + j + 1] = circle[j + 1] + y;
        }

        verticesOffset += circle.length;
      }

      this.internal.renderInfo = {
        instructions: {
          type: 'triangle_strip',
          vertices,
          color
        }
      };
    }

  }

  const polylineInterface = constructInterface({
    interface: {
      pen: {
        setAs: 'user',
        description: 'The pen used to draw the polyline.'
      },
      vertices: {
        conversion: {
          type: 'f32_vec2_array'
        },
        description: 'The vertices of the polyline.'
      }
    },
    internal: {
      pen: {
        type: 'Pen',
        computed: 'user',
        default: DefaultStyles.Pen,
        compose: true
      },
      vertices: {
        computed: 'none'
      }
    }
  });
  class PolylineElement extends Element {
    _update() {
      this.defaultComputeProps();
      let {
        vertices,
        pen
      } = this.props.proxy;
      this.internal.renderInfo = vertices && pen ? {
        instructions: {
          type: 'polyline',
          vertices,
          pen
        }
      } : null;
    }

    getInterface() {
      return polylineInterface;
    }

  }

  const MAX_INITIAL_SAMPLE_COUNT = 1e6;
  let samplingStrategies = {
    // Simplest initial sampling algorithm, but doesn't do well with periodic functions
    uniform: (t1, t2, samples) => {
      let iStep = (t2 - t1) / (samples - 1);
      let arr = new Float64Array(samples);

      for (let i = 0; i < samples; ++i) {
        arr[i] = i * iStep + t1;
      }

      return arr;
    }
  }; // Stack used for recursive adaptive sampling; a manually done recursion. It's also nice because it can be paused as
  // with a bolus

  let sampleStack = new Float64Array(10 * 2048);
  /**
   * Compute a parametric plot of a function f: real -> vec2 between tMin and tMax, using various tuning parameters. The
   * routine takes in as required arguments the function f and tMin and tMax.
   * @param f {{evaluate: Function}} The function, which should accept a single parameter t (double) and return a Vec2.
   * @param tMin {number} The lower bound on t.
   * @param tMax {number} The upper bound on t.
   * @param samples {number} The number of initial samples to take, if adaptively
   * @param samplingStrategy {string} The strategy with which the initial samples will be taken
   * @param samplingStrategyArgs {Array} Additional parameters to pass to the sampling strategy
   * @param adaptive {boolean} Whether to use adaptive sampling
   * @param adaptiveRes {number} The resolution at which a segment is considered linear, and will not be subdivided further
   * @param simplify {boolean} Whether to simplify the resulting contours, converting highly linear sections to lines
   * @param simplifyRes {number} The resolution at which a set of segments is considered linear and will be simplified
   * @param intervalFunc {{evaluate: Function}} A function, which should accept a single parameter t (FastRealInterval) and return a FastVec2Interval.
   * @param plotBox {BoundingBox} The bounding box, in graph space, of the viewing window, which can be used for culling
   * @returns {Float64Array|null}
   */

  function parametricPlot2D(f, tMin, tMax, {
    samples: sampleCount = 100,
    samplingStrategy = "uniform",
    samplingStrategyArgs = [],
    adaptive = true,
    adaptiveRes = Infinity,
    simplify = true,
    simplifyRes = adaptiveRes,
    intervalFunc = null,
    plotBox = null
  } = {}) {
    // Sanity checks
    if (!Number.isFinite(tMin) || !Number.isFinite(tMax) || tMin >= tMax) return null;
    if (adaptiveRes <= 0) throw new RangeError("Minimum resolution must be a positive number");
    if (sampleCount > MAX_INITIAL_SAMPLE_COUNT || sampleCount < 2) throw new RangeError("Initial sample count is not in the range [2, 1000000]");
    if (plotBox !== null && !(plotBox instanceof BoundingBox)) throw new TypeError("Plot box must be null or a bounding box");
    let evaluate = f.evaluate;
    let sampler = samplingStrategies[samplingStrategy];
    if (!sampler) throw new Error("Invalid sampling strategy " + samplingStrategy); // t values for the initial samples

    let samplesT = sampler(tMin, tMax, sampleCount, ...samplingStrategyArgs); // array to store the initial samples

    let samples = new Float64Array(2 * sampleCount); // Used to avoid unnecessary allocations

    let fiStore = new FastRealInterval(); // Whether to actually use interval arithmetic

    let doInterval = !!(intervalFunc && plotBox); // do a single overall interval computation and disable it if the entire graph is within bounds

    if (doInterval) {
      fiStore.min = tMin;
      fiStore.max = tMax;
      let res = intervalFunc.evaluate(fiStore);

      if (res.entirelyWithin(plotBox)) {
        doInterval = false;
      }
    } // sample the function


    for (let i = 0, j = 0; i < sampleCount; ++i, j += 2) {
      let pos = evaluate(samplesT[i]);
      samples[j] = pos.x;
      samples[j + 1] = pos.y;
    } // If we're doing adaptive sampling, we look for places to iteratively refine our sampling


    if (adaptive) {
      let x1 = 0,
          y1 = 0,
          x2 = samples[0],
          y2 = samples[1],
          x3 = samples[2],
          y3 = samples[3];
      let s1 = 0,
          s2 = 0; // samples t for (x1, y1) and (x2, y2)

      let adaptiveResSquared = adaptiveRes * adaptiveRes;
      let needsSubdivide = false; // whether the current segment needs subdivision, carried over from the previous iter

      HEAPF64[0] = x2;
      HEAPF64[1] = y2;
      let newSamplesIndex = 1;

      for (let i = 2; i <= sampleCount; ++i) {
        x1 = x2;
        y1 = y2;
        x2 = x3;
        y2 = y3;

        if (i !== sampleCount) {
          // Avoid OOB access
          x3 = samples[2 * i];
          y3 = samples[2 * i + 1];
        }

        if (doInterval) {
          s1 = fiStore.min = samplesT[i - 2];
          s2 = fiStore.max = samplesT[i - 1];
          let vec2Interval = intervalFunc.evaluate(fiStore);

          if (!vec2Interval.intersectsBoundingBox(plotBox)) {
            // If the interval is entirely outside the plot box, we ignore it
            HEAPF64[++newSamplesIndex] = NaN;
            HEAPF64[++newSamplesIndex] = NaN;
            continue;
          }
        } // (x1, y1) -- (x2, y2) is every segment sampled. We subdivide this segment if exactly one of the points
        // p1 and p2 is undefined, or if the previous angle (or the next angle) needs refinement, which is determined by
        // the distance from the point (x2, y2) to (x1, y1) -- (x3, y3). This subdivision is *recursive*, and doing so
        // efficiently requires some careful thinking.


        let shouldSubdivide = needsSubdivide;
        needsSubdivide = false; // Two conditions for subdivision: undefinedness or insufficient linearity

        if (!shouldSubdivide) {
          if ((Number.isFinite(x1) && Number.isFinite(y1)) !== (Number.isFinite(x2) && Number.isFinite(y2))) {
            shouldSubdivide = true;
          }
        } // We need to calculate this every time because it affects both this segment (should subdivide) and the next
        // (needs subdivide)


        let dstSquared = pointLineSegmentDistanceSquared(x2, y2, x1, y1, x3, y3);

        if (dstSquared > adaptiveResSquared) {
          // If the distance is sufficient, both this segment and the next segment need division (stored in
          // needsSubdivide)
          needsSubdivide = true;
          shouldSubdivide = true;
        }

        if (shouldSubdivide) {
          // Need to subdivide p1 -- p2. We manually unroll the recursion, with two types of elements on the stack:
          // [ x1, y1, x2, y2, s1, s2, 0 ] where f(s1) = (x1, y1) and f(s2) = (x2, y2), and
          // [ x2, y2, 1], a point to insert into the list of samples. If we find that a segment is to be divided, we
          // push the right half, then the midpoint (to be inserted into the list of samples), then the left half, which
          // ensures that, since we're iterating from left to right, all the samples will be put in order. If we're doing
          // interval evaluation, we push an additional enum to the stack which is whether to do interval evaluation on
          // the segment.
          sampleStack[0] = x1;
          sampleStack[1] = y1;
          sampleStack[2] = x2;
          sampleStack[3] = y2;

          if (!doInterval) {
            s1 = samplesT[i - 2];
            s2 = samplesT[i - 1];
          }

          sampleStack[4] = s1;
          sampleStack[5] = s2;
          sampleStack[6] = 0;
          let stackIndex = 7;

          while (stackIndex > 0) {
            let dType = sampleStack[--stackIndex];

            if (dType === 1) {
              let y2 = sampleStack[--stackIndex];
              let x2 = sampleStack[--stackIndex];
              HEAPF64[++newSamplesIndex] = x2;
              HEAPF64[++newSamplesIndex] = y2;
              continue;
            }

            let s3 = sampleStack[--stackIndex];
            let s1 = sampleStack[--stackIndex];
            let y3 = sampleStack[--stackIndex];
            let x3 = sampleStack[--stackIndex];
            let y1 = sampleStack[--stackIndex];
            let x1 = sampleStack[--stackIndex];
            let s2 = (s1 + s3) / 2;
            let tooSmall = s1 === s2 || s2 === s3;

            if (tooSmall) {
              HEAPF64[++newSamplesIndex] = NaN;
              HEAPF64[++newSamplesIndex] = NaN;
              continue;
            }

            let pos = evaluate(s2);
            let x2 = pos.x;
            let y2 = pos.y;
            let leftIsDefined = Number.isFinite(x1) && Number.isFinite(y1);
            let midIsDefined = Number.isFinite(x2) && Number.isFinite(y2);
            let rightIsDefined = Number.isFinite(x3) && Number.isFinite(y3);
            let needsSubdivide = leftIsDefined !== midIsDefined || rightIsDefined !== midIsDefined;

            if (!needsSubdivide) {
              let dstSquared = pointLineSegmentDistanceSquared(x2, y2, x1, y1, x3, y3);
              if (dstSquared > adaptiveResSquared) needsSubdivide = true;
            }

            if (needsSubdivide) {
              --stackIndex; // Right segment

              sampleStack[++stackIndex] = x2;
              sampleStack[++stackIndex] = y2;
              sampleStack[++stackIndex] = x3;
              sampleStack[++stackIndex] = y3;
              sampleStack[++stackIndex] = s2;
              sampleStack[++stackIndex] = s3;
              sampleStack[++stackIndex] = 0; // dType 0
              // Midpoint

              sampleStack[++stackIndex] = x2;
              sampleStack[++stackIndex] = y2;
              sampleStack[++stackIndex] = 1; // dType 1
              // Left segment

              sampleStack[++stackIndex] = x1;
              sampleStack[++stackIndex] = y1;
              sampleStack[++stackIndex] = x2;
              sampleStack[++stackIndex] = y2;
              sampleStack[++stackIndex] = s1;
              sampleStack[++stackIndex] = s2;
              sampleStack[++stackIndex] = 0; // dType 0

              ++stackIndex;
            } else {
              HEAPF64[++newSamplesIndex] = x2;
              HEAPF64[++newSamplesIndex] = y2;
            }
          }
        } else {
          HEAPF64[++newSamplesIndex] = x2;
          HEAPF64[++newSamplesIndex] = y2;
        }
      }

      samples = new Float64Array(HEAPF64.subarray(0, newSamplesIndex + 1));
    }

    if (simplify) samples = simplifyPolyline(samples, {
      minRes: simplifyRes
    });
    return samples;
  }

  const parametricPlotInterface = constructInterface({
    interface: {
      pen: {
        setAs: 'user',
        description: 'The pen used to draw the plot'
      },
      varName: {
        description: 'The name of the varying variable',
        typecheck: 'VariableName'
      },
      range: {
        description: 'Range of the varying variable to plot',
        aliases: ['t']
      },
      function: {
        setAs: 'user',
        description: 'The function R -> R^2 of the plot',
        aliases: ['f']
      },
      samples: {
        description: 'The number of samples to plot',
        typecheck: {
          type: 'integer',
          min: 10,
          max: 1e6
        }
      }
    },
    internal: {
      // Pen used to draw the parametric plot
      pen: {
        type: 'Pen',
        computed: 'user',
        default: DefaultStyles.Pen,
        compose: true
      },
      varName: {
        type: 'string',
        computed: 'default',
        default: 't'
      },
      function: {
        type: 'ASTNode',
        computed: 'none'
      },
      samples: {
        type: 'number',
        computed: 'default',
        default: 100
      }
    }
  });
  class ParametricPlot2D extends Element {
    _update() {
      this.defaultInheritProps();
      this.defaultComputeProps();
      this.compileFunction();
      this.computePoints();
    }

    compileFunction() {
      const {
        props
      } = this;

      if (props.hasChanged('function')) {
        let user = props.getUserValue('function');

        if (!user) {
          props.set('function', null);
          return;
        }

        let node;

        if (typeof user === 'string') {
          node = parseString(user);
        } else if (user instanceof ASTNode) {
          node = user.clone();
        } else {
          throw new Error("Expected string or ASTNode, got ".concat(relaxedPrint(user)));
        }

        let varName = props.get('varName'); // default: 't'

        let scope = {};
        scope[varName] = 'real';
        node.resolveTypes(scope, {
          strict: true
        });
        props.set('functionNode', node);
        if (node.type !== 'vec2') throw new Error("Expected expression with return type of vec2, got expression with return type of ".concat(node.type));
        let compiled = compileNode(node, {
          args: [varName]
        });
        props.set('function', compiled);
        let intervalCompiled = compileNode(node, {
          args: [varName],
          mode: "fast_interval"
        });
        props.set('fastIntervalFunction', intervalCompiled);
      }
    }

    computePoints() {
      const {
        samples,
        function: f,
        fastIntervalFunction: fIf,
        range,
        pen,
        plotTransform
      } = this.props.proxy;

      if (!samples || !f || !range || !pen || !plotTransform) {
        this.internal.renderInfo = null;
        return;
      }

      let rangeStart = range[0],
          rangeEnd = range[1];
      let pts = parametricPlot2D(f, rangeStart, rangeEnd, {
        samples,
        adaptive: true,
        adaptiveRes: plotTransform.graphPixelSize() / 20,
        simplifyRes: plotTransform.graphPixelSize() / 4,
        intervalFunc: fIf,
        plotBox: plotTransform.graphBox() //new BoundingBox(-1, -1, 2, 2)

      });
      plotTransform.graphToPixelArrInPlace(pts);
      this.internal.pts = pts;
      this.internal.renderInfo = {
        instructions: {
          type: 'polyline',
          vertices: pts,
          pen
        }
      };
    }

    getInterface() {
      return parametricPlotInterface;
    }

  }

  const INF = 1e20;
  class TinySDF {
    constructor({
      fontSize = 24,
      buffer = 3,
      radius = 8,
      cutoff = 0.25,
      fontFamily = 'sans-serif',
      fontWeight = 'normal'
    }) {
      this.buffer = buffer;
      this.cutoff = cutoff;
      this.radius = radius; // make the canvas size big enough to both have the specified buffer around the glyph
      // for "halo", and account for some glyphs possibly being larger than their font size

      const size = this.size = fontSize + buffer * 4;

      const canvas = this._createCanvas(size);

      const ctx = this.ctx = canvas.getContext('2d');
      ctx.font = "".concat(fontWeight, " ").concat(fontSize, "px ").concat(fontFamily);
      ctx.textBaseline = 'alphabetic';
      ctx.textAlign = 'left'; // Necessary so that RTL text doesn't have different alignment

      ctx.fillStyle = 'black'; // temporary arrays for the distance transform

      this.gridOuter = new Float64Array(size * size);
      this.gridInner = new Float64Array(size * size);
      this.f = new Float64Array(size);
      this.z = new Float64Array(size + 1);
      this.v = new Uint16Array(size);
    }

    _createCanvas(size) {
      const canvas = document.createElement('canvas');
      canvas.width = canvas.height = size;
      return canvas;
    }

    getMetrics(char) {
      const {
        width: glyphAdvance,
        actualBoundingBoxAscent,
        actualBoundingBoxDescent,
        actualBoundingBoxLeft,
        actualBoundingBoxRight
      } = this.ctx.measureText(char); // The integer/pixel part of the top alignment is encoded in metrics.glyphTop
      // The remainder is implicitly encoded in the rasterization

      const glyphTop = Math.floor(actualBoundingBoxAscent);
      const glyphLeft = 0; // If the glyph overflows the canvas size, it will be clipped at the bottom/right

      const glyphWidth = Math.min(this.size - this.buffer, Math.ceil(actualBoundingBoxRight - actualBoundingBoxLeft));
      const glyphHeight = Math.min(this.size - this.buffer, Math.ceil(actualBoundingBoxAscent) + Math.ceil(actualBoundingBoxDescent));
      const width = glyphWidth + 2 * this.buffer;
      const height = glyphHeight + 2 * this.buffer;
      return {
        width,
        height,
        glyphWidth,
        glyphHeight,
        glyphTop,
        glyphLeft,
        glyphAdvance
      };
    }

    draw(char, metrics = this.getMetrics(char)) {
      const {
        width,
        height,
        glyphWidth,
        glyphHeight,
        glyphTop
      } = metrics;
      const len = width * height;
      const data = new Uint8ClampedArray(len);

      const glyph = _objectSpread2({
        data
      }, metrics);

      if (glyphWidth === 0 || glyphHeight === 0) return glyph;
      const {
        ctx,
        buffer,
        gridInner,
        gridOuter
      } = this;
      ctx.clearRect(buffer, buffer, glyphWidth, glyphHeight);
      ctx.fillText(char, buffer, buffer + glyphTop + 1);
      const imgData = ctx.getImageData(buffer, buffer, glyphWidth, glyphHeight); // Initialize grids outside the glyph range to alpha 0

      gridOuter.fill(INF, 0, len);
      gridInner.fill(0, 0, len);

      for (let y = 0; y < glyphHeight; y++) {
        for (let x = 0; x < glyphWidth; x++) {
          const a = imgData.data[4 * (y * glyphWidth + x) + 3] / 255; // alpha value

          if (a === 0) continue; // empty pixels

          const j = (y + buffer) * width + x + buffer;

          if (a === 1) {
            // fully drawn pixels
            gridOuter[j] = 0;
            gridInner[j] = INF;
          } else {
            // aliased pixels
            const d = 0.5 - a;
            gridOuter[j] = d > 0 ? d * d : 0;
            gridInner[j] = d < 0 ? d * d : 0;
          }
        }
      }

      edt(gridOuter, width, height, this.f, this.v, this.z);
      edt(gridInner, width, height, this.f, this.v, this.z);

      for (let i = 0; i < len; i++) {
        const d = Math.sqrt(gridOuter[i]) - Math.sqrt(gridInner[i]);
        data[i] = Math.round(255 - 255 * (d / this.radius + this.cutoff));
      }

      return glyph;
    }

  } // 2D Euclidean squared distance transform by Felzenszwalb & Huttenlocher https://cs.brown.edu/~pff/papers/dt-final.pdf

  function edt(data, width, height, f, v, z) {
    for (let x = 0; x < width; x++) edt1d(data, x, width, height, f, v, z);

    for (let y = 0; y < height; y++) edt1d(data, y * width, 1, width, f, v, z);
  } // 1D squared distance transform


  function edt1d(grid, offset, stride, length, f, v, z) {
    v[0] = 0;
    z[0] = -INF;
    z[1] = INF;
    f[0] = grid[offset];

    for (let q = 1, k = 0, s = 0; q < length; q++) {
      f[q] = grid[offset + q * stride];
      const q2 = q * q;

      do {
        const r = v[k];
        s = (f[q] - f[r] + q2 - r * r) / (q - r) / 2;
      } while (s <= z[k] && --k > -1);

      k++;
      v[k] = q;
      z[k] = s;
      z[k + 1] = INF;
    }

    for (let q = 0, k = 0; q < length; q++) {
      while (z[k + 1] < q) k++;

      const r = v[k];
      const qr = q - r;
      grid[offset + q * stride] = f[r] + qr * qr;
    }
  } // For now we'll just do printable ASCII. Everything else will be dropped


  let desiredChars = '';

  for (let i = 33; i < 127; ++i) desiredChars += String.fromCharCode(i);

  function getTextSDFInformation(params = {}) {
    // Parameters are fontSize, buffer, radius, cutoff, fontFamily, and fontWeight. space is dealt with separately
    const sdf = new TinySDF(params);
    const chars = desiredChars.split('');
    const charData = [];

    for (const char of chars) {
      charData.push(sdf.draw(char));
    }

    const charPacking = packRectangles(charData.map(char => ({
      w: char.width,
      h: char.height
    })));
    const {
      width,
      height,
      rects
    } = charPacking;
    const atlas = new Uint8ClampedArray(width * height); // The text is generally going to be inverted, so

    function pasteIntoAtlas(data
    /* Uint8ClampedArray */
    , pasteX, pasteY, dataWidth, dataHeight) {
      // Do it row by row, so go to y for the first element, draw dataWidth elements, then skip down
      let i = 0;

      for (let y = pasteY; y < pasteY + dataHeight; ++y) {
        let offset = width / 2 * y + pasteX / 2;

        for (let pos = offset; pos < offset + dataWidth; ++pos) {
          atlas[offset + pos] = data[i];
          ++i;
        }
      }
    }

    for (let i = 0; i < chars.length; ++i) {
      let data = charData[i];
      let rect = rects[i];
      pasteIntoAtlas(data.data, rect.x, rect.y, data.width, data.height);
      data.atlasX = rect.x;
      data.atlasY = rect.y;
    }

    chars.push(' ');
    charData.push({
      glyphAdvance: sdf.ctx.measureText(' ').width
    });
    const retData = {};

    for (let i = 0; i < chars.length; ++i) {
      retData[chars[i]] = charData[i];
    }

    return {
      // Current structure: Each glyph is given a rectangle on the texture with bounds (atlasX, atlasY) +
      charData: retData,
      atlas,
      atlasWidth: width,
      atlasHeight: height
    };
  }

  class TextRenderer {
    constructor() {
      this.canvas = document.createElement('canvas');
      let ctx = this.ctx = this.canvas.getContext('2d');
      ctx.textAlign = 'left';
      ctx.textBaseline = 'alphabetic';
    }
    /**
     * Clear out all previous text stores. In the future, when doing a dynamic text packing, this will be called sometimes
     * to do a reallocation.
     */


    clearText() {
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    }

    getMetrics(textInfo) {
      const {
        ctx
      } = this;
      const {
        fontSize,
        font
      } = textInfo.style;
      ctx.font = "".concat(fontSize, "px ").concat(font);
      return ctx.measureText(textInfo.text);
    }

    resizeCanvas(width, height) {
      this.canvas.width = width;
      this.canvas.height = height;
      const {
        ctx
      } = this;
      ctx.textAlign = 'left';
      ctx.textBaseline = 'alphabetic';
    }

    drawText(textInfos) {
      const {
        ctx
      } = this;
      const padding = 2; // Extra padding to allow for various antialiased pixels to spill over
      // Sort by font to avoid excess ctx.font modifications

      textInfos.sort((c1, c2) => c1.style.font < c2.style.font); // Compute where to place the text. Note that the text instructions are mutated in this process (in fact, the point
      // of this process is to provide the instruction compiler with enough info to get the correct vertices)

      const rects = [];

      for (const draw of textInfos) {
        var _ref;

        const metrics = this.getMetrics(draw);
        let shadowDiameter = (_ref = 2 * draw.style.shadowRadius) !== null && _ref !== void 0 ? _ref : 0;
        const width = Math.ceil(metrics.actualBoundingBoxLeft + metrics.actualBoundingBoxRight) + shadowDiameter + padding;
        const height = Math.ceil(metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent) + shadowDiameter + padding;
        draw.metrics = metrics;
        draw.rect = {
          w: width,
          h: height
        };
        rects.push(draw.rect);
      }

      const {
        w: packedWidth,
        h: packedHeight
      } = potpack(rects); // Powers of two are generally nicer when working with textures

      const canvasWidth = nextPowerOfTwo(packedWidth),
            canvasHeight = nextPowerOfTwo(packedHeight);
      this.resizeCanvas(canvasWidth, canvasHeight);
      this.clearText();
      ctx.fillStyle = 'black'; // Each draw is now { metrics: TextMetrics, rect: {w, h, x, y}, text, style }

      for (const draw of textInfos) {
        var _draw$style$shadowRad;

        const style = draw.style;
        ctx.font = "".concat(style.fontSize, "px ").concat(style.font);
        const shadowRadius = (_draw$style$shadowRad = draw.style.shadowRadius) !== null && _draw$style$shadowRad !== void 0 ? _draw$style$shadowRad : 0;
        let x = draw.rect.x + draw.metrics.actualBoundingBoxLeft + shadowRadius;
        let y = draw.rect.y + draw.metrics.actualBoundingBoxAscent + shadowRadius; // Stroke text behind the text with white

        if (shadowRadius) {
          ctx.strokeStyle = 'white';
          ctx.lineWidth = shadowRadius;
          ctx.strokeText(draw.text, x, y);
          ctx.fillStyle = 'black';
        }

        ctx.fillText(draw.text, x, y); // The actual texture coordinates used should be minus the padding (which is only used for potpack)

        draw.rect.w -= padding;
        draw.rect.h -= padding;
      }
    }

  }

  const katex=function(){return(/******/function(){// webpackBootstrap
  /******/var __webpack_require__={};/******/ /************************************************************************/ /******/ /* webpack/runtime/define property getters */ /******/!function(){/******/ // define getter functions for harmony exports
  /******/__webpack_require__.d=function(exports,definition){/******/for(var key in definition){/******/if(__webpack_require__.o(definition,key)&&!__webpack_require__.o(exports,key)){/******/Object.defineProperty(exports,key,{enumerable:true,get:definition[key]});/******/}/******/}/******/};/******/}();/******/ /******/ /* webpack/runtime/hasOwnProperty shorthand */ /******/!function(){/******/__webpack_require__.o=function(obj,prop){return Object.prototype.hasOwnProperty.call(obj,prop);};/******/}();/******/ /************************************************************************/var __webpack_exports__={};// EXPORTS
  __webpack_require__.d(__webpack_exports__,{"default":function(){return(/* binding */katex_webpack);}});/**
       * This is the ParseError class, which is the main error thrown by KaTeX
       * functions when something has gone wrong. This is used to distinguish internal
       * errors from errors in the expression that the user provided.
       *
       * If possible, a caller should provide a Token or ParseNode with information
       * about where in the source string the problem occurred.
       */var ParseError=// Error position based on passed-in Token or ParseNode.
  function ParseError(message,// The error message
  token// An object providing position information
  ){this.position=void 0;var error="KaTeX parse error: "+message;var start;var loc=token&&token.loc;if(loc&&loc.start<=loc.end){// If we have the input and a position, make the error a bit fancier
  // Get the input
  var input=loc.lexer.input;// Prepend some information
  start=loc.start;var end=loc.end;if(start===input.length){error+=" at end of input: ";}else{error+=" at position "+(start+1)+": ";}// Underline token in question using combining underscores
  var underlined=input.slice(start,end).replace(/[^]/g,"$&\u0332");// Extract some context from the input and add it to the error
  var left;if(start>15){left="…"+input.slice(start-15,start);}else{left=input.slice(0,start);}var right;if(end+15<input.length){right=input.slice(end,end+15)+"…";}else{right=input.slice(end);}error+=left+underlined+right;}// Some hackery to make ParseError a prototype of Error
  // See http://stackoverflow.com/a/8460753
  var self=new Error(error);self.name="ParseError";// $FlowFixMe
  self.__proto__=ParseError.prototype;// $FlowFixMe
  self.position=start;return self;};// $FlowFixMe More hackery
  ParseError.prototype.__proto__=Error.prototype;/* harmony default export */var src_ParseError=ParseError;/**
       * This file contains a list of utility functions which are useful in other
       * files.
       */ /**
       * Return whether an element is contained in a list
       */var contains=function contains(list,elem){return list.indexOf(elem)!==-1;};/**
       * Provide a default value if a setting is undefined
       * NOTE: Couldn't use `T` as the output type due to facebook/flow#5022.
       */var deflt=function deflt(setting,defaultIfUndefined){return setting===undefined?defaultIfUndefined:setting;};// hyphenate and escape adapted from Facebook's React under Apache 2 license
  var uppercase=/([A-Z])/g;var hyphenate=function hyphenate(str){return str.replace(uppercase,"-$1").toLowerCase();};var ESCAPE_LOOKUP={"&":"&amp;",">":"&gt;","<":"&lt;","\"":"&quot;","'":"&#x27;"};var ESCAPE_REGEX=/[&><"']/g;/**
       * Escapes text to prevent scripting attacks.
       */function utils_escape(text){return String(text).replace(ESCAPE_REGEX,function(match){return ESCAPE_LOOKUP[match];});}/**
       * Sometimes we want to pull out the innermost element of a group. In most
       * cases, this will just be the group itself, but when ordgroups and colors have
       * a single element, we want to pull that out.
       */var getBaseElem=function getBaseElem(group){if(group.type==="ordgroup"){if(group.body.length===1){return getBaseElem(group.body[0]);}else{return group;}}else if(group.type==="color"){if(group.body.length===1){return getBaseElem(group.body[0]);}else{return group;}}else if(group.type==="font"){return getBaseElem(group.body);}else{return group;}};/**
       * TeXbook algorithms often reference "character boxes", which are simply groups
       * with a single character in them. To decide if something is a character box,
       * we find its innermost group, and see if it is a single character.
       */var isCharacterBox=function isCharacterBox(group){var baseElem=getBaseElem(group);// These are all they types of groups which hold single characters
  return baseElem.type==="mathord"||baseElem.type==="textord"||baseElem.type==="atom";};var assert=function assert(value){if(!value){throw new Error('Expected non-null, but got '+String(value));}return value;};/**
       * Return the protocol of a URL, or "_relative" if the URL does not specify a
       * protocol (and thus is relative).
       */var protocolFromUrl=function protocolFromUrl(url){var protocol=/^\s*([^\\/#]*?)(?::|&#0*58|&#x0*3a)/i.exec(url);return protocol!=null?protocol[1]:"_relative";};/* harmony default export */var utils={contains:contains,deflt:deflt,escape:utils_escape,hyphenate:hyphenate,getBaseElem:getBaseElem,isCharacterBox:isCharacterBox,protocolFromUrl:protocolFromUrl};/* eslint no-console:0 */ /**
       * This is a module for storing settings passed into KaTeX. It correctly handles
       * default settings.
       */ /**
       * The main Settings object
       *
       * The current options stored are:
       *  - displayMode: Whether the expression should be typeset as inline math
       *                 (false, the default), meaning that the math starts in
       *                 \textstyle and is placed in an inline-block); or as display
       *                 math (true), meaning that the math starts in \displaystyle
       *                 and is placed in a block with vertical margin.
       */var Settings=/*#__PURE__*/function(){function Settings(options){this.displayMode=void 0;this.output=void 0;this.leqno=void 0;this.fleqn=void 0;this.throwOnError=void 0;this.errorColor=void 0;this.macros=void 0;this.minRuleThickness=void 0;this.colorIsTextColor=void 0;this.strict=void 0;this.trust=void 0;this.maxSize=void 0;this.maxExpand=void 0;this.globalGroup=void 0;// allow null options
  options=options||{};this.displayMode=utils.deflt(options.displayMode,false);this.output=utils.deflt(options.output,"htmlAndMathml");this.leqno=utils.deflt(options.leqno,false);this.fleqn=utils.deflt(options.fleqn,false);this.throwOnError=utils.deflt(options.throwOnError,true);this.errorColor=utils.deflt(options.errorColor,"#cc0000");this.macros=options.macros||{};this.minRuleThickness=Math.max(0,utils.deflt(options.minRuleThickness,0));this.colorIsTextColor=utils.deflt(options.colorIsTextColor,false);this.strict=utils.deflt(options.strict,"warn");this.trust=utils.deflt(options.trust,false);this.maxSize=Math.max(0,utils.deflt(options.maxSize,Infinity));this.maxExpand=Math.max(0,utils.deflt(options.maxExpand,1000));this.globalGroup=utils.deflt(options.globalGroup,false);}/**
         * Report nonstrict (non-LaTeX-compatible) input.
         * Can safely not be called if `this.strict` is false in JavaScript.
         */var _proto=Settings.prototype;_proto.reportNonstrict=function reportNonstrict(errorCode,errorMsg,token){var strict=this.strict;if(typeof strict==="function"){// Allow return value of strict function to be boolean or string
  // (or null/undefined, meaning no further processing).
  strict=strict(errorCode,errorMsg,token);}if(!strict||strict==="ignore"){return;}else if(strict===true||strict==="error"){throw new src_ParseError("LaTeX-incompatible input and strict mode is set to 'error': "+(errorMsg+" ["+errorCode+"]"),token);}else if(strict==="warn"){typeof console!=="undefined"&&console.warn("LaTeX-incompatible input and strict mode is set to 'warn': "+(errorMsg+" ["+errorCode+"]"));}else{// won't happen in type-safe code
  typeof console!=="undefined"&&console.warn("LaTeX-incompatible input and strict mode is set to "+("unrecognized '"+strict+"': "+errorMsg+" ["+errorCode+"]"));}}/**
         * Check whether to apply strict (LaTeX-adhering) behavior for unusual
         * input (like `\\`).  Unlike `nonstrict`, will not throw an error;
         * instead, "error" translates to a return value of `true`, while "ignore"
         * translates to a return value of `false`.  May still print a warning:
         * "warn" prints a warning and returns `false`.
         * This is for the second category of `errorCode`s listed in the README.
         */;_proto.useStrictBehavior=function useStrictBehavior(errorCode,errorMsg,token){var strict=this.strict;if(typeof strict==="function"){// Allow return value of strict function to be boolean or string
  // (or null/undefined, meaning no further processing).
  // But catch any exceptions thrown by function, treating them
  // like "error".
  try{strict=strict(errorCode,errorMsg,token);}catch(error){strict="error";}}if(!strict||strict==="ignore"){return false;}else if(strict===true||strict==="error"){return true;}else if(strict==="warn"){typeof console!=="undefined"&&console.warn("LaTeX-incompatible input and strict mode is set to 'warn': "+(errorMsg+" ["+errorCode+"]"));return false;}else{// won't happen in type-safe code
  typeof console!=="undefined"&&console.warn("LaTeX-incompatible input and strict mode is set to "+("unrecognized '"+strict+"': "+errorMsg+" ["+errorCode+"]"));return false;}}/**
         * Check whether to test potentially dangerous input, and return
         * `true` (trusted) or `false` (untrusted).  The sole argument `context`
         * should be an object with `command` field specifying the relevant LaTeX
         * command (as a string starting with `\`), and any other arguments, etc.
         * If `context` has a `url` field, a `protocol` field will automatically
         * get added by this function (changing the specified object).
         */;_proto.isTrusted=function isTrusted(context){if(context.url&&!context.protocol){context.protocol=utils.protocolFromUrl(context.url);}var trust=typeof this.trust==="function"?this.trust(context):this.trust;return Boolean(trust);};return Settings;}();/**
       * This file contains information and classes for the various kinds of styles
       * used in TeX. It provides a generic `Style` class, which holds information
       * about a specific style. It then provides instances of all the different kinds
       * of styles possible, and provides functions to move between them and get
       * information about them.
       */ /**
       * The main style class. Contains a unique id for the style, a size (which is
       * the same for cramped and uncramped version of a style), and a cramped flag.
       */var Style=/*#__PURE__*/function(){function Style(id,size,cramped){this.id=void 0;this.size=void 0;this.cramped=void 0;this.id=id;this.size=size;this.cramped=cramped;}/**
         * Get the style of a superscript given a base in the current style.
         */var _proto=Style.prototype;_proto.sup=function sup(){return styles[_sup[this.id]];}/**
         * Get the style of a subscript given a base in the current style.
         */;_proto.sub=function sub(){return styles[_sub[this.id]];}/**
         * Get the style of a fraction numerator given the fraction in the current
         * style.
         */;_proto.fracNum=function fracNum(){return styles[_fracNum[this.id]];}/**
         * Get the style of a fraction denominator given the fraction in the current
         * style.
         */;_proto.fracDen=function fracDen(){return styles[_fracDen[this.id]];}/**
         * Get the cramped version of a style (in particular, cramping a cramped style
         * doesn't change the style).
         */;_proto.cramp=function cramp(){return styles[_cramp[this.id]];}/**
         * Get a text or display version of this style.
         */;_proto.text=function text(){return styles[_text[this.id]];}/**
         * Return true if this style is tightly spaced (scriptstyle/scriptscriptstyle)
         */;_proto.isTight=function isTight(){return this.size>=2;};return Style;}();// Export an interface for type checking, but don't expose the implementation.
  // This way, no more styles can be generated.
  // IDs of the different styles
  var D=0;var Dc=1;var T=2;var Tc=3;var S=4;var Sc=5;var SS=6;var SSc=7;// Instances of the different styles
  var styles=[new Style(D,0,false),new Style(Dc,0,true),new Style(T,1,false),new Style(Tc,1,true),new Style(S,2,false),new Style(Sc,2,true),new Style(SS,3,false),new Style(SSc,3,true)];// Lookup tables for switching from one style to another
  var _sup=[S,Sc,S,Sc,SS,SSc,SS,SSc];var _sub=[Sc,Sc,Sc,Sc,SSc,SSc,SSc,SSc];var _fracNum=[T,Tc,S,Sc,SS,SSc,SS,SSc];var _fracDen=[Tc,Tc,Sc,Sc,SSc,SSc,SSc,SSc];var _cramp=[Dc,Dc,Tc,Tc,Sc,Sc,SSc,SSc];var _text=[D,Dc,T,Tc,T,Tc,T,Tc];// We only export some of the styles.
  /* harmony default export */var src_Style={DISPLAY:styles[D],TEXT:styles[T],SCRIPT:styles[S],SCRIPTSCRIPT:styles[SS]};/*
   * This file defines the Unicode scripts and script families that we
   * support. To add new scripts or families, just add a new entry to the
   * scriptData array below. Adding scripts to the scriptData array allows
   * characters from that script to appear in \text{} environments.
   */ /**
       * Each script or script family has a name and an array of blocks.
       * Each block is an array of two numbers which specify the start and
       * end points (inclusive) of a block of Unicode codepoints.
       */ /**
       * Unicode block data for the families of scripts we support in \text{}.
       * Scripts only need to appear here if they do not have font metrics.
       */var scriptData=[{// Latin characters beyond the Latin-1 characters we have metrics for.
  // Needed for Czech, Hungarian and Turkish text, for example.
  name:'latin',blocks:[[0x0100,0x024f],// Latin Extended-A and Latin Extended-B
  [0x0300,0x036f]// Combining Diacritical marks
  ]},{// The Cyrillic script used by Russian and related languages.
  // A Cyrillic subset used to be supported as explicitly defined
  // symbols in symbols.js
  name:'cyrillic',blocks:[[0x0400,0x04ff]]},{// Armenian
  name:'armenian',blocks:[[0x0530,0x058F]]},{// The Brahmic scripts of South and Southeast Asia
  // Devanagari (0900–097F)
  // Bengali (0980–09FF)
  // Gurmukhi (0A00–0A7F)
  // Gujarati (0A80–0AFF)
  // Oriya (0B00–0B7F)
  // Tamil (0B80–0BFF)
  // Telugu (0C00–0C7F)
  // Kannada (0C80–0CFF)
  // Malayalam (0D00–0D7F)
  // Sinhala (0D80–0DFF)
  // Thai (0E00–0E7F)
  // Lao (0E80–0EFF)
  // Tibetan (0F00–0FFF)
  // Myanmar (1000–109F)
  name:'brahmic',blocks:[[0x0900,0x109F]]},{name:'georgian',blocks:[[0x10A0,0x10ff]]},{// Chinese and Japanese.
  // The "k" in cjk is for Korean, but we've separated Korean out
  name:"cjk",blocks:[[0x3000,0x30FF],// CJK symbols and punctuation, Hiragana, Katakana
  [0x4E00,0x9FAF],// CJK ideograms
  [0xFF00,0xFF60]// Fullwidth punctuation
  // TODO: add halfwidth Katakana and Romanji glyphs
  ]},{// Korean
  name:'hangul',blocks:[[0xAC00,0xD7AF]]}];/**
       * Given a codepoint, return the name of the script or script family
       * it is from, or null if it is not part of a known block
       */function scriptFromCodepoint(codepoint){for(var i=0;i<scriptData.length;i++){var script=scriptData[i];for(var _i=0;_i<script.blocks.length;_i++){var block=script.blocks[_i];if(codepoint>=block[0]&&codepoint<=block[1]){return script.name;}}}return null;}/**
       * A flattened version of all the supported blocks in a single array.
       * This is an optimization to make supportedCodepoint() fast.
       */var allBlocks=[];scriptData.forEach(function(s){return s.blocks.forEach(function(b){return allBlocks.push.apply(allBlocks,b);});});/**
       * Given a codepoint, return true if it falls within one of the
       * scripts or script families defined above and false otherwise.
       *
       * Micro benchmarks shows that this is faster than
       * /[\u3000-\u30FF\u4E00-\u9FAF\uFF00-\uFF60\uAC00-\uD7AF\u0900-\u109F]/.test()
       * in Firefox, Chrome and Node.
       */function supportedCodepoint(codepoint){for(var i=0;i<allBlocks.length;i+=2){if(codepoint>=allBlocks[i]&&codepoint<=allBlocks[i+1]){return true;}}return false;}/**
       * This file provides support to domTree.js and delimiter.js.
       * It's a storehouse of path geometry for SVG images.
       */ // In all paths below, the viewBox-to-em scale is 1000:1.
  var hLinePad=80;// padding above a sqrt viniculum. Prevents image cropping.
  // The viniculum of a \sqrt can be made thicker by a KaTeX rendering option.
  // Think of variable extraViniculum as two detours in the SVG path.
  // The detour begins at the lower left of the area labeled extraViniculum below.
  // The detour proceeds one extraViniculum distance up and slightly to the right,
  // displacing the radiused corner between surd and viniculum. The radius is
  // traversed as usual, then the detour resumes. It goes right, to the end of
  // the very long viniculumn, then down one extraViniculum distance,
  // after which it resumes regular path geometry for the radical.
  /*                                                  viniculum
                                                     /
           /▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒←extraViniculum
          / █████████████████████←0.04em (40 unit) std viniculum thickness
         / /
        / /
       / /\
      / / surd
  */var sqrtMain=function sqrtMain(extraViniculum,hLinePad){// sqrtMain path geometry is from glyph U221A in the font KaTeX Main
  return "M95,"+(622+extraViniculum+hLinePad)+"\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl"+extraViniculum/2.075+" -"+extraViniculum+"\nc5.3,-9.3,12,-14,20,-14\nH400000v"+(40+extraViniculum)+"H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM"+(834+extraViniculum)+" "+hLinePad+"h400000v"+(40+extraViniculum)+"h-400000z";};var sqrtSize1=function sqrtSize1(extraViniculum,hLinePad){// size1 is from glyph U221A in the font KaTeX_Size1-Regular
  return "M263,"+(601+extraViniculum+hLinePad)+"c0.7,0,18,39.7,52,119\nc34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120\nc340,-704.7,510.7,-1060.3,512,-1067\nl"+extraViniculum/2.084+" -"+extraViniculum+"\nc4.7,-7.3,11,-11,19,-11\nH40000v"+(40+extraViniculum)+"H1012.3\ns-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232\nc-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1\ns-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26\nc-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60z\nM"+(1001+extraViniculum)+" "+hLinePad+"h400000v"+(40+extraViniculum)+"h-400000z";};var sqrtSize2=function sqrtSize2(extraViniculum,hLinePad){// size2 is from glyph U221A in the font KaTeX_Size2-Regular
  return "M983 "+(10+extraViniculum+hLinePad)+"\nl"+extraViniculum/3.13+" -"+extraViniculum+"\nc4,-6.7,10,-10,18,-10 H400000v"+(40+extraViniculum)+"\nH1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7\ns-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744\nc-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30\nc26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722\nc56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5\nc53.7,-170.3,84.5,-266.8,92.5,-289.5z\nM"+(1001+extraViniculum)+" "+hLinePad+"h400000v"+(40+extraViniculum)+"h-400000z";};var sqrtSize3=function sqrtSize3(extraViniculum,hLinePad){// size3 is from glyph U221A in the font KaTeX_Size3-Regular
  return "M424,"+(2398+extraViniculum+hLinePad)+"\nc-1.3,-0.7,-38.5,-172,-111.5,-514c-73,-342,-109.8,-513.3,-110.5,-514\nc0,-2,-10.7,14.3,-32,49c-4.7,7.3,-9.8,15.7,-15.5,25c-5.7,9.3,-9.8,16,-12.5,20\ns-5,7,-5,7c-4,-3.3,-8.3,-7.7,-13,-13s-13,-13,-13,-13s76,-122,76,-122s77,-121,77,-121\ns209,968,209,968c0,-2,84.7,-361.7,254,-1079c169.3,-717.3,254.7,-1077.7,256,-1081\nl"+extraViniculum/4.223+" -"+extraViniculum+"c4,-6.7,10,-10,18,-10 H400000\nv"+(40+extraViniculum)+"H1014.6\ns-87.3,378.7,-272.6,1166c-185.3,787.3,-279.3,1182.3,-282,1185\nc-2,6,-10,9,-24,9\nc-8,0,-12,-0.7,-12,-2z M"+(1001+extraViniculum)+" "+hLinePad+"\nh400000v"+(40+extraViniculum)+"h-400000z";};var sqrtSize4=function sqrtSize4(extraViniculum,hLinePad){// size4 is from glyph U221A in the font KaTeX_Size4-Regular
  return "M473,"+(2713+extraViniculum+hLinePad)+"\nc339.3,-1799.3,509.3,-2700,510,-2702 l"+extraViniculum/5.298+" -"+extraViniculum+"\nc3.3,-7.3,9.3,-11,18,-11 H400000v"+(40+extraViniculum)+"H1017.7\ns-90.5,478,-276.2,1466c-185.7,988,-279.5,1483,-281.5,1485c-2,6,-10,9,-24,9\nc-8,0,-12,-0.7,-12,-2c0,-1.3,-5.3,-32,-16,-92c-50.7,-293.3,-119.7,-693.3,-207,-1200\nc0,-1.3,-5.3,8.7,-16,30c-10.7,21.3,-21.3,42.7,-32,64s-16,33,-16,33s-26,-26,-26,-26\ns76,-153,76,-153s77,-151,77,-151c0.7,0.7,35.7,202,105,604c67.3,400.7,102,602.7,104,\n606zM"+(1001+extraViniculum)+" "+hLinePad+"h400000v"+(40+extraViniculum)+"H1017.7z";};var phasePath=function phasePath(y){var x=y/2;// x coordinate at top of angle
  return "M400000 "+y+" H0 L"+x+" 0 l65 45 L145 "+(y-80)+" H400000z";};var sqrtTall=function sqrtTall(extraViniculum,hLinePad,viewBoxHeight){// sqrtTall is from glyph U23B7 in the font KaTeX_Size4-Regular
  // One path edge has a variable length. It runs vertically from the viniculumn
  // to a point near (14 units) the bottom of the surd. The viniculum
  // is normally 40 units thick. So the length of the line in question is:
  var vertSegment=viewBoxHeight-54-hLinePad-extraViniculum;return "M702 "+(extraViniculum+hLinePad)+"H400000"+(40+extraViniculum)+"\nH742v"+vertSegment+"l-4 4-4 4c-.667.7 -2 1.5-4 2.5s-4.167 1.833-6.5 2.5-5.5 1-9.5 1\nh-12l-28-84c-16.667-52-96.667 -294.333-240-727l-212 -643 -85 170\nc-4-3.333-8.333-7.667-13 -13l-13-13l77-155 77-156c66 199.333 139 419.667\n219 661 l218 661zM702 "+hLinePad+"H400000v"+(40+extraViniculum)+"H742z";};var sqrtPath=function sqrtPath(size,extraViniculum,viewBoxHeight){extraViniculum=1000*extraViniculum;// Convert from document ems to viewBox.
  var path="";switch(size){case"sqrtMain":path=sqrtMain(extraViniculum,hLinePad);break;case"sqrtSize1":path=sqrtSize1(extraViniculum,hLinePad);break;case"sqrtSize2":path=sqrtSize2(extraViniculum,hLinePad);break;case"sqrtSize3":path=sqrtSize3(extraViniculum,hLinePad);break;case"sqrtSize4":path=sqrtSize4(extraViniculum,hLinePad);break;case"sqrtTall":path=sqrtTall(extraViniculum,hLinePad,viewBoxHeight);}return path;};var innerPath=function innerPath(name,height){// The inner part of stretchy tall delimiters
  switch(name){case"\u239C":return "M291 0 H417 V"+height+" H291z M291 0 H417 V"+height+" H291z";case"\u2223":return "M145 0 H188 V"+height+" H145z M145 0 H188 V"+height+" H145z";case"\u2225":return "M145 0 H188 V"+height+" H145z M145 0 H188 V"+height+" H145z"+("M367 0 H410 V"+height+" H367z M367 0 H410 V"+height+" H367z");case"\u239F":return "M457 0 H583 V"+height+" H457z M457 0 H583 V"+height+" H457z";case"\u23A2":return "M319 0 H403 V"+height+" H319z M319 0 H403 V"+height+" H319z";case"\u23A5":return "M263 0 H347 V"+height+" H263z M263 0 H347 V"+height+" H263z";case"\u23AA":return "M384 0 H504 V"+height+" H384z M384 0 H504 V"+height+" H384z";case"\u23D0":return "M312 0 H355 V"+height+" H312z M312 0 H355 V"+height+" H312z";case"\u2016":return "M257 0 H300 V"+height+" H257z M257 0 H300 V"+height+" H257z"+("M478 0 H521 V"+height+" H478z M478 0 H521 V"+height+" H478z");default:return "";}};var path={// The doubleleftarrow geometry is from glyph U+21D0 in the font KaTeX Main
  doubleleftarrow:"M262 157\nl10-10c34-36 62.7-77 86-123 3.3-8 5-13.3 5-16 0-5.3-6.7-8-20-8-7.3\n 0-12.2.5-14.5 1.5-2.3 1-4.8 4.5-7.5 10.5-49.3 97.3-121.7 169.3-217 216-28\n 14-57.3 25-88 33-6.7 2-11 3.8-13 5.5-2 1.7-3 4.2-3 7.5s1 5.8 3 7.5\nc2 1.7 6.3 3.5 13 5.5 68 17.3 128.2 47.8 180.5 91.5 52.3 43.7 93.8 96.2 124.5\n 157.5 9.3 8 15.3 12.3 18 13h6c12-.7 18-4 18-10 0-2-1.7-7-5-15-23.3-46-52-87\n-86-123l-10-10h399738v-40H218c328 0 0 0 0 0l-10-8c-26.7-20-65.7-43-117-69 2.7\n-2 6-3.7 10-5 36.7-16 72.3-37.3 107-64l10-8h399782v-40z\nm8 0v40h399730v-40zm0 194v40h399730v-40z",// doublerightarrow is from glyph U+21D2 in font KaTeX Main
  doublerightarrow:"M399738 392l\n-10 10c-34 36-62.7 77-86 123-3.3 8-5 13.3-5 16 0 5.3 6.7 8 20 8 7.3 0 12.2-.5\n 14.5-1.5 2.3-1 4.8-4.5 7.5-10.5 49.3-97.3 121.7-169.3 217-216 28-14 57.3-25 88\n-33 6.7-2 11-3.8 13-5.5 2-1.7 3-4.2 3-7.5s-1-5.8-3-7.5c-2-1.7-6.3-3.5-13-5.5-68\n-17.3-128.2-47.8-180.5-91.5-52.3-43.7-93.8-96.2-124.5-157.5-9.3-8-15.3-12.3-18\n-13h-6c-12 .7-18 4-18 10 0 2 1.7 7 5 15 23.3 46 52 87 86 123l10 10H0v40h399782\nc-328 0 0 0 0 0l10 8c26.7 20 65.7 43 117 69-2.7 2-6 3.7-10 5-36.7 16-72.3 37.3\n-107 64l-10 8H0v40zM0 157v40h399730v-40zm0 194v40h399730v-40z",// leftarrow is from glyph U+2190 in font KaTeX Main
  leftarrow:"M400000 241H110l3-3c68.7-52.7 113.7-120\n 135-202 4-14.7 6-23 6-25 0-7.3-7-11-21-11-8 0-13.2.8-15.5 2.5-2.3 1.7-4.2 5.8\n-5.5 12.5-1.3 4.7-2.7 10.3-4 17-12 48.7-34.8 92-68.5 130S65.3 228.3 18 247\nc-10 4-16 7.7-18 11 0 8.7 6 14.3 18 17 47.3 18.7 87.8 47 121.5 85S196 441.3 208\n 490c.7 2 1.3 5 2 9s1.2 6.7 1.5 8c.3 1.3 1 3.3 2 6s2.2 4.5 3.5 5.5c1.3 1 3.3\n 1.8 6 2.5s6 1 10 1c14 0 21-3.7 21-11 0-2-2-10.3-6-25-20-79.3-65-146.7-135-202\n l-3-3h399890zM100 241v40h399900v-40z",// overbrace is from glyphs U+23A9/23A8/23A7 in font KaTeX_Size4-Regular
  leftbrace:"M6 548l-6-6v-35l6-11c56-104 135.3-181.3 238-232 57.3-28.7 117\n-45 179-50h399577v120H403c-43.3 7-81 15-113 26-100.7 33-179.7 91-237 174-2.7\n 5-6 9-10 13-.7 1-7.3 1-20 1H6z",leftbraceunder:"M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13\n 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688\n 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7\n-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z",// overgroup is from the MnSymbol package (public domain)
  leftgroup:"M400000 80\nH435C64 80 168.3 229.4 21 260c-5.9 1.2-18 0-18 0-2 0-3-1-3-3v-38C76 61 257 0\n 435 0h399565z",leftgroupunder:"M400000 262\nH435C64 262 168.3 112.6 21 82c-5.9-1.2-18 0-18 0-2 0-3 1-3 3v38c76 158 257 219\n 435 219h399565z",// Harpoons are from glyph U+21BD in font KaTeX Main
  leftharpoon:"M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3\n-3.3 10.2-9.5 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5\n-18.3 3-21-1.3-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7\n-196 228-6.7 4.7-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40z",leftharpoonplus:"M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3-3.3 10.2-9.5\n 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5-18.3 3-21-1.3\n-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7-196 228-6.7 4.7\n-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40zM0 435v40h400000v-40z\nm0 0v40h400000v-40z",leftharpoondown:"M7 241c-4 4-6.333 8.667-7 14 0 5.333.667 9 2 11s5.333\n 5.333 12 10c90.667 54 156 130 196 228 3.333 10.667 6.333 16.333 9 17 2 .667 5\n 1 9 1h5c10.667 0 16.667-2 18-6 2-2.667 1-9.667-3-21-32-87.333-82.667-157.667\n-152-211l-3-3h399907v-40zM93 281 H400000 v-40L7 241z",leftharpoondownplus:"M7 435c-4 4-6.3 8.7-7 14 0 5.3.7 9 2 11s5.3 5.3 12\n 10c90.7 54 156 130 196 228 3.3 10.7 6.3 16.3 9 17 2 .7 5 1 9 1h5c10.7 0 16.7\n-2 18-6 2-2.7 1-9.7-3-21-32-87.3-82.7-157.7-152-211l-3-3h399907v-40H7zm93 0\nv40h399900v-40zM0 241v40h399900v-40zm0 0v40h399900v-40z",// hook is from glyph U+21A9 in font KaTeX Main
  lefthook:"M400000 281 H103s-33-11.2-61-33.5S0 197.3 0 164s14.2-61.2 42.5\n-83.5C70.8 58.2 104 47 142 47 c16.7 0 25 6.7 25 20 0 12-8.7 18.7-26 20-40 3.3\n-68.7 15.7-86 37-10 12-15 25.3-15 40 0 22.7 9.8 40.7 29.5 54 19.7 13.3 43.5 21\n 71.5 23h399859zM103 281v-40h399897v40z",leftlinesegment:"M40 281 V428 H0 V94 H40 V241 H400000 v40z\nM40 281 V428 H0 V94 H40 V241 H400000 v40z",leftmapsto:"M40 281 V448H0V74H40V241H400000v40z\nM40 281 V448H0V74H40V241H400000v40z",// tofrom is from glyph U+21C4 in font KaTeX AMS Regular
  leftToFrom:"M0 147h400000v40H0zm0 214c68 40 115.7 95.7 143 167h22c15.3 0 23\n-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69-70-101l-7-8h399905v-40H95l7-8\nc28.7-32 52-65.7 70-101 10.7-23.3 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 265.3\n 68 321 0 361zm0-174v-40h399900v40zm100 154v40h399900v-40z",longequal:"M0 50 h400000 v40H0z m0 194h40000v40H0z\nM0 50 h400000 v40H0z m0 194h40000v40H0z",midbrace:"M200428 334\nc-100.7-8.3-195.3-44-280-108-55.3-42-101.7-93-139-153l-9-14c-2.7 4-5.7 8.7-9 14\n-53.3 86.7-123.7 153-211 199-66.7 36-137.3 56.3-212 62H0V214h199568c178.3-11.7\n 311.7-78.3 403-201 6-8 9.7-12 11-12 .7-.7 6.7-1 18-1s17.3.3 18 1c1.3 0 5 4 11\n 12 44.7 59.3 101.3 106.3 170 141s145.3 54.3 229 60h199572v120z",midbraceunder:"M199572 214\nc100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14\n 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3\n 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0\n-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z",oiintSize1:"M512.6 71.6c272.6 0 320.3 106.8 320.3 178.2 0 70.8-47.7 177.6\n-320.3 177.6S193.1 320.6 193.1 249.8c0-71.4 46.9-178.2 319.5-178.2z\nm368.1 178.2c0-86.4-60.9-215.4-368.1-215.4-306.4 0-367.3 129-367.3 215.4 0 85.8\n60.9 214.8 367.3 214.8 307.2 0 368.1-129 368.1-214.8z",oiintSize2:"M757.8 100.1c384.7 0 451.1 137.6 451.1 230 0 91.3-66.4 228.8\n-451.1 228.8-386.3 0-452.7-137.5-452.7-228.8 0-92.4 66.4-230 452.7-230z\nm502.4 230c0-111.2-82.4-277.2-502.4-277.2s-504 166-504 277.2\nc0 110 84 276 504 276s502.4-166 502.4-276z",oiiintSize1:"M681.4 71.6c408.9 0 480.5 106.8 480.5 178.2 0 70.8-71.6 177.6\n-480.5 177.6S202.1 320.6 202.1 249.8c0-71.4 70.5-178.2 479.3-178.2z\nm525.8 178.2c0-86.4-86.8-215.4-525.7-215.4-437.9 0-524.7 129-524.7 215.4 0\n85.8 86.8 214.8 524.7 214.8 438.9 0 525.7-129 525.7-214.8z",oiiintSize2:"M1021.2 53c603.6 0 707.8 165.8 707.8 277.2 0 110-104.2 275.8\n-707.8 275.8-606 0-710.2-165.8-710.2-275.8C311 218.8 415.2 53 1021.2 53z\nm770.4 277.1c0-131.2-126.4-327.6-770.5-327.6S248.4 198.9 248.4 330.1\nc0 130 128.8 326.4 772.7 326.4s770.5-196.4 770.5-326.4z",rightarrow:"M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z",rightbrace:"M400000 542l\n-6 6h-17c-12.7 0-19.3-.3-20-1-4-4-7.3-8.3-10-13-35.3-51.3-80.8-93.8-136.5-127.5\ns-117.2-55.8-184.5-66.5c-.7 0-2-.3-4-1-18.7-2.7-76-4.3-172-5H0V214h399571l6 1\nc124.7 8 235 61.7 331 161 31.3 33.3 59.7 72.7 85 118l7 13v35z",rightbraceunder:"M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3\n 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237\n-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z",rightgroup:"M0 80h399565c371 0 266.7 149.4 414 180 5.9 1.2 18 0 18 0 2 0\n 3-1 3-3v-38c-76-158-257-219-435-219H0z",rightgroupunder:"M0 262h399565c371 0 266.7-149.4 414-180 5.9-1.2 18 0 18\n 0 2 0 3 1 3 3v38c-76 158-257 219-435 219H0z",rightharpoon:"M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3\n-3.7-15.3-11-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2\n-10.7 0-16.7 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58\n 69.2 92 94.5zm0 0v40h399900v-40z",rightharpoonplus:"M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3-3.7-15.3-11\n-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2-10.7 0-16.7\n 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58 69.2 92 94.5z\nm0 0v40h399900v-40z m100 194v40h399900v-40zm0 0v40h399900v-40z",rightharpoondown:"M399747 511c0 7.3 6.7 11 20 11 8 0 13-.8 15-2.5s4.7-6.8\n 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3 8.5-5.8 9.5\n-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3-64.7 57-92 95\n-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 241v40h399900v-40z",rightharpoondownplus:"M399747 705c0 7.3 6.7 11 20 11 8 0 13-.8\n 15-2.5s4.7-6.8 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3\n 8.5-5.8 9.5-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3\n-64.7 57-92 95-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 435v40h399900v-40z\nm0-194v40h400000v-40zm0 0v40h400000v-40z",righthook:"M399859 241c-764 0 0 0 0 0 40-3.3 68.7-15.7 86-37 10-12 15-25.3\n 15-40 0-22.7-9.8-40.7-29.5-54-19.7-13.3-43.5-21-71.5-23-17.3-1.3-26-8-26-20 0\n-13.3 8.7-20 26-20 38 0 71 11.2 99 33.5 0 0 7 5.6 21 16.7 14 11.2 21 33.5 21\n 66.8s-14 61.2-42 83.5c-28 22.3-61 33.5-99 33.5L0 241z M0 281v-40h399859v40z",rightlinesegment:"M399960 241 V94 h40 V428 h-40 V281 H0 v-40z\nM399960 241 V94 h40 V428 h-40 V281 H0 v-40z",rightToFrom:"M400000 167c-70.7-42-118-97.7-142-167h-23c-15.3 0-23 .3-23\n 1 0 1.3 5.3 13.7 16 37 18 35.3 41.3 69 70 101l7 8H0v40h399905l-7 8c-28.7 32\n-52 65.7-70 101-10.7 23.3-16 35.7-16 37 0 .7 7.7 1 23 1h23c24-69.3 71.3-125 142\n-167z M100 147v40h399900v-40zM0 341v40h399900v-40z",// twoheadleftarrow is from glyph U+219E in font KaTeX AMS Regular
  twoheadleftarrow:"M0 167c68 40\n 115.7 95.7 143 167h22c15.3 0 23-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69\n-70-101l-7-8h125l9 7c50.7 39.3 85 86 103 140h46c0-4.7-6.3-18.7-19-42-18-35.3\n-40-67.3-66-96l-9-9h399716v-40H284l9-9c26-28.7 48-60.7 66-96 12.7-23.333 19\n-37.333 19-42h-46c-18 54-52.3 100.7-103 140l-9 7H95l7-8c28.7-32 52-65.7 70-101\n 10.7-23.333 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 71.3 68 127 0 167z",twoheadrightarrow:"M400000 167\nc-68-40-115.7-95.7-143-167h-22c-15.3 0-23 .3-23 1 0 1.3 5.3 13.7 16 37 18 35.3\n 41.3 69 70 101l7 8h-125l-9-7c-50.7-39.3-85-86-103-140h-46c0 4.7 6.3 18.7 19 42\n 18 35.3 40 67.3 66 96l9 9H0v40h399716l-9 9c-26 28.7-48 60.7-66 96-12.7 23.333\n-19 37.333-19 42h46c18-54 52.3-100.7 103-140l9-7h125l-7 8c-28.7 32-52 65.7-70\n 101-10.7 23.333-16 35.7-16 37 0 .7 7.7 1 23 1h22c27.3-71.3 75-127 143-167z",// tilde1 is a modified version of a glyph from the MnSymbol package
  tilde1:"M200 55.538c-77 0-168 73.953-177 73.953-3 0-7\n-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0\n 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0\n 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128\n-68.267.847-113-73.952-191-73.952z",// ditto tilde2, tilde3, & tilde4
  tilde2:"M344 55.266c-142 0-300.638 81.316-311.5 86.418\n-8.01 3.762-22.5 10.91-23.5 5.562L1 120c-1-2-1-3-1-4 0-5 3-9 8-10l18.4-9C160.9\n 31.9 283 0 358 0c148 0 188 122 331 122s314-97 326-97c4 0 8 2 10 7l7 21.114\nc1 2.14 1 3.21 1 4.28 0 5.347-3 9.626-7 10.696l-22.3 12.622C852.6 158.372 751\n 181.476 676 181.476c-149 0-189-126.21-332-126.21z",tilde3:"M786 59C457 59 32 175.242 13 175.242c-6 0-10-3.457\n-11-10.37L.15 138c-1-7 3-12 10-13l19.2-6.4C378.4 40.7 634.3 0 804.3 0c337 0\n 411.8 157 746.8 157 328 0 754-112 773-112 5 0 10 3 11 9l1 14.075c1 8.066-.697\n 16.595-6.697 17.492l-21.052 7.31c-367.9 98.146-609.15 122.696-778.15 122.696\n -338 0-409-156.573-744-156.573z",tilde4:"M786 58C457 58 32 177.487 13 177.487c-6 0-10-3.345\n-11-10.035L.15 143c-1-7 3-12 10-13l22-6.7C381.2 35 637.15 0 807.15 0c337 0 409\n 177 744 177 328 0 754-127 773-127 5 0 10 3 11 9l1 14.794c1 7.805-3 13.38-9\n 14.495l-20.7 5.574c-366.85 99.79-607.3 139.372-776.3 139.372-338 0-409\n -175.236-744-175.236z",// vec is from glyph U+20D7 in font KaTeX Main
  vec:"M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z",// widehat1 is a modified version of a glyph from the MnSymbol package
  widehat1:"M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22\nc-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z",// ditto widehat2, widehat3, & widehat4
  widehat2:"M1181 0h2l1171 176c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 220h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",widehat3:"M1181 0h2l1171 236c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 280h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",widehat4:"M1181 0h2l1171 296c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 340h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",// widecheck paths are all inverted versions of widehat
  widecheck1:"M529,159h5l519,-115c5,-1,9,-5,9,-10c0,-1,-1,-2,-1,-3l-4,-22c-1,\n-5,-5,-9,-11,-9h-2l-512,92l-513,-92h-2c-5,0,-9,4,-11,9l-5,22c-1,6,2,12,8,13z",widecheck2:"M1181,220h2l1171,-176c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,153l-1167,-153h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",widecheck3:"M1181,280h2l1171,-236c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,213l-1167,-213h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",widecheck4:"M1181,340h2l1171,-296c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,273l-1167,-273h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",// The next ten paths support reaction arrows from the mhchem package.
  // Arrows for \ce{<-->} are offset from xAxis by 0.22ex, per mhchem in LaTeX
  // baraboveleftarrow is mostly from from glyph U+2190 in font KaTeX Main
  baraboveleftarrow:"M400000 620h-399890l3 -3c68.7 -52.7 113.7 -120 135 -202\nc4 -14.7 6 -23 6 -25c0 -7.3 -7 -11 -21 -11c-8 0 -13.2 0.8 -15.5 2.5\nc-2.3 1.7 -4.2 5.8 -5.5 12.5c-1.3 4.7 -2.7 10.3 -4 17c-12 48.7 -34.8 92 -68.5 130\ns-74.2 66.3 -121.5 85c-10 4 -16 7.7 -18 11c0 8.7 6 14.3 18 17c47.3 18.7 87.8 47\n121.5 85s56.5 81.3 68.5 130c0.7 2 1.3 5 2 9s1.2 6.7 1.5 8c0.3 1.3 1 3.3 2 6\ns2.2 4.5 3.5 5.5c1.3 1 3.3 1.8 6 2.5s6 1 10 1c14 0 21 -3.7 21 -11\nc0 -2 -2 -10.3 -6 -25c-20 -79.3 -65 -146.7 -135 -202l-3 -3h399890z\nM100 620v40h399900v-40z M0 241v40h399900v-40zM0 241v40h399900v-40z",// rightarrowabovebar is mostly from glyph U+2192, KaTeX Main
  rightarrowabovebar:"M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32\n-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0\n13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39\n-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5\n-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n151.7 139 205zm96 379h399894v40H0zm0 0h399904v40H0z",// The short left harpoon has 0.5em (i.e. 500 units) kern on the left end.
  // Ref from mhchem.sty: \rlap{\raisebox{-.22ex}{$\kern0.5em
  baraboveshortleftharpoon:"M507,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11\nc1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17\nc2,0.7,5,1,9,1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21\nc-32,-87.3,-82.7,-157.7,-152,-211c0,0,-3,-3,-3,-3l399351,0l0,-40\nc-398570,0,-399437,0,-399437,0z M593 435 v40 H399500 v-40z\nM0 281 v-40 H399908 v40z M0 281 v-40 H399908 v40z",rightharpoonaboveshortbar:"M0,241 l0,40c399126,0,399993,0,399993,0\nc4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,\n-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6\nc-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z\nM0 241 v40 H399908 v-40z M0 475 v-40 H399500 v40z M0 475 v-40 H399500 v40z",shortbaraboveleftharpoon:"M7,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11\nc1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17c2,0.7,5,1,9,\n1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21c-32,-87.3,-82.7,-157.7,\n-152,-211c0,0,-3,-3,-3,-3l399907,0l0,-40c-399126,0,-399993,0,-399993,0z\nM93 435 v40 H400000 v-40z M500 241 v40 H400000 v-40z M500 241 v40 H400000 v-40z",shortrightharpoonabovebar:"M53,241l0,40c398570,0,399437,0,399437,0\nc4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,\n-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6\nc-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z\nM500 241 v40 H399408 v-40z M500 435 v40 H400000 v-40z"};/**
       * This node represents a document fragment, which contains elements, but when
       * placed into the DOM doesn't have any representation itself. It only contains
       * children and doesn't have any DOM node properties.
       */var DocumentFragment=/*#__PURE__*/function(){// HtmlDomNode
  // Never used; needed for satisfying interface.
  function DocumentFragment(children){this.children=void 0;this.classes=void 0;this.height=void 0;this.depth=void 0;this.maxFontSize=void 0;this.style=void 0;this.children=children;this.classes=[];this.height=0;this.depth=0;this.maxFontSize=0;this.style={};}var _proto=DocumentFragment.prototype;_proto.hasClass=function hasClass(className){return utils.contains(this.classes,className);}/** Convert the fragment into a node. */;_proto.toNode=function toNode(){var frag=document.createDocumentFragment();for(var i=0;i<this.children.length;i++){frag.appendChild(this.children[i].toNode());}return frag;}/** Convert the fragment into HTML markup. */;_proto.toMarkup=function toMarkup(){var markup="";// Simply concatenate the markup for the children together.
  for(var i=0;i<this.children.length;i++){markup+=this.children[i].toMarkup();}return markup;}/**
         * Converts the math node into a string, similar to innerText. Applies to
         * MathDomNode's only.
         */;_proto.toText=function toText(){// To avoid this, we would subclass documentFragment separately for
  // MathML, but polyfills for subclassing is expensive per PR 1469.
  // $FlowFixMe: Only works for ChildType = MathDomNode.
  var toText=function toText(child){return child.toText();};return this.children.map(toText).join("");};return DocumentFragment;}();/**
       * These objects store the data about the DOM nodes we create, as well as some
       * extra data. They can then be transformed into real DOM nodes with the
       * `toNode` function or HTML markup using `toMarkup`. They are useful for both
       * storing extra properties on the nodes, as well as providing a way to easily
       * work with the DOM.
       *
       * Similar functions for working with MathML nodes exist in mathMLTree.js.
       *
       * TODO: refactor `span` and `anchor` into common superclass when
       * target environments support class inheritance
       */ /**
       * Create an HTML className based on a list of classes. In addition to joining
       * with spaces, we also remove empty classes.
       */var createClass=function createClass(classes){return classes.filter(function(cls){return cls;}).join(" ");};var initNode=function initNode(classes,options,style){this.classes=classes||[];this.attributes={};this.height=0;this.depth=0;this.maxFontSize=0;this.style=style||{};if(options){if(options.style.isTight()){this.classes.push("mtight");}var color=options.getColor();if(color){this.style.color=color;}}};/**
       * Convert into an HTML node
       */var _toNode=function toNode(tagName){var node=document.createElement(tagName);// Apply the class
  node.className=createClass(this.classes);// Apply inline styles
  for(var style in this.style){if(this.style.hasOwnProperty(style)){// $FlowFixMe Flow doesn't seem to understand span.style's type.
  node.style[style]=this.style[style];}}// Apply attributes
  for(var attr in this.attributes){if(this.attributes.hasOwnProperty(attr)){node.setAttribute(attr,this.attributes[attr]);}}// Append the children, also as HTML nodes
  for(var i=0;i<this.children.length;i++){node.appendChild(this.children[i].toNode());}return node;};/**
       * Convert into an HTML markup string
       */var _toMarkup=function toMarkup(tagName){var markup="<"+tagName;// Add the class
  if(this.classes.length){markup+=" class=\""+utils.escape(createClass(this.classes))+"\"";}var styles="";// Add the styles, after hyphenation
  for(var style in this.style){if(this.style.hasOwnProperty(style)){styles+=utils.hyphenate(style)+":"+this.style[style]+";";}}if(styles){markup+=" style=\""+utils.escape(styles)+"\"";}// Add the attributes
  for(var attr in this.attributes){if(this.attributes.hasOwnProperty(attr)){markup+=" "+attr+"=\""+utils.escape(this.attributes[attr])+"\"";}}markup+=">";// Add the markup of the children, also as markup
  for(var i=0;i<this.children.length;i++){markup+=this.children[i].toMarkup();}markup+="</"+tagName+">";return markup;};// Making the type below exact with all optional fields doesn't work due to
  // - https://github.com/facebook/flow/issues/4582
  // - https://github.com/facebook/flow/issues/5688
  // However, since *all* fields are optional, $Shape<> works as suggested in 5688
  // above.
  // This type does not include all CSS properties. Additional properties should
  // be added as needed.
  /**
       * This node represents a span node, with a className, a list of children, and
       * an inline style. It also contains information about its height, depth, and
       * maxFontSize.
       *
       * Represents two types with different uses: SvgSpan to wrap an SVG and DomSpan
       * otherwise. This typesafety is important when HTML builders access a span's
       * children.
       */var Span=/*#__PURE__*/function(){function Span(classes,children,options,style){this.children=void 0;this.attributes=void 0;this.classes=void 0;this.height=void 0;this.depth=void 0;this.width=void 0;this.maxFontSize=void 0;this.style=void 0;initNode.call(this,classes,options,style);this.children=children||[];}/**
         * Sets an arbitrary attribute on the span. Warning: use this wisely. Not
         * all browsers support attributes the same, and having too many custom
         * attributes is probably bad.
         */var _proto=Span.prototype;_proto.setAttribute=function setAttribute(attribute,value){this.attributes[attribute]=value;};_proto.hasClass=function hasClass(className){return utils.contains(this.classes,className);};_proto.toNode=function toNode(){return _toNode.call(this,"span");};_proto.toMarkup=function toMarkup(){return _toMarkup.call(this,"span");};return Span;}();/**
       * This node represents an anchor (<a>) element with a hyperlink.  See `span`
       * for further details.
       */var Anchor=/*#__PURE__*/function(){function Anchor(href,classes,children,options){this.children=void 0;this.attributes=void 0;this.classes=void 0;this.height=void 0;this.depth=void 0;this.maxFontSize=void 0;this.style=void 0;initNode.call(this,classes,options);this.children=children||[];this.setAttribute('href',href);}var _proto2=Anchor.prototype;_proto2.setAttribute=function setAttribute(attribute,value){this.attributes[attribute]=value;};_proto2.hasClass=function hasClass(className){return utils.contains(this.classes,className);};_proto2.toNode=function toNode(){return _toNode.call(this,"a");};_proto2.toMarkup=function toMarkup(){return _toMarkup.call(this,"a");};return Anchor;}();/**
       * This node represents an image embed (<img>) element.
       */var Img=/*#__PURE__*/function(){function Img(src,alt,style){this.src=void 0;this.alt=void 0;this.classes=void 0;this.height=void 0;this.depth=void 0;this.maxFontSize=void 0;this.style=void 0;this.alt=alt;this.src=src;this.classes=["mord"];this.style=style;}var _proto3=Img.prototype;_proto3.hasClass=function hasClass(className){return utils.contains(this.classes,className);};_proto3.toNode=function toNode(){var node=document.createElement("img");node.src=this.src;node.alt=this.alt;node.className="mord";// Apply inline styles
  for(var style in this.style){if(this.style.hasOwnProperty(style)){// $FlowFixMe
  node.style[style]=this.style[style];}}return node;};_proto3.toMarkup=function toMarkup(){var markup="<img  src='"+this.src+" 'alt='"+this.alt+"' ";// Add the styles, after hyphenation
  var styles="";for(var style in this.style){if(this.style.hasOwnProperty(style)){styles+=utils.hyphenate(style)+":"+this.style[style]+";";}}if(styles){markup+=" style=\""+utils.escape(styles)+"\"";}markup+="'/>";return markup;};return Img;}();var iCombinations={'î':"\u0131\u0302",'ï':"\u0131\u0308",'í':"\u0131\u0301",// 'ī': '\u0131\u0304', // enable when we add Extended Latin
  'ì':"\u0131\u0300"};/**
       * A symbol node contains information about a single symbol. It either renders
       * to a single text node, or a span with a single text node in it, depending on
       * whether it has CSS classes, styles, or needs italic correction.
       */var SymbolNode=/*#__PURE__*/function(){function SymbolNode(text,height,depth,italic,skew,width,classes,style){this.text=void 0;this.height=void 0;this.depth=void 0;this.italic=void 0;this.skew=void 0;this.width=void 0;this.maxFontSize=void 0;this.classes=void 0;this.style=void 0;this.text=text;this.height=height||0;this.depth=depth||0;this.italic=italic||0;this.skew=skew||0;this.width=width||0;this.classes=classes||[];this.style=style||{};this.maxFontSize=0;// Mark text from non-Latin scripts with specific classes so that we
  // can specify which fonts to use.  This allows us to render these
  // characters with a serif font in situations where the browser would
  // either default to a sans serif or render a placeholder character.
  // We use CSS class names like cjk_fallback, hangul_fallback and
  // brahmic_fallback. See ./unicodeScripts.js for the set of possible
  // script names
  var script=scriptFromCodepoint(this.text.charCodeAt(0));if(script){this.classes.push(script+"_fallback");}if(/[îïíì]/.test(this.text)){// add ī when we add Extended Latin
  this.text=iCombinations[this.text];}}var _proto4=SymbolNode.prototype;_proto4.hasClass=function hasClass(className){return utils.contains(this.classes,className);}/**
         * Creates a text node or span from a symbol node. Note that a span is only
         * created if it is needed.
         */;_proto4.toNode=function toNode(){var node=document.createTextNode(this.text);var span=null;if(this.italic>0){span=document.createElement("span");span.style.marginRight=this.italic+"em";}if(this.classes.length>0){span=span||document.createElement("span");span.className=createClass(this.classes);}for(var style in this.style){if(this.style.hasOwnProperty(style)){span=span||document.createElement("span");// $FlowFixMe Flow doesn't seem to understand span.style's type.
  span.style[style]=this.style[style];}}if(span){span.appendChild(node);return span;}else{return node;}}/**
         * Creates markup for a symbol node.
         */;_proto4.toMarkup=function toMarkup(){// TODO(alpert): More duplication than I'd like from
  // span.prototype.toMarkup and symbolNode.prototype.toNode...
  var needsSpan=false;var markup="<span";if(this.classes.length){needsSpan=true;markup+=" class=\"";markup+=utils.escape(createClass(this.classes));markup+="\"";}var styles="";if(this.italic>0){styles+="margin-right:"+this.italic+"em;";}for(var style in this.style){if(this.style.hasOwnProperty(style)){styles+=utils.hyphenate(style)+":"+this.style[style]+";";}}if(styles){needsSpan=true;markup+=" style=\""+utils.escape(styles)+"\"";}var escaped=utils.escape(this.text);if(needsSpan){markup+=">";markup+=escaped;markup+="</span>";return markup;}else{return escaped;}};return SymbolNode;}();/**
       * SVG nodes are used to render stretchy wide elements.
       */var SvgNode=/*#__PURE__*/function(){function SvgNode(children,attributes){this.children=void 0;this.attributes=void 0;this.children=children||[];this.attributes=attributes||{};}var _proto5=SvgNode.prototype;_proto5.toNode=function toNode(){var svgNS="http://www.w3.org/2000/svg";var node=document.createElementNS(svgNS,"svg");// Apply attributes
  for(var attr in this.attributes){if(Object.prototype.hasOwnProperty.call(this.attributes,attr)){node.setAttribute(attr,this.attributes[attr]);}}for(var i=0;i<this.children.length;i++){node.appendChild(this.children[i].toNode());}return node;};_proto5.toMarkup=function toMarkup(){var markup="<svg xmlns=\"http://www.w3.org/2000/svg\"";// Apply attributes
  for(var attr in this.attributes){if(Object.prototype.hasOwnProperty.call(this.attributes,attr)){markup+=" "+attr+"='"+this.attributes[attr]+"'";}}markup+=">";for(var i=0;i<this.children.length;i++){markup+=this.children[i].toMarkup();}markup+="</svg>";return markup;};return SvgNode;}();var PathNode=/*#__PURE__*/function(){function PathNode(pathName,alternate){this.pathName=void 0;this.alternate=void 0;this.pathName=pathName;this.alternate=alternate;// Used only for \sqrt, \phase, & tall delims
  }var _proto6=PathNode.prototype;_proto6.toNode=function toNode(){var svgNS="http://www.w3.org/2000/svg";var node=document.createElementNS(svgNS,"path");if(this.alternate){node.setAttribute("d",this.alternate);}else{node.setAttribute("d",path[this.pathName]);}return node;};_proto6.toMarkup=function toMarkup(){if(this.alternate){return "<path d='"+this.alternate+"'/>";}else{return "<path d='"+path[this.pathName]+"'/>";}};return PathNode;}();var LineNode=/*#__PURE__*/function(){function LineNode(attributes){this.attributes=void 0;this.attributes=attributes||{};}var _proto7=LineNode.prototype;_proto7.toNode=function toNode(){var svgNS="http://www.w3.org/2000/svg";var node=document.createElementNS(svgNS,"line");// Apply attributes
  for(var attr in this.attributes){if(Object.prototype.hasOwnProperty.call(this.attributes,attr)){node.setAttribute(attr,this.attributes[attr]);}}return node;};_proto7.toMarkup=function toMarkup(){var markup="<line";for(var attr in this.attributes){if(Object.prototype.hasOwnProperty.call(this.attributes,attr)){markup+=" "+attr+"='"+this.attributes[attr]+"'";}}markup+="/>";return markup;};return LineNode;}();function assertSymbolDomNode(group){if(group instanceof SymbolNode){return group;}else{throw new Error("Expected symbolNode but got "+String(group)+".");}}function assertSpan(group){if(group instanceof Span){return group;}else{throw new Error("Expected span<HtmlDomNode> but got "+String(group)+".");}}// This file is GENERATED by buildMetrics.sh. DO NOT MODIFY.
  /* harmony default export */var fontMetricsData={"AMS-Regular":{"32":[0,0,0,0,0.25],"65":[0,0.68889,0,0,0.72222],"66":[0,0.68889,0,0,0.66667],"67":[0,0.68889,0,0,0.72222],"68":[0,0.68889,0,0,0.72222],"69":[0,0.68889,0,0,0.66667],"70":[0,0.68889,0,0,0.61111],"71":[0,0.68889,0,0,0.77778],"72":[0,0.68889,0,0,0.77778],"73":[0,0.68889,0,0,0.38889],"74":[0.16667,0.68889,0,0,0.5],"75":[0,0.68889,0,0,0.77778],"76":[0,0.68889,0,0,0.66667],"77":[0,0.68889,0,0,0.94445],"78":[0,0.68889,0,0,0.72222],"79":[0.16667,0.68889,0,0,0.77778],"80":[0,0.68889,0,0,0.61111],"81":[0.16667,0.68889,0,0,0.77778],"82":[0,0.68889,0,0,0.72222],"83":[0,0.68889,0,0,0.55556],"84":[0,0.68889,0,0,0.66667],"85":[0,0.68889,0,0,0.72222],"86":[0,0.68889,0,0,0.72222],"87":[0,0.68889,0,0,1.0],"88":[0,0.68889,0,0,0.72222],"89":[0,0.68889,0,0,0.72222],"90":[0,0.68889,0,0,0.66667],"107":[0,0.68889,0,0,0.55556],"160":[0,0,0,0,0.25],"165":[0,0.675,0.025,0,0.75],"174":[0.15559,0.69224,0,0,0.94666],"240":[0,0.68889,0,0,0.55556],"295":[0,0.68889,0,0,0.54028],"710":[0,0.825,0,0,2.33334],"732":[0,0.9,0,0,2.33334],"770":[0,0.825,0,0,2.33334],"771":[0,0.9,0,0,2.33334],"989":[0.08167,0.58167,0,0,0.77778],"1008":[0,0.43056,0.04028,0,0.66667],"8245":[0,0.54986,0,0,0.275],"8463":[0,0.68889,0,0,0.54028],"8487":[0,0.68889,0,0,0.72222],"8498":[0,0.68889,0,0,0.55556],"8502":[0,0.68889,0,0,0.66667],"8503":[0,0.68889,0,0,0.44445],"8504":[0,0.68889,0,0,0.66667],"8513":[0,0.68889,0,0,0.63889],"8592":[-0.03598,0.46402,0,0,0.5],"8594":[-0.03598,0.46402,0,0,0.5],"8602":[-0.13313,0.36687,0,0,1.0],"8603":[-0.13313,0.36687,0,0,1.0],"8606":[0.01354,0.52239,0,0,1.0],"8608":[0.01354,0.52239,0,0,1.0],"8610":[0.01354,0.52239,0,0,1.11111],"8611":[0.01354,0.52239,0,0,1.11111],"8619":[0,0.54986,0,0,1.0],"8620":[0,0.54986,0,0,1.0],"8621":[-0.13313,0.37788,0,0,1.38889],"8622":[-0.13313,0.36687,0,0,1.0],"8624":[0,0.69224,0,0,0.5],"8625":[0,0.69224,0,0,0.5],"8630":[0,0.43056,0,0,1.0],"8631":[0,0.43056,0,0,1.0],"8634":[0.08198,0.58198,0,0,0.77778],"8635":[0.08198,0.58198,0,0,0.77778],"8638":[0.19444,0.69224,0,0,0.41667],"8639":[0.19444,0.69224,0,0,0.41667],"8642":[0.19444,0.69224,0,0,0.41667],"8643":[0.19444,0.69224,0,0,0.41667],"8644":[0.1808,0.675,0,0,1.0],"8646":[0.1808,0.675,0,0,1.0],"8647":[0.1808,0.675,0,0,1.0],"8648":[0.19444,0.69224,0,0,0.83334],"8649":[0.1808,0.675,0,0,1.0],"8650":[0.19444,0.69224,0,0,0.83334],"8651":[0.01354,0.52239,0,0,1.0],"8652":[0.01354,0.52239,0,0,1.0],"8653":[-0.13313,0.36687,0,0,1.0],"8654":[-0.13313,0.36687,0,0,1.0],"8655":[-0.13313,0.36687,0,0,1.0],"8666":[0.13667,0.63667,0,0,1.0],"8667":[0.13667,0.63667,0,0,1.0],"8669":[-0.13313,0.37788,0,0,1.0],"8672":[-0.064,0.437,0,0,1.334],"8674":[-0.064,0.437,0,0,1.334],"8705":[0,0.825,0,0,0.5],"8708":[0,0.68889,0,0,0.55556],"8709":[0.08167,0.58167,0,0,0.77778],"8717":[0,0.43056,0,0,0.42917],"8722":[-0.03598,0.46402,0,0,0.5],"8724":[0.08198,0.69224,0,0,0.77778],"8726":[0.08167,0.58167,0,0,0.77778],"8733":[0,0.69224,0,0,0.77778],"8736":[0,0.69224,0,0,0.72222],"8737":[0,0.69224,0,0,0.72222],"8738":[0.03517,0.52239,0,0,0.72222],"8739":[0.08167,0.58167,0,0,0.22222],"8740":[0.25142,0.74111,0,0,0.27778],"8741":[0.08167,0.58167,0,0,0.38889],"8742":[0.25142,0.74111,0,0,0.5],"8756":[0,0.69224,0,0,0.66667],"8757":[0,0.69224,0,0,0.66667],"8764":[-0.13313,0.36687,0,0,0.77778],"8765":[-0.13313,0.37788,0,0,0.77778],"8769":[-0.13313,0.36687,0,0,0.77778],"8770":[-0.03625,0.46375,0,0,0.77778],"8774":[0.30274,0.79383,0,0,0.77778],"8776":[-0.01688,0.48312,0,0,0.77778],"8778":[0.08167,0.58167,0,0,0.77778],"8782":[0.06062,0.54986,0,0,0.77778],"8783":[0.06062,0.54986,0,0,0.77778],"8785":[0.08198,0.58198,0,0,0.77778],"8786":[0.08198,0.58198,0,0,0.77778],"8787":[0.08198,0.58198,0,0,0.77778],"8790":[0,0.69224,0,0,0.77778],"8791":[0.22958,0.72958,0,0,0.77778],"8796":[0.08198,0.91667,0,0,0.77778],"8806":[0.25583,0.75583,0,0,0.77778],"8807":[0.25583,0.75583,0,0,0.77778],"8808":[0.25142,0.75726,0,0,0.77778],"8809":[0.25142,0.75726,0,0,0.77778],"8812":[0.25583,0.75583,0,0,0.5],"8814":[0.20576,0.70576,0,0,0.77778],"8815":[0.20576,0.70576,0,0,0.77778],"8816":[0.30274,0.79383,0,0,0.77778],"8817":[0.30274,0.79383,0,0,0.77778],"8818":[0.22958,0.72958,0,0,0.77778],"8819":[0.22958,0.72958,0,0,0.77778],"8822":[0.1808,0.675,0,0,0.77778],"8823":[0.1808,0.675,0,0,0.77778],"8828":[0.13667,0.63667,0,0,0.77778],"8829":[0.13667,0.63667,0,0,0.77778],"8830":[0.22958,0.72958,0,0,0.77778],"8831":[0.22958,0.72958,0,0,0.77778],"8832":[0.20576,0.70576,0,0,0.77778],"8833":[0.20576,0.70576,0,0,0.77778],"8840":[0.30274,0.79383,0,0,0.77778],"8841":[0.30274,0.79383,0,0,0.77778],"8842":[0.13597,0.63597,0,0,0.77778],"8843":[0.13597,0.63597,0,0,0.77778],"8847":[0.03517,0.54986,0,0,0.77778],"8848":[0.03517,0.54986,0,0,0.77778],"8858":[0.08198,0.58198,0,0,0.77778],"8859":[0.08198,0.58198,0,0,0.77778],"8861":[0.08198,0.58198,0,0,0.77778],"8862":[0,0.675,0,0,0.77778],"8863":[0,0.675,0,0,0.77778],"8864":[0,0.675,0,0,0.77778],"8865":[0,0.675,0,0,0.77778],"8872":[0,0.69224,0,0,0.61111],"8873":[0,0.69224,0,0,0.72222],"8874":[0,0.69224,0,0,0.88889],"8876":[0,0.68889,0,0,0.61111],"8877":[0,0.68889,0,0,0.61111],"8878":[0,0.68889,0,0,0.72222],"8879":[0,0.68889,0,0,0.72222],"8882":[0.03517,0.54986,0,0,0.77778],"8883":[0.03517,0.54986,0,0,0.77778],"8884":[0.13667,0.63667,0,0,0.77778],"8885":[0.13667,0.63667,0,0,0.77778],"8888":[0,0.54986,0,0,1.11111],"8890":[0.19444,0.43056,0,0,0.55556],"8891":[0.19444,0.69224,0,0,0.61111],"8892":[0.19444,0.69224,0,0,0.61111],"8901":[0,0.54986,0,0,0.27778],"8903":[0.08167,0.58167,0,0,0.77778],"8905":[0.08167,0.58167,0,0,0.77778],"8906":[0.08167,0.58167,0,0,0.77778],"8907":[0,0.69224,0,0,0.77778],"8908":[0,0.69224,0,0,0.77778],"8909":[-0.03598,0.46402,0,0,0.77778],"8910":[0,0.54986,0,0,0.76042],"8911":[0,0.54986,0,0,0.76042],"8912":[0.03517,0.54986,0,0,0.77778],"8913":[0.03517,0.54986,0,0,0.77778],"8914":[0,0.54986,0,0,0.66667],"8915":[0,0.54986,0,0,0.66667],"8916":[0,0.69224,0,0,0.66667],"8918":[0.0391,0.5391,0,0,0.77778],"8919":[0.0391,0.5391,0,0,0.77778],"8920":[0.03517,0.54986,0,0,1.33334],"8921":[0.03517,0.54986,0,0,1.33334],"8922":[0.38569,0.88569,0,0,0.77778],"8923":[0.38569,0.88569,0,0,0.77778],"8926":[0.13667,0.63667,0,0,0.77778],"8927":[0.13667,0.63667,0,0,0.77778],"8928":[0.30274,0.79383,0,0,0.77778],"8929":[0.30274,0.79383,0,0,0.77778],"8934":[0.23222,0.74111,0,0,0.77778],"8935":[0.23222,0.74111,0,0,0.77778],"8936":[0.23222,0.74111,0,0,0.77778],"8937":[0.23222,0.74111,0,0,0.77778],"8938":[0.20576,0.70576,0,0,0.77778],"8939":[0.20576,0.70576,0,0,0.77778],"8940":[0.30274,0.79383,0,0,0.77778],"8941":[0.30274,0.79383,0,0,0.77778],"8994":[0.19444,0.69224,0,0,0.77778],"8995":[0.19444,0.69224,0,0,0.77778],"9416":[0.15559,0.69224,0,0,0.90222],"9484":[0,0.69224,0,0,0.5],"9488":[0,0.69224,0,0,0.5],"9492":[0,0.37788,0,0,0.5],"9496":[0,0.37788,0,0,0.5],"9585":[0.19444,0.68889,0,0,0.88889],"9586":[0.19444,0.74111,0,0,0.88889],"9632":[0,0.675,0,0,0.77778],"9633":[0,0.675,0,0,0.77778],"9650":[0,0.54986,0,0,0.72222],"9651":[0,0.54986,0,0,0.72222],"9654":[0.03517,0.54986,0,0,0.77778],"9660":[0,0.54986,0,0,0.72222],"9661":[0,0.54986,0,0,0.72222],"9664":[0.03517,0.54986,0,0,0.77778],"9674":[0.11111,0.69224,0,0,0.66667],"9733":[0.19444,0.69224,0,0,0.94445],"10003":[0,0.69224,0,0,0.83334],"10016":[0,0.69224,0,0,0.83334],"10731":[0.11111,0.69224,0,0,0.66667],"10846":[0.19444,0.75583,0,0,0.61111],"10877":[0.13667,0.63667,0,0,0.77778],"10878":[0.13667,0.63667,0,0,0.77778],"10885":[0.25583,0.75583,0,0,0.77778],"10886":[0.25583,0.75583,0,0,0.77778],"10887":[0.13597,0.63597,0,0,0.77778],"10888":[0.13597,0.63597,0,0,0.77778],"10889":[0.26167,0.75726,0,0,0.77778],"10890":[0.26167,0.75726,0,0,0.77778],"10891":[0.48256,0.98256,0,0,0.77778],"10892":[0.48256,0.98256,0,0,0.77778],"10901":[0.13667,0.63667,0,0,0.77778],"10902":[0.13667,0.63667,0,0,0.77778],"10933":[0.25142,0.75726,0,0,0.77778],"10934":[0.25142,0.75726,0,0,0.77778],"10935":[0.26167,0.75726,0,0,0.77778],"10936":[0.26167,0.75726,0,0,0.77778],"10937":[0.26167,0.75726,0,0,0.77778],"10938":[0.26167,0.75726,0,0,0.77778],"10949":[0.25583,0.75583,0,0,0.77778],"10950":[0.25583,0.75583,0,0,0.77778],"10955":[0.28481,0.79383,0,0,0.77778],"10956":[0.28481,0.79383,0,0,0.77778],"57350":[0.08167,0.58167,0,0,0.22222],"57351":[0.08167,0.58167,0,0,0.38889],"57352":[0.08167,0.58167,0,0,0.77778],"57353":[0,0.43056,0.04028,0,0.66667],"57356":[0.25142,0.75726,0,0,0.77778],"57357":[0.25142,0.75726,0,0,0.77778],"57358":[0.41951,0.91951,0,0,0.77778],"57359":[0.30274,0.79383,0,0,0.77778],"57360":[0.30274,0.79383,0,0,0.77778],"57361":[0.41951,0.91951,0,0,0.77778],"57366":[0.25142,0.75726,0,0,0.77778],"57367":[0.25142,0.75726,0,0,0.77778],"57368":[0.25142,0.75726,0,0,0.77778],"57369":[0.25142,0.75726,0,0,0.77778],"57370":[0.13597,0.63597,0,0,0.77778],"57371":[0.13597,0.63597,0,0,0.77778]},"Caligraphic-Regular":{"32":[0,0,0,0,0.25],"65":[0,0.68333,0,0.19445,0.79847],"66":[0,0.68333,0.03041,0.13889,0.65681],"67":[0,0.68333,0.05834,0.13889,0.52653],"68":[0,0.68333,0.02778,0.08334,0.77139],"69":[0,0.68333,0.08944,0.11111,0.52778],"70":[0,0.68333,0.09931,0.11111,0.71875],"71":[0.09722,0.68333,0.0593,0.11111,0.59487],"72":[0,0.68333,0.00965,0.11111,0.84452],"73":[0,0.68333,0.07382,0,0.54452],"74":[0.09722,0.68333,0.18472,0.16667,0.67778],"75":[0,0.68333,0.01445,0.05556,0.76195],"76":[0,0.68333,0,0.13889,0.68972],"77":[0,0.68333,0,0.13889,1.2009],"78":[0,0.68333,0.14736,0.08334,0.82049],"79":[0,0.68333,0.02778,0.11111,0.79611],"80":[0,0.68333,0.08222,0.08334,0.69556],"81":[0.09722,0.68333,0,0.11111,0.81667],"82":[0,0.68333,0,0.08334,0.8475],"83":[0,0.68333,0.075,0.13889,0.60556],"84":[0,0.68333,0.25417,0,0.54464],"85":[0,0.68333,0.09931,0.08334,0.62583],"86":[0,0.68333,0.08222,0,0.61278],"87":[0,0.68333,0.08222,0.08334,0.98778],"88":[0,0.68333,0.14643,0.13889,0.7133],"89":[0.09722,0.68333,0.08222,0.08334,0.66834],"90":[0,0.68333,0.07944,0.13889,0.72473],"160":[0,0,0,0,0.25]},"Fraktur-Regular":{"32":[0,0,0,0,0.25],"33":[0,0.69141,0,0,0.29574],"34":[0,0.69141,0,0,0.21471],"38":[0,0.69141,0,0,0.73786],"39":[0,0.69141,0,0,0.21201],"40":[0.24982,0.74947,0,0,0.38865],"41":[0.24982,0.74947,0,0,0.38865],"42":[0,0.62119,0,0,0.27764],"43":[0.08319,0.58283,0,0,0.75623],"44":[0,0.10803,0,0,0.27764],"45":[0.08319,0.58283,0,0,0.75623],"46":[0,0.10803,0,0,0.27764],"47":[0.24982,0.74947,0,0,0.50181],"48":[0,0.47534,0,0,0.50181],"49":[0,0.47534,0,0,0.50181],"50":[0,0.47534,0,0,0.50181],"51":[0.18906,0.47534,0,0,0.50181],"52":[0.18906,0.47534,0,0,0.50181],"53":[0.18906,0.47534,0,0,0.50181],"54":[0,0.69141,0,0,0.50181],"55":[0.18906,0.47534,0,0,0.50181],"56":[0,0.69141,0,0,0.50181],"57":[0.18906,0.47534,0,0,0.50181],"58":[0,0.47534,0,0,0.21606],"59":[0.12604,0.47534,0,0,0.21606],"61":[-0.13099,0.36866,0,0,0.75623],"63":[0,0.69141,0,0,0.36245],"65":[0,0.69141,0,0,0.7176],"66":[0,0.69141,0,0,0.88397],"67":[0,0.69141,0,0,0.61254],"68":[0,0.69141,0,0,0.83158],"69":[0,0.69141,0,0,0.66278],"70":[0.12604,0.69141,0,0,0.61119],"71":[0,0.69141,0,0,0.78539],"72":[0.06302,0.69141,0,0,0.7203],"73":[0,0.69141,0,0,0.55448],"74":[0.12604,0.69141,0,0,0.55231],"75":[0,0.69141,0,0,0.66845],"76":[0,0.69141,0,0,0.66602],"77":[0,0.69141,0,0,1.04953],"78":[0,0.69141,0,0,0.83212],"79":[0,0.69141,0,0,0.82699],"80":[0.18906,0.69141,0,0,0.82753],"81":[0.03781,0.69141,0,0,0.82699],"82":[0,0.69141,0,0,0.82807],"83":[0,0.69141,0,0,0.82861],"84":[0,0.69141,0,0,0.66899],"85":[0,0.69141,0,0,0.64576],"86":[0,0.69141,0,0,0.83131],"87":[0,0.69141,0,0,1.04602],"88":[0,0.69141,0,0,0.71922],"89":[0.18906,0.69141,0,0,0.83293],"90":[0.12604,0.69141,0,0,0.60201],"91":[0.24982,0.74947,0,0,0.27764],"93":[0.24982,0.74947,0,0,0.27764],"94":[0,0.69141,0,0,0.49965],"97":[0,0.47534,0,0,0.50046],"98":[0,0.69141,0,0,0.51315],"99":[0,0.47534,0,0,0.38946],"100":[0,0.62119,0,0,0.49857],"101":[0,0.47534,0,0,0.40053],"102":[0.18906,0.69141,0,0,0.32626],"103":[0.18906,0.47534,0,0,0.5037],"104":[0.18906,0.69141,0,0,0.52126],"105":[0,0.69141,0,0,0.27899],"106":[0,0.69141,0,0,0.28088],"107":[0,0.69141,0,0,0.38946],"108":[0,0.69141,0,0,0.27953],"109":[0,0.47534,0,0,0.76676],"110":[0,0.47534,0,0,0.52666],"111":[0,0.47534,0,0,0.48885],"112":[0.18906,0.52396,0,0,0.50046],"113":[0.18906,0.47534,0,0,0.48912],"114":[0,0.47534,0,0,0.38919],"115":[0,0.47534,0,0,0.44266],"116":[0,0.62119,0,0,0.33301],"117":[0,0.47534,0,0,0.5172],"118":[0,0.52396,0,0,0.5118],"119":[0,0.52396,0,0,0.77351],"120":[0.18906,0.47534,0,0,0.38865],"121":[0.18906,0.47534,0,0,0.49884],"122":[0.18906,0.47534,0,0,0.39054],"160":[0,0,0,0,0.25],"8216":[0,0.69141,0,0,0.21471],"8217":[0,0.69141,0,0,0.21471],"58112":[0,0.62119,0,0,0.49749],"58113":[0,0.62119,0,0,0.4983],"58114":[0.18906,0.69141,0,0,0.33328],"58115":[0.18906,0.69141,0,0,0.32923],"58116":[0.18906,0.47534,0,0,0.50343],"58117":[0,0.69141,0,0,0.33301],"58118":[0,0.62119,0,0,0.33409],"58119":[0,0.47534,0,0,0.50073]},"Main-Bold":{"32":[0,0,0,0,0.25],"33":[0,0.69444,0,0,0.35],"34":[0,0.69444,0,0,0.60278],"35":[0.19444,0.69444,0,0,0.95833],"36":[0.05556,0.75,0,0,0.575],"37":[0.05556,0.75,0,0,0.95833],"38":[0,0.69444,0,0,0.89444],"39":[0,0.69444,0,0,0.31944],"40":[0.25,0.75,0,0,0.44722],"41":[0.25,0.75,0,0,0.44722],"42":[0,0.75,0,0,0.575],"43":[0.13333,0.63333,0,0,0.89444],"44":[0.19444,0.15556,0,0,0.31944],"45":[0,0.44444,0,0,0.38333],"46":[0,0.15556,0,0,0.31944],"47":[0.25,0.75,0,0,0.575],"48":[0,0.64444,0,0,0.575],"49":[0,0.64444,0,0,0.575],"50":[0,0.64444,0,0,0.575],"51":[0,0.64444,0,0,0.575],"52":[0,0.64444,0,0,0.575],"53":[0,0.64444,0,0,0.575],"54":[0,0.64444,0,0,0.575],"55":[0,0.64444,0,0,0.575],"56":[0,0.64444,0,0,0.575],"57":[0,0.64444,0,0,0.575],"58":[0,0.44444,0,0,0.31944],"59":[0.19444,0.44444,0,0,0.31944],"60":[0.08556,0.58556,0,0,0.89444],"61":[-0.10889,0.39111,0,0,0.89444],"62":[0.08556,0.58556,0,0,0.89444],"63":[0,0.69444,0,0,0.54305],"64":[0,0.69444,0,0,0.89444],"65":[0,0.68611,0,0,0.86944],"66":[0,0.68611,0,0,0.81805],"67":[0,0.68611,0,0,0.83055],"68":[0,0.68611,0,0,0.88194],"69":[0,0.68611,0,0,0.75555],"70":[0,0.68611,0,0,0.72361],"71":[0,0.68611,0,0,0.90416],"72":[0,0.68611,0,0,0.9],"73":[0,0.68611,0,0,0.43611],"74":[0,0.68611,0,0,0.59444],"75":[0,0.68611,0,0,0.90138],"76":[0,0.68611,0,0,0.69166],"77":[0,0.68611,0,0,1.09166],"78":[0,0.68611,0,0,0.9],"79":[0,0.68611,0,0,0.86388],"80":[0,0.68611,0,0,0.78611],"81":[0.19444,0.68611,0,0,0.86388],"82":[0,0.68611,0,0,0.8625],"83":[0,0.68611,0,0,0.63889],"84":[0,0.68611,0,0,0.8],"85":[0,0.68611,0,0,0.88472],"86":[0,0.68611,0.01597,0,0.86944],"87":[0,0.68611,0.01597,0,1.18888],"88":[0,0.68611,0,0,0.86944],"89":[0,0.68611,0.02875,0,0.86944],"90":[0,0.68611,0,0,0.70277],"91":[0.25,0.75,0,0,0.31944],"92":[0.25,0.75,0,0,0.575],"93":[0.25,0.75,0,0,0.31944],"94":[0,0.69444,0,0,0.575],"95":[0.31,0.13444,0.03194,0,0.575],"97":[0,0.44444,0,0,0.55902],"98":[0,0.69444,0,0,0.63889],"99":[0,0.44444,0,0,0.51111],"100":[0,0.69444,0,0,0.63889],"101":[0,0.44444,0,0,0.52708],"102":[0,0.69444,0.10903,0,0.35139],"103":[0.19444,0.44444,0.01597,0,0.575],"104":[0,0.69444,0,0,0.63889],"105":[0,0.69444,0,0,0.31944],"106":[0.19444,0.69444,0,0,0.35139],"107":[0,0.69444,0,0,0.60694],"108":[0,0.69444,0,0,0.31944],"109":[0,0.44444,0,0,0.95833],"110":[0,0.44444,0,0,0.63889],"111":[0,0.44444,0,0,0.575],"112":[0.19444,0.44444,0,0,0.63889],"113":[0.19444,0.44444,0,0,0.60694],"114":[0,0.44444,0,0,0.47361],"115":[0,0.44444,0,0,0.45361],"116":[0,0.63492,0,0,0.44722],"117":[0,0.44444,0,0,0.63889],"118":[0,0.44444,0.01597,0,0.60694],"119":[0,0.44444,0.01597,0,0.83055],"120":[0,0.44444,0,0,0.60694],"121":[0.19444,0.44444,0.01597,0,0.60694],"122":[0,0.44444,0,0,0.51111],"123":[0.25,0.75,0,0,0.575],"124":[0.25,0.75,0,0,0.31944],"125":[0.25,0.75,0,0,0.575],"126":[0.35,0.34444,0,0,0.575],"160":[0,0,0,0,0.25],"163":[0,0.69444,0,0,0.86853],"168":[0,0.69444,0,0,0.575],"172":[0,0.44444,0,0,0.76666],"176":[0,0.69444,0,0,0.86944],"177":[0.13333,0.63333,0,0,0.89444],"184":[0.17014,0,0,0,0.51111],"198":[0,0.68611,0,0,1.04166],"215":[0.13333,0.63333,0,0,0.89444],"216":[0.04861,0.73472,0,0,0.89444],"223":[0,0.69444,0,0,0.59722],"230":[0,0.44444,0,0,0.83055],"247":[0.13333,0.63333,0,0,0.89444],"248":[0.09722,0.54167,0,0,0.575],"305":[0,0.44444,0,0,0.31944],"338":[0,0.68611,0,0,1.16944],"339":[0,0.44444,0,0,0.89444],"567":[0.19444,0.44444,0,0,0.35139],"710":[0,0.69444,0,0,0.575],"711":[0,0.63194,0,0,0.575],"713":[0,0.59611,0,0,0.575],"714":[0,0.69444,0,0,0.575],"715":[0,0.69444,0,0,0.575],"728":[0,0.69444,0,0,0.575],"729":[0,0.69444,0,0,0.31944],"730":[0,0.69444,0,0,0.86944],"732":[0,0.69444,0,0,0.575],"733":[0,0.69444,0,0,0.575],"915":[0,0.68611,0,0,0.69166],"916":[0,0.68611,0,0,0.95833],"920":[0,0.68611,0,0,0.89444],"923":[0,0.68611,0,0,0.80555],"926":[0,0.68611,0,0,0.76666],"928":[0,0.68611,0,0,0.9],"931":[0,0.68611,0,0,0.83055],"933":[0,0.68611,0,0,0.89444],"934":[0,0.68611,0,0,0.83055],"936":[0,0.68611,0,0,0.89444],"937":[0,0.68611,0,0,0.83055],"8211":[0,0.44444,0.03194,0,0.575],"8212":[0,0.44444,0.03194,0,1.14999],"8216":[0,0.69444,0,0,0.31944],"8217":[0,0.69444,0,0,0.31944],"8220":[0,0.69444,0,0,0.60278],"8221":[0,0.69444,0,0,0.60278],"8224":[0.19444,0.69444,0,0,0.51111],"8225":[0.19444,0.69444,0,0,0.51111],"8242":[0,0.55556,0,0,0.34444],"8407":[0,0.72444,0.15486,0,0.575],"8463":[0,0.69444,0,0,0.66759],"8465":[0,0.69444,0,0,0.83055],"8467":[0,0.69444,0,0,0.47361],"8472":[0.19444,0.44444,0,0,0.74027],"8476":[0,0.69444,0,0,0.83055],"8501":[0,0.69444,0,0,0.70277],"8592":[-0.10889,0.39111,0,0,1.14999],"8593":[0.19444,0.69444,0,0,0.575],"8594":[-0.10889,0.39111,0,0,1.14999],"8595":[0.19444,0.69444,0,0,0.575],"8596":[-0.10889,0.39111,0,0,1.14999],"8597":[0.25,0.75,0,0,0.575],"8598":[0.19444,0.69444,0,0,1.14999],"8599":[0.19444,0.69444,0,0,1.14999],"8600":[0.19444,0.69444,0,0,1.14999],"8601":[0.19444,0.69444,0,0,1.14999],"8636":[-0.10889,0.39111,0,0,1.14999],"8637":[-0.10889,0.39111,0,0,1.14999],"8640":[-0.10889,0.39111,0,0,1.14999],"8641":[-0.10889,0.39111,0,0,1.14999],"8656":[-0.10889,0.39111,0,0,1.14999],"8657":[0.19444,0.69444,0,0,0.70277],"8658":[-0.10889,0.39111,0,0,1.14999],"8659":[0.19444,0.69444,0,0,0.70277],"8660":[-0.10889,0.39111,0,0,1.14999],"8661":[0.25,0.75,0,0,0.70277],"8704":[0,0.69444,0,0,0.63889],"8706":[0,0.69444,0.06389,0,0.62847],"8707":[0,0.69444,0,0,0.63889],"8709":[0.05556,0.75,0,0,0.575],"8711":[0,0.68611,0,0,0.95833],"8712":[0.08556,0.58556,0,0,0.76666],"8715":[0.08556,0.58556,0,0,0.76666],"8722":[0.13333,0.63333,0,0,0.89444],"8723":[0.13333,0.63333,0,0,0.89444],"8725":[0.25,0.75,0,0,0.575],"8726":[0.25,0.75,0,0,0.575],"8727":[-0.02778,0.47222,0,0,0.575],"8728":[-0.02639,0.47361,0,0,0.575],"8729":[-0.02639,0.47361,0,0,0.575],"8730":[0.18,0.82,0,0,0.95833],"8733":[0,0.44444,0,0,0.89444],"8734":[0,0.44444,0,0,1.14999],"8736":[0,0.69224,0,0,0.72222],"8739":[0.25,0.75,0,0,0.31944],"8741":[0.25,0.75,0,0,0.575],"8743":[0,0.55556,0,0,0.76666],"8744":[0,0.55556,0,0,0.76666],"8745":[0,0.55556,0,0,0.76666],"8746":[0,0.55556,0,0,0.76666],"8747":[0.19444,0.69444,0.12778,0,0.56875],"8764":[-0.10889,0.39111,0,0,0.89444],"8768":[0.19444,0.69444,0,0,0.31944],"8771":[0.00222,0.50222,0,0,0.89444],"8776":[0.02444,0.52444,0,0,0.89444],"8781":[0.00222,0.50222,0,0,0.89444],"8801":[0.00222,0.50222,0,0,0.89444],"8804":[0.19667,0.69667,0,0,0.89444],"8805":[0.19667,0.69667,0,0,0.89444],"8810":[0.08556,0.58556,0,0,1.14999],"8811":[0.08556,0.58556,0,0,1.14999],"8826":[0.08556,0.58556,0,0,0.89444],"8827":[0.08556,0.58556,0,0,0.89444],"8834":[0.08556,0.58556,0,0,0.89444],"8835":[0.08556,0.58556,0,0,0.89444],"8838":[0.19667,0.69667,0,0,0.89444],"8839":[0.19667,0.69667,0,0,0.89444],"8846":[0,0.55556,0,0,0.76666],"8849":[0.19667,0.69667,0,0,0.89444],"8850":[0.19667,0.69667,0,0,0.89444],"8851":[0,0.55556,0,0,0.76666],"8852":[0,0.55556,0,0,0.76666],"8853":[0.13333,0.63333,0,0,0.89444],"8854":[0.13333,0.63333,0,0,0.89444],"8855":[0.13333,0.63333,0,0,0.89444],"8856":[0.13333,0.63333,0,0,0.89444],"8857":[0.13333,0.63333,0,0,0.89444],"8866":[0,0.69444,0,0,0.70277],"8867":[0,0.69444,0,0,0.70277],"8868":[0,0.69444,0,0,0.89444],"8869":[0,0.69444,0,0,0.89444],"8900":[-0.02639,0.47361,0,0,0.575],"8901":[-0.02639,0.47361,0,0,0.31944],"8902":[-0.02778,0.47222,0,0,0.575],"8968":[0.25,0.75,0,0,0.51111],"8969":[0.25,0.75,0,0,0.51111],"8970":[0.25,0.75,0,0,0.51111],"8971":[0.25,0.75,0,0,0.51111],"8994":[-0.13889,0.36111,0,0,1.14999],"8995":[-0.13889,0.36111,0,0,1.14999],"9651":[0.19444,0.69444,0,0,1.02222],"9657":[-0.02778,0.47222,0,0,0.575],"9661":[0.19444,0.69444,0,0,1.02222],"9667":[-0.02778,0.47222,0,0,0.575],"9711":[0.19444,0.69444,0,0,1.14999],"9824":[0.12963,0.69444,0,0,0.89444],"9825":[0.12963,0.69444,0,0,0.89444],"9826":[0.12963,0.69444,0,0,0.89444],"9827":[0.12963,0.69444,0,0,0.89444],"9837":[0,0.75,0,0,0.44722],"9838":[0.19444,0.69444,0,0,0.44722],"9839":[0.19444,0.69444,0,0,0.44722],"10216":[0.25,0.75,0,0,0.44722],"10217":[0.25,0.75,0,0,0.44722],"10815":[0,0.68611,0,0,0.9],"10927":[0.19667,0.69667,0,0,0.89444],"10928":[0.19667,0.69667,0,0,0.89444],"57376":[0.19444,0.69444,0,0,0]},"Main-BoldItalic":{"32":[0,0,0,0,0.25],"33":[0,0.69444,0.11417,0,0.38611],"34":[0,0.69444,0.07939,0,0.62055],"35":[0.19444,0.69444,0.06833,0,0.94444],"37":[0.05556,0.75,0.12861,0,0.94444],"38":[0,0.69444,0.08528,0,0.88555],"39":[0,0.69444,0.12945,0,0.35555],"40":[0.25,0.75,0.15806,0,0.47333],"41":[0.25,0.75,0.03306,0,0.47333],"42":[0,0.75,0.14333,0,0.59111],"43":[0.10333,0.60333,0.03306,0,0.88555],"44":[0.19444,0.14722,0,0,0.35555],"45":[0,0.44444,0.02611,0,0.41444],"46":[0,0.14722,0,0,0.35555],"47":[0.25,0.75,0.15806,0,0.59111],"48":[0,0.64444,0.13167,0,0.59111],"49":[0,0.64444,0.13167,0,0.59111],"50":[0,0.64444,0.13167,0,0.59111],"51":[0,0.64444,0.13167,0,0.59111],"52":[0.19444,0.64444,0.13167,0,0.59111],"53":[0,0.64444,0.13167,0,0.59111],"54":[0,0.64444,0.13167,0,0.59111],"55":[0.19444,0.64444,0.13167,0,0.59111],"56":[0,0.64444,0.13167,0,0.59111],"57":[0,0.64444,0.13167,0,0.59111],"58":[0,0.44444,0.06695,0,0.35555],"59":[0.19444,0.44444,0.06695,0,0.35555],"61":[-0.10889,0.39111,0.06833,0,0.88555],"63":[0,0.69444,0.11472,0,0.59111],"64":[0,0.69444,0.09208,0,0.88555],"65":[0,0.68611,0,0,0.86555],"66":[0,0.68611,0.0992,0,0.81666],"67":[0,0.68611,0.14208,0,0.82666],"68":[0,0.68611,0.09062,0,0.87555],"69":[0,0.68611,0.11431,0,0.75666],"70":[0,0.68611,0.12903,0,0.72722],"71":[0,0.68611,0.07347,0,0.89527],"72":[0,0.68611,0.17208,0,0.8961],"73":[0,0.68611,0.15681,0,0.47166],"74":[0,0.68611,0.145,0,0.61055],"75":[0,0.68611,0.14208,0,0.89499],"76":[0,0.68611,0,0,0.69777],"77":[0,0.68611,0.17208,0,1.07277],"78":[0,0.68611,0.17208,0,0.8961],"79":[0,0.68611,0.09062,0,0.85499],"80":[0,0.68611,0.0992,0,0.78721],"81":[0.19444,0.68611,0.09062,0,0.85499],"82":[0,0.68611,0.02559,0,0.85944],"83":[0,0.68611,0.11264,0,0.64999],"84":[0,0.68611,0.12903,0,0.7961],"85":[0,0.68611,0.17208,0,0.88083],"86":[0,0.68611,0.18625,0,0.86555],"87":[0,0.68611,0.18625,0,1.15999],"88":[0,0.68611,0.15681,0,0.86555],"89":[0,0.68611,0.19803,0,0.86555],"90":[0,0.68611,0.14208,0,0.70888],"91":[0.25,0.75,0.1875,0,0.35611],"93":[0.25,0.75,0.09972,0,0.35611],"94":[0,0.69444,0.06709,0,0.59111],"95":[0.31,0.13444,0.09811,0,0.59111],"97":[0,0.44444,0.09426,0,0.59111],"98":[0,0.69444,0.07861,0,0.53222],"99":[0,0.44444,0.05222,0,0.53222],"100":[0,0.69444,0.10861,0,0.59111],"101":[0,0.44444,0.085,0,0.53222],"102":[0.19444,0.69444,0.21778,0,0.4],"103":[0.19444,0.44444,0.105,0,0.53222],"104":[0,0.69444,0.09426,0,0.59111],"105":[0,0.69326,0.11387,0,0.35555],"106":[0.19444,0.69326,0.1672,0,0.35555],"107":[0,0.69444,0.11111,0,0.53222],"108":[0,0.69444,0.10861,0,0.29666],"109":[0,0.44444,0.09426,0,0.94444],"110":[0,0.44444,0.09426,0,0.64999],"111":[0,0.44444,0.07861,0,0.59111],"112":[0.19444,0.44444,0.07861,0,0.59111],"113":[0.19444,0.44444,0.105,0,0.53222],"114":[0,0.44444,0.11111,0,0.50167],"115":[0,0.44444,0.08167,0,0.48694],"116":[0,0.63492,0.09639,0,0.385],"117":[0,0.44444,0.09426,0,0.62055],"118":[0,0.44444,0.11111,0,0.53222],"119":[0,0.44444,0.11111,0,0.76777],"120":[0,0.44444,0.12583,0,0.56055],"121":[0.19444,0.44444,0.105,0,0.56166],"122":[0,0.44444,0.13889,0,0.49055],"126":[0.35,0.34444,0.11472,0,0.59111],"160":[0,0,0,0,0.25],"168":[0,0.69444,0.11473,0,0.59111],"176":[0,0.69444,0,0,0.94888],"184":[0.17014,0,0,0,0.53222],"198":[0,0.68611,0.11431,0,1.02277],"216":[0.04861,0.73472,0.09062,0,0.88555],"223":[0.19444,0.69444,0.09736,0,0.665],"230":[0,0.44444,0.085,0,0.82666],"248":[0.09722,0.54167,0.09458,0,0.59111],"305":[0,0.44444,0.09426,0,0.35555],"338":[0,0.68611,0.11431,0,1.14054],"339":[0,0.44444,0.085,0,0.82666],"567":[0.19444,0.44444,0.04611,0,0.385],"710":[0,0.69444,0.06709,0,0.59111],"711":[0,0.63194,0.08271,0,0.59111],"713":[0,0.59444,0.10444,0,0.59111],"714":[0,0.69444,0.08528,0,0.59111],"715":[0,0.69444,0,0,0.59111],"728":[0,0.69444,0.10333,0,0.59111],"729":[0,0.69444,0.12945,0,0.35555],"730":[0,0.69444,0,0,0.94888],"732":[0,0.69444,0.11472,0,0.59111],"733":[0,0.69444,0.11472,0,0.59111],"915":[0,0.68611,0.12903,0,0.69777],"916":[0,0.68611,0,0,0.94444],"920":[0,0.68611,0.09062,0,0.88555],"923":[0,0.68611,0,0,0.80666],"926":[0,0.68611,0.15092,0,0.76777],"928":[0,0.68611,0.17208,0,0.8961],"931":[0,0.68611,0.11431,0,0.82666],"933":[0,0.68611,0.10778,0,0.88555],"934":[0,0.68611,0.05632,0,0.82666],"936":[0,0.68611,0.10778,0,0.88555],"937":[0,0.68611,0.0992,0,0.82666],"8211":[0,0.44444,0.09811,0,0.59111],"8212":[0,0.44444,0.09811,0,1.18221],"8216":[0,0.69444,0.12945,0,0.35555],"8217":[0,0.69444,0.12945,0,0.35555],"8220":[0,0.69444,0.16772,0,0.62055],"8221":[0,0.69444,0.07939,0,0.62055]},"Main-Italic":{"32":[0,0,0,0,0.25],"33":[0,0.69444,0.12417,0,0.30667],"34":[0,0.69444,0.06961,0,0.51444],"35":[0.19444,0.69444,0.06616,0,0.81777],"37":[0.05556,0.75,0.13639,0,0.81777],"38":[0,0.69444,0.09694,0,0.76666],"39":[0,0.69444,0.12417,0,0.30667],"40":[0.25,0.75,0.16194,0,0.40889],"41":[0.25,0.75,0.03694,0,0.40889],"42":[0,0.75,0.14917,0,0.51111],"43":[0.05667,0.56167,0.03694,0,0.76666],"44":[0.19444,0.10556,0,0,0.30667],"45":[0,0.43056,0.02826,0,0.35778],"46":[0,0.10556,0,0,0.30667],"47":[0.25,0.75,0.16194,0,0.51111],"48":[0,0.64444,0.13556,0,0.51111],"49":[0,0.64444,0.13556,0,0.51111],"50":[0,0.64444,0.13556,0,0.51111],"51":[0,0.64444,0.13556,0,0.51111],"52":[0.19444,0.64444,0.13556,0,0.51111],"53":[0,0.64444,0.13556,0,0.51111],"54":[0,0.64444,0.13556,0,0.51111],"55":[0.19444,0.64444,0.13556,0,0.51111],"56":[0,0.64444,0.13556,0,0.51111],"57":[0,0.64444,0.13556,0,0.51111],"58":[0,0.43056,0.0582,0,0.30667],"59":[0.19444,0.43056,0.0582,0,0.30667],"61":[-0.13313,0.36687,0.06616,0,0.76666],"63":[0,0.69444,0.1225,0,0.51111],"64":[0,0.69444,0.09597,0,0.76666],"65":[0,0.68333,0,0,0.74333],"66":[0,0.68333,0.10257,0,0.70389],"67":[0,0.68333,0.14528,0,0.71555],"68":[0,0.68333,0.09403,0,0.755],"69":[0,0.68333,0.12028,0,0.67833],"70":[0,0.68333,0.13305,0,0.65277],"71":[0,0.68333,0.08722,0,0.77361],"72":[0,0.68333,0.16389,0,0.74333],"73":[0,0.68333,0.15806,0,0.38555],"74":[0,0.68333,0.14028,0,0.525],"75":[0,0.68333,0.14528,0,0.76888],"76":[0,0.68333,0,0,0.62722],"77":[0,0.68333,0.16389,0,0.89666],"78":[0,0.68333,0.16389,0,0.74333],"79":[0,0.68333,0.09403,0,0.76666],"80":[0,0.68333,0.10257,0,0.67833],"81":[0.19444,0.68333,0.09403,0,0.76666],"82":[0,0.68333,0.03868,0,0.72944],"83":[0,0.68333,0.11972,0,0.56222],"84":[0,0.68333,0.13305,0,0.71555],"85":[0,0.68333,0.16389,0,0.74333],"86":[0,0.68333,0.18361,0,0.74333],"87":[0,0.68333,0.18361,0,0.99888],"88":[0,0.68333,0.15806,0,0.74333],"89":[0,0.68333,0.19383,0,0.74333],"90":[0,0.68333,0.14528,0,0.61333],"91":[0.25,0.75,0.1875,0,0.30667],"93":[0.25,0.75,0.10528,0,0.30667],"94":[0,0.69444,0.06646,0,0.51111],"95":[0.31,0.12056,0.09208,0,0.51111],"97":[0,0.43056,0.07671,0,0.51111],"98":[0,0.69444,0.06312,0,0.46],"99":[0,0.43056,0.05653,0,0.46],"100":[0,0.69444,0.10333,0,0.51111],"101":[0,0.43056,0.07514,0,0.46],"102":[0.19444,0.69444,0.21194,0,0.30667],"103":[0.19444,0.43056,0.08847,0,0.46],"104":[0,0.69444,0.07671,0,0.51111],"105":[0,0.65536,0.1019,0,0.30667],"106":[0.19444,0.65536,0.14467,0,0.30667],"107":[0,0.69444,0.10764,0,0.46],"108":[0,0.69444,0.10333,0,0.25555],"109":[0,0.43056,0.07671,0,0.81777],"110":[0,0.43056,0.07671,0,0.56222],"111":[0,0.43056,0.06312,0,0.51111],"112":[0.19444,0.43056,0.06312,0,0.51111],"113":[0.19444,0.43056,0.08847,0,0.46],"114":[0,0.43056,0.10764,0,0.42166],"115":[0,0.43056,0.08208,0,0.40889],"116":[0,0.61508,0.09486,0,0.33222],"117":[0,0.43056,0.07671,0,0.53666],"118":[0,0.43056,0.10764,0,0.46],"119":[0,0.43056,0.10764,0,0.66444],"120":[0,0.43056,0.12042,0,0.46389],"121":[0.19444,0.43056,0.08847,0,0.48555],"122":[0,0.43056,0.12292,0,0.40889],"126":[0.35,0.31786,0.11585,0,0.51111],"160":[0,0,0,0,0.25],"168":[0,0.66786,0.10474,0,0.51111],"176":[0,0.69444,0,0,0.83129],"184":[0.17014,0,0,0,0.46],"198":[0,0.68333,0.12028,0,0.88277],"216":[0.04861,0.73194,0.09403,0,0.76666],"223":[0.19444,0.69444,0.10514,0,0.53666],"230":[0,0.43056,0.07514,0,0.71555],"248":[0.09722,0.52778,0.09194,0,0.51111],"338":[0,0.68333,0.12028,0,0.98499],"339":[0,0.43056,0.07514,0,0.71555],"710":[0,0.69444,0.06646,0,0.51111],"711":[0,0.62847,0.08295,0,0.51111],"713":[0,0.56167,0.10333,0,0.51111],"714":[0,0.69444,0.09694,0,0.51111],"715":[0,0.69444,0,0,0.51111],"728":[0,0.69444,0.10806,0,0.51111],"729":[0,0.66786,0.11752,0,0.30667],"730":[0,0.69444,0,0,0.83129],"732":[0,0.66786,0.11585,0,0.51111],"733":[0,0.69444,0.1225,0,0.51111],"915":[0,0.68333,0.13305,0,0.62722],"916":[0,0.68333,0,0,0.81777],"920":[0,0.68333,0.09403,0,0.76666],"923":[0,0.68333,0,0,0.69222],"926":[0,0.68333,0.15294,0,0.66444],"928":[0,0.68333,0.16389,0,0.74333],"931":[0,0.68333,0.12028,0,0.71555],"933":[0,0.68333,0.11111,0,0.76666],"934":[0,0.68333,0.05986,0,0.71555],"936":[0,0.68333,0.11111,0,0.76666],"937":[0,0.68333,0.10257,0,0.71555],"8211":[0,0.43056,0.09208,0,0.51111],"8212":[0,0.43056,0.09208,0,1.02222],"8216":[0,0.69444,0.12417,0,0.30667],"8217":[0,0.69444,0.12417,0,0.30667],"8220":[0,0.69444,0.1685,0,0.51444],"8221":[0,0.69444,0.06961,0,0.51444],"8463":[0,0.68889,0,0,0.54028]},"Main-Regular":{"32":[0,0,0,0,0.25],"33":[0,0.69444,0,0,0.27778],"34":[0,0.69444,0,0,0.5],"35":[0.19444,0.69444,0,0,0.83334],"36":[0.05556,0.75,0,0,0.5],"37":[0.05556,0.75,0,0,0.83334],"38":[0,0.69444,0,0,0.77778],"39":[0,0.69444,0,0,0.27778],"40":[0.25,0.75,0,0,0.38889],"41":[0.25,0.75,0,0,0.38889],"42":[0,0.75,0,0,0.5],"43":[0.08333,0.58333,0,0,0.77778],"44":[0.19444,0.10556,0,0,0.27778],"45":[0,0.43056,0,0,0.33333],"46":[0,0.10556,0,0,0.27778],"47":[0.25,0.75,0,0,0.5],"48":[0,0.64444,0,0,0.5],"49":[0,0.64444,0,0,0.5],"50":[0,0.64444,0,0,0.5],"51":[0,0.64444,0,0,0.5],"52":[0,0.64444,0,0,0.5],"53":[0,0.64444,0,0,0.5],"54":[0,0.64444,0,0,0.5],"55":[0,0.64444,0,0,0.5],"56":[0,0.64444,0,0,0.5],"57":[0,0.64444,0,0,0.5],"58":[0,0.43056,0,0,0.27778],"59":[0.19444,0.43056,0,0,0.27778],"60":[0.0391,0.5391,0,0,0.77778],"61":[-0.13313,0.36687,0,0,0.77778],"62":[0.0391,0.5391,0,0,0.77778],"63":[0,0.69444,0,0,0.47222],"64":[0,0.69444,0,0,0.77778],"65":[0,0.68333,0,0,0.75],"66":[0,0.68333,0,0,0.70834],"67":[0,0.68333,0,0,0.72222],"68":[0,0.68333,0,0,0.76389],"69":[0,0.68333,0,0,0.68056],"70":[0,0.68333,0,0,0.65278],"71":[0,0.68333,0,0,0.78472],"72":[0,0.68333,0,0,0.75],"73":[0,0.68333,0,0,0.36111],"74":[0,0.68333,0,0,0.51389],"75":[0,0.68333,0,0,0.77778],"76":[0,0.68333,0,0,0.625],"77":[0,0.68333,0,0,0.91667],"78":[0,0.68333,0,0,0.75],"79":[0,0.68333,0,0,0.77778],"80":[0,0.68333,0,0,0.68056],"81":[0.19444,0.68333,0,0,0.77778],"82":[0,0.68333,0,0,0.73611],"83":[0,0.68333,0,0,0.55556],"84":[0,0.68333,0,0,0.72222],"85":[0,0.68333,0,0,0.75],"86":[0,0.68333,0.01389,0,0.75],"87":[0,0.68333,0.01389,0,1.02778],"88":[0,0.68333,0,0,0.75],"89":[0,0.68333,0.025,0,0.75],"90":[0,0.68333,0,0,0.61111],"91":[0.25,0.75,0,0,0.27778],"92":[0.25,0.75,0,0,0.5],"93":[0.25,0.75,0,0,0.27778],"94":[0,0.69444,0,0,0.5],"95":[0.31,0.12056,0.02778,0,0.5],"97":[0,0.43056,0,0,0.5],"98":[0,0.69444,0,0,0.55556],"99":[0,0.43056,0,0,0.44445],"100":[0,0.69444,0,0,0.55556],"101":[0,0.43056,0,0,0.44445],"102":[0,0.69444,0.07778,0,0.30556],"103":[0.19444,0.43056,0.01389,0,0.5],"104":[0,0.69444,0,0,0.55556],"105":[0,0.66786,0,0,0.27778],"106":[0.19444,0.66786,0,0,0.30556],"107":[0,0.69444,0,0,0.52778],"108":[0,0.69444,0,0,0.27778],"109":[0,0.43056,0,0,0.83334],"110":[0,0.43056,0,0,0.55556],"111":[0,0.43056,0,0,0.5],"112":[0.19444,0.43056,0,0,0.55556],"113":[0.19444,0.43056,0,0,0.52778],"114":[0,0.43056,0,0,0.39167],"115":[0,0.43056,0,0,0.39445],"116":[0,0.61508,0,0,0.38889],"117":[0,0.43056,0,0,0.55556],"118":[0,0.43056,0.01389,0,0.52778],"119":[0,0.43056,0.01389,0,0.72222],"120":[0,0.43056,0,0,0.52778],"121":[0.19444,0.43056,0.01389,0,0.52778],"122":[0,0.43056,0,0,0.44445],"123":[0.25,0.75,0,0,0.5],"124":[0.25,0.75,0,0,0.27778],"125":[0.25,0.75,0,0,0.5],"126":[0.35,0.31786,0,0,0.5],"160":[0,0,0,0,0.25],"163":[0,0.69444,0,0,0.76909],"167":[0.19444,0.69444,0,0,0.44445],"168":[0,0.66786,0,0,0.5],"172":[0,0.43056,0,0,0.66667],"176":[0,0.69444,0,0,0.75],"177":[0.08333,0.58333,0,0,0.77778],"182":[0.19444,0.69444,0,0,0.61111],"184":[0.17014,0,0,0,0.44445],"198":[0,0.68333,0,0,0.90278],"215":[0.08333,0.58333,0,0,0.77778],"216":[0.04861,0.73194,0,0,0.77778],"223":[0,0.69444,0,0,0.5],"230":[0,0.43056,0,0,0.72222],"247":[0.08333,0.58333,0,0,0.77778],"248":[0.09722,0.52778,0,0,0.5],"305":[0,0.43056,0,0,0.27778],"338":[0,0.68333,0,0,1.01389],"339":[0,0.43056,0,0,0.77778],"567":[0.19444,0.43056,0,0,0.30556],"710":[0,0.69444,0,0,0.5],"711":[0,0.62847,0,0,0.5],"713":[0,0.56778,0,0,0.5],"714":[0,0.69444,0,0,0.5],"715":[0,0.69444,0,0,0.5],"728":[0,0.69444,0,0,0.5],"729":[0,0.66786,0,0,0.27778],"730":[0,0.69444,0,0,0.75],"732":[0,0.66786,0,0,0.5],"733":[0,0.69444,0,0,0.5],"915":[0,0.68333,0,0,0.625],"916":[0,0.68333,0,0,0.83334],"920":[0,0.68333,0,0,0.77778],"923":[0,0.68333,0,0,0.69445],"926":[0,0.68333,0,0,0.66667],"928":[0,0.68333,0,0,0.75],"931":[0,0.68333,0,0,0.72222],"933":[0,0.68333,0,0,0.77778],"934":[0,0.68333,0,0,0.72222],"936":[0,0.68333,0,0,0.77778],"937":[0,0.68333,0,0,0.72222],"8211":[0,0.43056,0.02778,0,0.5],"8212":[0,0.43056,0.02778,0,1.0],"8216":[0,0.69444,0,0,0.27778],"8217":[0,0.69444,0,0,0.27778],"8220":[0,0.69444,0,0,0.5],"8221":[0,0.69444,0,0,0.5],"8224":[0.19444,0.69444,0,0,0.44445],"8225":[0.19444,0.69444,0,0,0.44445],"8230":[0,0.123,0,0,1.172],"8242":[0,0.55556,0,0,0.275],"8407":[0,0.71444,0.15382,0,0.5],"8463":[0,0.68889,0,0,0.54028],"8465":[0,0.69444,0,0,0.72222],"8467":[0,0.69444,0,0.11111,0.41667],"8472":[0.19444,0.43056,0,0.11111,0.63646],"8476":[0,0.69444,0,0,0.72222],"8501":[0,0.69444,0,0,0.61111],"8592":[-0.13313,0.36687,0,0,1.0],"8593":[0.19444,0.69444,0,0,0.5],"8594":[-0.13313,0.36687,0,0,1.0],"8595":[0.19444,0.69444,0,0,0.5],"8596":[-0.13313,0.36687,0,0,1.0],"8597":[0.25,0.75,0,0,0.5],"8598":[0.19444,0.69444,0,0,1.0],"8599":[0.19444,0.69444,0,0,1.0],"8600":[0.19444,0.69444,0,0,1.0],"8601":[0.19444,0.69444,0,0,1.0],"8614":[0.011,0.511,0,0,1.0],"8617":[0.011,0.511,0,0,1.126],"8618":[0.011,0.511,0,0,1.126],"8636":[-0.13313,0.36687,0,0,1.0],"8637":[-0.13313,0.36687,0,0,1.0],"8640":[-0.13313,0.36687,0,0,1.0],"8641":[-0.13313,0.36687,0,0,1.0],"8652":[0.011,0.671,0,0,1.0],"8656":[-0.13313,0.36687,0,0,1.0],"8657":[0.19444,0.69444,0,0,0.61111],"8658":[-0.13313,0.36687,0,0,1.0],"8659":[0.19444,0.69444,0,0,0.61111],"8660":[-0.13313,0.36687,0,0,1.0],"8661":[0.25,0.75,0,0,0.61111],"8704":[0,0.69444,0,0,0.55556],"8706":[0,0.69444,0.05556,0.08334,0.5309],"8707":[0,0.69444,0,0,0.55556],"8709":[0.05556,0.75,0,0,0.5],"8711":[0,0.68333,0,0,0.83334],"8712":[0.0391,0.5391,0,0,0.66667],"8715":[0.0391,0.5391,0,0,0.66667],"8722":[0.08333,0.58333,0,0,0.77778],"8723":[0.08333,0.58333,0,0,0.77778],"8725":[0.25,0.75,0,0,0.5],"8726":[0.25,0.75,0,0,0.5],"8727":[-0.03472,0.46528,0,0,0.5],"8728":[-0.05555,0.44445,0,0,0.5],"8729":[-0.05555,0.44445,0,0,0.5],"8730":[0.2,0.8,0,0,0.83334],"8733":[0,0.43056,0,0,0.77778],"8734":[0,0.43056,0,0,1.0],"8736":[0,0.69224,0,0,0.72222],"8739":[0.25,0.75,0,0,0.27778],"8741":[0.25,0.75,0,0,0.5],"8743":[0,0.55556,0,0,0.66667],"8744":[0,0.55556,0,0,0.66667],"8745":[0,0.55556,0,0,0.66667],"8746":[0,0.55556,0,0,0.66667],"8747":[0.19444,0.69444,0.11111,0,0.41667],"8764":[-0.13313,0.36687,0,0,0.77778],"8768":[0.19444,0.69444,0,0,0.27778],"8771":[-0.03625,0.46375,0,0,0.77778],"8773":[-0.022,0.589,0,0,1.0],"8776":[-0.01688,0.48312,0,0,0.77778],"8781":[-0.03625,0.46375,0,0,0.77778],"8784":[-0.133,0.673,0,0,0.778],"8801":[-0.03625,0.46375,0,0,0.77778],"8804":[0.13597,0.63597,0,0,0.77778],"8805":[0.13597,0.63597,0,0,0.77778],"8810":[0.0391,0.5391,0,0,1.0],"8811":[0.0391,0.5391,0,0,1.0],"8826":[0.0391,0.5391,0,0,0.77778],"8827":[0.0391,0.5391,0,0,0.77778],"8834":[0.0391,0.5391,0,0,0.77778],"8835":[0.0391,0.5391,0,0,0.77778],"8838":[0.13597,0.63597,0,0,0.77778],"8839":[0.13597,0.63597,0,0,0.77778],"8846":[0,0.55556,0,0,0.66667],"8849":[0.13597,0.63597,0,0,0.77778],"8850":[0.13597,0.63597,0,0,0.77778],"8851":[0,0.55556,0,0,0.66667],"8852":[0,0.55556,0,0,0.66667],"8853":[0.08333,0.58333,0,0,0.77778],"8854":[0.08333,0.58333,0,0,0.77778],"8855":[0.08333,0.58333,0,0,0.77778],"8856":[0.08333,0.58333,0,0,0.77778],"8857":[0.08333,0.58333,0,0,0.77778],"8866":[0,0.69444,0,0,0.61111],"8867":[0,0.69444,0,0,0.61111],"8868":[0,0.69444,0,0,0.77778],"8869":[0,0.69444,0,0,0.77778],"8872":[0.249,0.75,0,0,0.867],"8900":[-0.05555,0.44445,0,0,0.5],"8901":[-0.05555,0.44445,0,0,0.27778],"8902":[-0.03472,0.46528,0,0,0.5],"8904":[0.005,0.505,0,0,0.9],"8942":[0.03,0.903,0,0,0.278],"8943":[-0.19,0.313,0,0,1.172],"8945":[-0.1,0.823,0,0,1.282],"8968":[0.25,0.75,0,0,0.44445],"8969":[0.25,0.75,0,0,0.44445],"8970":[0.25,0.75,0,0,0.44445],"8971":[0.25,0.75,0,0,0.44445],"8994":[-0.14236,0.35764,0,0,1.0],"8995":[-0.14236,0.35764,0,0,1.0],"9136":[0.244,0.744,0,0,0.412],"9137":[0.244,0.745,0,0,0.412],"9651":[0.19444,0.69444,0,0,0.88889],"9657":[-0.03472,0.46528,0,0,0.5],"9661":[0.19444,0.69444,0,0,0.88889],"9667":[-0.03472,0.46528,0,0,0.5],"9711":[0.19444,0.69444,0,0,1.0],"9824":[0.12963,0.69444,0,0,0.77778],"9825":[0.12963,0.69444,0,0,0.77778],"9826":[0.12963,0.69444,0,0,0.77778],"9827":[0.12963,0.69444,0,0,0.77778],"9837":[0,0.75,0,0,0.38889],"9838":[0.19444,0.69444,0,0,0.38889],"9839":[0.19444,0.69444,0,0,0.38889],"10216":[0.25,0.75,0,0,0.38889],"10217":[0.25,0.75,0,0,0.38889],"10222":[0.244,0.744,0,0,0.412],"10223":[0.244,0.745,0,0,0.412],"10229":[0.011,0.511,0,0,1.609],"10230":[0.011,0.511,0,0,1.638],"10231":[0.011,0.511,0,0,1.859],"10232":[0.024,0.525,0,0,1.609],"10233":[0.024,0.525,0,0,1.638],"10234":[0.024,0.525,0,0,1.858],"10236":[0.011,0.511,0,0,1.638],"10815":[0,0.68333,0,0,0.75],"10927":[0.13597,0.63597,0,0,0.77778],"10928":[0.13597,0.63597,0,0,0.77778],"57376":[0.19444,0.69444,0,0,0]},"Math-BoldItalic":{"32":[0,0,0,0,0.25],"48":[0,0.44444,0,0,0.575],"49":[0,0.44444,0,0,0.575],"50":[0,0.44444,0,0,0.575],"51":[0.19444,0.44444,0,0,0.575],"52":[0.19444,0.44444,0,0,0.575],"53":[0.19444,0.44444,0,0,0.575],"54":[0,0.64444,0,0,0.575],"55":[0.19444,0.44444,0,0,0.575],"56":[0,0.64444,0,0,0.575],"57":[0.19444,0.44444,0,0,0.575],"65":[0,0.68611,0,0,0.86944],"66":[0,0.68611,0.04835,0,0.8664],"67":[0,0.68611,0.06979,0,0.81694],"68":[0,0.68611,0.03194,0,0.93812],"69":[0,0.68611,0.05451,0,0.81007],"70":[0,0.68611,0.15972,0,0.68889],"71":[0,0.68611,0,0,0.88673],"72":[0,0.68611,0.08229,0,0.98229],"73":[0,0.68611,0.07778,0,0.51111],"74":[0,0.68611,0.10069,0,0.63125],"75":[0,0.68611,0.06979,0,0.97118],"76":[0,0.68611,0,0,0.75555],"77":[0,0.68611,0.11424,0,1.14201],"78":[0,0.68611,0.11424,0,0.95034],"79":[0,0.68611,0.03194,0,0.83666],"80":[0,0.68611,0.15972,0,0.72309],"81":[0.19444,0.68611,0,0,0.86861],"82":[0,0.68611,0.00421,0,0.87235],"83":[0,0.68611,0.05382,0,0.69271],"84":[0,0.68611,0.15972,0,0.63663],"85":[0,0.68611,0.11424,0,0.80027],"86":[0,0.68611,0.25555,0,0.67778],"87":[0,0.68611,0.15972,0,1.09305],"88":[0,0.68611,0.07778,0,0.94722],"89":[0,0.68611,0.25555,0,0.67458],"90":[0,0.68611,0.06979,0,0.77257],"97":[0,0.44444,0,0,0.63287],"98":[0,0.69444,0,0,0.52083],"99":[0,0.44444,0,0,0.51342],"100":[0,0.69444,0,0,0.60972],"101":[0,0.44444,0,0,0.55361],"102":[0.19444,0.69444,0.11042,0,0.56806],"103":[0.19444,0.44444,0.03704,0,0.5449],"104":[0,0.69444,0,0,0.66759],"105":[0,0.69326,0,0,0.4048],"106":[0.19444,0.69326,0.0622,0,0.47083],"107":[0,0.69444,0.01852,0,0.6037],"108":[0,0.69444,0.0088,0,0.34815],"109":[0,0.44444,0,0,1.0324],"110":[0,0.44444,0,0,0.71296],"111":[0,0.44444,0,0,0.58472],"112":[0.19444,0.44444,0,0,0.60092],"113":[0.19444,0.44444,0.03704,0,0.54213],"114":[0,0.44444,0.03194,0,0.5287],"115":[0,0.44444,0,0,0.53125],"116":[0,0.63492,0,0,0.41528],"117":[0,0.44444,0,0,0.68102],"118":[0,0.44444,0.03704,0,0.56666],"119":[0,0.44444,0.02778,0,0.83148],"120":[0,0.44444,0,0,0.65903],"121":[0.19444,0.44444,0.03704,0,0.59028],"122":[0,0.44444,0.04213,0,0.55509],"160":[0,0,0,0,0.25],"915":[0,0.68611,0.15972,0,0.65694],"916":[0,0.68611,0,0,0.95833],"920":[0,0.68611,0.03194,0,0.86722],"923":[0,0.68611,0,0,0.80555],"926":[0,0.68611,0.07458,0,0.84125],"928":[0,0.68611,0.08229,0,0.98229],"931":[0,0.68611,0.05451,0,0.88507],"933":[0,0.68611,0.15972,0,0.67083],"934":[0,0.68611,0,0,0.76666],"936":[0,0.68611,0.11653,0,0.71402],"937":[0,0.68611,0.04835,0,0.8789],"945":[0,0.44444,0,0,0.76064],"946":[0.19444,0.69444,0.03403,0,0.65972],"947":[0.19444,0.44444,0.06389,0,0.59003],"948":[0,0.69444,0.03819,0,0.52222],"949":[0,0.44444,0,0,0.52882],"950":[0.19444,0.69444,0.06215,0,0.50833],"951":[0.19444,0.44444,0.03704,0,0.6],"952":[0,0.69444,0.03194,0,0.5618],"953":[0,0.44444,0,0,0.41204],"954":[0,0.44444,0,0,0.66759],"955":[0,0.69444,0,0,0.67083],"956":[0.19444,0.44444,0,0,0.70787],"957":[0,0.44444,0.06898,0,0.57685],"958":[0.19444,0.69444,0.03021,0,0.50833],"959":[0,0.44444,0,0,0.58472],"960":[0,0.44444,0.03704,0,0.68241],"961":[0.19444,0.44444,0,0,0.6118],"962":[0.09722,0.44444,0.07917,0,0.42361],"963":[0,0.44444,0.03704,0,0.68588],"964":[0,0.44444,0.13472,0,0.52083],"965":[0,0.44444,0.03704,0,0.63055],"966":[0.19444,0.44444,0,0,0.74722],"967":[0.19444,0.44444,0,0,0.71805],"968":[0.19444,0.69444,0.03704,0,0.75833],"969":[0,0.44444,0.03704,0,0.71782],"977":[0,0.69444,0,0,0.69155],"981":[0.19444,0.69444,0,0,0.7125],"982":[0,0.44444,0.03194,0,0.975],"1009":[0.19444,0.44444,0,0,0.6118],"1013":[0,0.44444,0,0,0.48333],"57649":[0,0.44444,0,0,0.39352],"57911":[0.19444,0.44444,0,0,0.43889]},"Math-Italic":{"32":[0,0,0,0,0.25],"48":[0,0.43056,0,0,0.5],"49":[0,0.43056,0,0,0.5],"50":[0,0.43056,0,0,0.5],"51":[0.19444,0.43056,0,0,0.5],"52":[0.19444,0.43056,0,0,0.5],"53":[0.19444,0.43056,0,0,0.5],"54":[0,0.64444,0,0,0.5],"55":[0.19444,0.43056,0,0,0.5],"56":[0,0.64444,0,0,0.5],"57":[0.19444,0.43056,0,0,0.5],"65":[0,0.68333,0,0.13889,0.75],"66":[0,0.68333,0.05017,0.08334,0.75851],"67":[0,0.68333,0.07153,0.08334,0.71472],"68":[0,0.68333,0.02778,0.05556,0.82792],"69":[0,0.68333,0.05764,0.08334,0.7382],"70":[0,0.68333,0.13889,0.08334,0.64306],"71":[0,0.68333,0,0.08334,0.78625],"72":[0,0.68333,0.08125,0.05556,0.83125],"73":[0,0.68333,0.07847,0.11111,0.43958],"74":[0,0.68333,0.09618,0.16667,0.55451],"75":[0,0.68333,0.07153,0.05556,0.84931],"76":[0,0.68333,0,0.02778,0.68056],"77":[0,0.68333,0.10903,0.08334,0.97014],"78":[0,0.68333,0.10903,0.08334,0.80347],"79":[0,0.68333,0.02778,0.08334,0.76278],"80":[0,0.68333,0.13889,0.08334,0.64201],"81":[0.19444,0.68333,0,0.08334,0.79056],"82":[0,0.68333,0.00773,0.08334,0.75929],"83":[0,0.68333,0.05764,0.08334,0.6132],"84":[0,0.68333,0.13889,0.08334,0.58438],"85":[0,0.68333,0.10903,0.02778,0.68278],"86":[0,0.68333,0.22222,0,0.58333],"87":[0,0.68333,0.13889,0,0.94445],"88":[0,0.68333,0.07847,0.08334,0.82847],"89":[0,0.68333,0.22222,0,0.58056],"90":[0,0.68333,0.07153,0.08334,0.68264],"97":[0,0.43056,0,0,0.52859],"98":[0,0.69444,0,0,0.42917],"99":[0,0.43056,0,0.05556,0.43276],"100":[0,0.69444,0,0.16667,0.52049],"101":[0,0.43056,0,0.05556,0.46563],"102":[0.19444,0.69444,0.10764,0.16667,0.48959],"103":[0.19444,0.43056,0.03588,0.02778,0.47697],"104":[0,0.69444,0,0,0.57616],"105":[0,0.65952,0,0,0.34451],"106":[0.19444,0.65952,0.05724,0,0.41181],"107":[0,0.69444,0.03148,0,0.5206],"108":[0,0.69444,0.01968,0.08334,0.29838],"109":[0,0.43056,0,0,0.87801],"110":[0,0.43056,0,0,0.60023],"111":[0,0.43056,0,0.05556,0.48472],"112":[0.19444,0.43056,0,0.08334,0.50313],"113":[0.19444,0.43056,0.03588,0.08334,0.44641],"114":[0,0.43056,0.02778,0.05556,0.45116],"115":[0,0.43056,0,0.05556,0.46875],"116":[0,0.61508,0,0.08334,0.36111],"117":[0,0.43056,0,0.02778,0.57246],"118":[0,0.43056,0.03588,0.02778,0.48472],"119":[0,0.43056,0.02691,0.08334,0.71592],"120":[0,0.43056,0,0.02778,0.57153],"121":[0.19444,0.43056,0.03588,0.05556,0.49028],"122":[0,0.43056,0.04398,0.05556,0.46505],"160":[0,0,0,0,0.25],"915":[0,0.68333,0.13889,0.08334,0.61528],"916":[0,0.68333,0,0.16667,0.83334],"920":[0,0.68333,0.02778,0.08334,0.76278],"923":[0,0.68333,0,0.16667,0.69445],"926":[0,0.68333,0.07569,0.08334,0.74236],"928":[0,0.68333,0.08125,0.05556,0.83125],"931":[0,0.68333,0.05764,0.08334,0.77986],"933":[0,0.68333,0.13889,0.05556,0.58333],"934":[0,0.68333,0,0.08334,0.66667],"936":[0,0.68333,0.11,0.05556,0.61222],"937":[0,0.68333,0.05017,0.08334,0.7724],"945":[0,0.43056,0.0037,0.02778,0.6397],"946":[0.19444,0.69444,0.05278,0.08334,0.56563],"947":[0.19444,0.43056,0.05556,0,0.51773],"948":[0,0.69444,0.03785,0.05556,0.44444],"949":[0,0.43056,0,0.08334,0.46632],"950":[0.19444,0.69444,0.07378,0.08334,0.4375],"951":[0.19444,0.43056,0.03588,0.05556,0.49653],"952":[0,0.69444,0.02778,0.08334,0.46944],"953":[0,0.43056,0,0.05556,0.35394],"954":[0,0.43056,0,0,0.57616],"955":[0,0.69444,0,0,0.58334],"956":[0.19444,0.43056,0,0.02778,0.60255],"957":[0,0.43056,0.06366,0.02778,0.49398],"958":[0.19444,0.69444,0.04601,0.11111,0.4375],"959":[0,0.43056,0,0.05556,0.48472],"960":[0,0.43056,0.03588,0,0.57003],"961":[0.19444,0.43056,0,0.08334,0.51702],"962":[0.09722,0.43056,0.07986,0.08334,0.36285],"963":[0,0.43056,0.03588,0,0.57141],"964":[0,0.43056,0.1132,0.02778,0.43715],"965":[0,0.43056,0.03588,0.02778,0.54028],"966":[0.19444,0.43056,0,0.08334,0.65417],"967":[0.19444,0.43056,0,0.05556,0.62569],"968":[0.19444,0.69444,0.03588,0.11111,0.65139],"969":[0,0.43056,0.03588,0,0.62245],"977":[0,0.69444,0,0.08334,0.59144],"981":[0.19444,0.69444,0,0.08334,0.59583],"982":[0,0.43056,0.02778,0,0.82813],"1009":[0.19444,0.43056,0,0.08334,0.51702],"1013":[0,0.43056,0,0.05556,0.4059],"57649":[0,0.43056,0,0.02778,0.32246],"57911":[0.19444,0.43056,0,0.08334,0.38403]},"SansSerif-Bold":{"32":[0,0,0,0,0.25],"33":[0,0.69444,0,0,0.36667],"34":[0,0.69444,0,0,0.55834],"35":[0.19444,0.69444,0,0,0.91667],"36":[0.05556,0.75,0,0,0.55],"37":[0.05556,0.75,0,0,1.02912],"38":[0,0.69444,0,0,0.83056],"39":[0,0.69444,0,0,0.30556],"40":[0.25,0.75,0,0,0.42778],"41":[0.25,0.75,0,0,0.42778],"42":[0,0.75,0,0,0.55],"43":[0.11667,0.61667,0,0,0.85556],"44":[0.10556,0.13056,0,0,0.30556],"45":[0,0.45833,0,0,0.36667],"46":[0,0.13056,0,0,0.30556],"47":[0.25,0.75,0,0,0.55],"48":[0,0.69444,0,0,0.55],"49":[0,0.69444,0,0,0.55],"50":[0,0.69444,0,0,0.55],"51":[0,0.69444,0,0,0.55],"52":[0,0.69444,0,0,0.55],"53":[0,0.69444,0,0,0.55],"54":[0,0.69444,0,0,0.55],"55":[0,0.69444,0,0,0.55],"56":[0,0.69444,0,0,0.55],"57":[0,0.69444,0,0,0.55],"58":[0,0.45833,0,0,0.30556],"59":[0.10556,0.45833,0,0,0.30556],"61":[-0.09375,0.40625,0,0,0.85556],"63":[0,0.69444,0,0,0.51945],"64":[0,0.69444,0,0,0.73334],"65":[0,0.69444,0,0,0.73334],"66":[0,0.69444,0,0,0.73334],"67":[0,0.69444,0,0,0.70278],"68":[0,0.69444,0,0,0.79445],"69":[0,0.69444,0,0,0.64167],"70":[0,0.69444,0,0,0.61111],"71":[0,0.69444,0,0,0.73334],"72":[0,0.69444,0,0,0.79445],"73":[0,0.69444,0,0,0.33056],"74":[0,0.69444,0,0,0.51945],"75":[0,0.69444,0,0,0.76389],"76":[0,0.69444,0,0,0.58056],"77":[0,0.69444,0,0,0.97778],"78":[0,0.69444,0,0,0.79445],"79":[0,0.69444,0,0,0.79445],"80":[0,0.69444,0,0,0.70278],"81":[0.10556,0.69444,0,0,0.79445],"82":[0,0.69444,0,0,0.70278],"83":[0,0.69444,0,0,0.61111],"84":[0,0.69444,0,0,0.73334],"85":[0,0.69444,0,0,0.76389],"86":[0,0.69444,0.01528,0,0.73334],"87":[0,0.69444,0.01528,0,1.03889],"88":[0,0.69444,0,0,0.73334],"89":[0,0.69444,0.0275,0,0.73334],"90":[0,0.69444,0,0,0.67223],"91":[0.25,0.75,0,0,0.34306],"93":[0.25,0.75,0,0,0.34306],"94":[0,0.69444,0,0,0.55],"95":[0.35,0.10833,0.03056,0,0.55],"97":[0,0.45833,0,0,0.525],"98":[0,0.69444,0,0,0.56111],"99":[0,0.45833,0,0,0.48889],"100":[0,0.69444,0,0,0.56111],"101":[0,0.45833,0,0,0.51111],"102":[0,0.69444,0.07639,0,0.33611],"103":[0.19444,0.45833,0.01528,0,0.55],"104":[0,0.69444,0,0,0.56111],"105":[0,0.69444,0,0,0.25556],"106":[0.19444,0.69444,0,0,0.28611],"107":[0,0.69444,0,0,0.53056],"108":[0,0.69444,0,0,0.25556],"109":[0,0.45833,0,0,0.86667],"110":[0,0.45833,0,0,0.56111],"111":[0,0.45833,0,0,0.55],"112":[0.19444,0.45833,0,0,0.56111],"113":[0.19444,0.45833,0,0,0.56111],"114":[0,0.45833,0.01528,0,0.37222],"115":[0,0.45833,0,0,0.42167],"116":[0,0.58929,0,0,0.40417],"117":[0,0.45833,0,0,0.56111],"118":[0,0.45833,0.01528,0,0.5],"119":[0,0.45833,0.01528,0,0.74445],"120":[0,0.45833,0,0,0.5],"121":[0.19444,0.45833,0.01528,0,0.5],"122":[0,0.45833,0,0,0.47639],"126":[0.35,0.34444,0,0,0.55],"160":[0,0,0,0,0.25],"168":[0,0.69444,0,0,0.55],"176":[0,0.69444,0,0,0.73334],"180":[0,0.69444,0,0,0.55],"184":[0.17014,0,0,0,0.48889],"305":[0,0.45833,0,0,0.25556],"567":[0.19444,0.45833,0,0,0.28611],"710":[0,0.69444,0,0,0.55],"711":[0,0.63542,0,0,0.55],"713":[0,0.63778,0,0,0.55],"728":[0,0.69444,0,0,0.55],"729":[0,0.69444,0,0,0.30556],"730":[0,0.69444,0,0,0.73334],"732":[0,0.69444,0,0,0.55],"733":[0,0.69444,0,0,0.55],"915":[0,0.69444,0,0,0.58056],"916":[0,0.69444,0,0,0.91667],"920":[0,0.69444,0,0,0.85556],"923":[0,0.69444,0,0,0.67223],"926":[0,0.69444,0,0,0.73334],"928":[0,0.69444,0,0,0.79445],"931":[0,0.69444,0,0,0.79445],"933":[0,0.69444,0,0,0.85556],"934":[0,0.69444,0,0,0.79445],"936":[0,0.69444,0,0,0.85556],"937":[0,0.69444,0,0,0.79445],"8211":[0,0.45833,0.03056,0,0.55],"8212":[0,0.45833,0.03056,0,1.10001],"8216":[0,0.69444,0,0,0.30556],"8217":[0,0.69444,0,0,0.30556],"8220":[0,0.69444,0,0,0.55834],"8221":[0,0.69444,0,0,0.55834]},"SansSerif-Italic":{"32":[0,0,0,0,0.25],"33":[0,0.69444,0.05733,0,0.31945],"34":[0,0.69444,0.00316,0,0.5],"35":[0.19444,0.69444,0.05087,0,0.83334],"36":[0.05556,0.75,0.11156,0,0.5],"37":[0.05556,0.75,0.03126,0,0.83334],"38":[0,0.69444,0.03058,0,0.75834],"39":[0,0.69444,0.07816,0,0.27778],"40":[0.25,0.75,0.13164,0,0.38889],"41":[0.25,0.75,0.02536,0,0.38889],"42":[0,0.75,0.11775,0,0.5],"43":[0.08333,0.58333,0.02536,0,0.77778],"44":[0.125,0.08333,0,0,0.27778],"45":[0,0.44444,0.01946,0,0.33333],"46":[0,0.08333,0,0,0.27778],"47":[0.25,0.75,0.13164,0,0.5],"48":[0,0.65556,0.11156,0,0.5],"49":[0,0.65556,0.11156,0,0.5],"50":[0,0.65556,0.11156,0,0.5],"51":[0,0.65556,0.11156,0,0.5],"52":[0,0.65556,0.11156,0,0.5],"53":[0,0.65556,0.11156,0,0.5],"54":[0,0.65556,0.11156,0,0.5],"55":[0,0.65556,0.11156,0,0.5],"56":[0,0.65556,0.11156,0,0.5],"57":[0,0.65556,0.11156,0,0.5],"58":[0,0.44444,0.02502,0,0.27778],"59":[0.125,0.44444,0.02502,0,0.27778],"61":[-0.13,0.37,0.05087,0,0.77778],"63":[0,0.69444,0.11809,0,0.47222],"64":[0,0.69444,0.07555,0,0.66667],"65":[0,0.69444,0,0,0.66667],"66":[0,0.69444,0.08293,0,0.66667],"67":[0,0.69444,0.11983,0,0.63889],"68":[0,0.69444,0.07555,0,0.72223],"69":[0,0.69444,0.11983,0,0.59722],"70":[0,0.69444,0.13372,0,0.56945],"71":[0,0.69444,0.11983,0,0.66667],"72":[0,0.69444,0.08094,0,0.70834],"73":[0,0.69444,0.13372,0,0.27778],"74":[0,0.69444,0.08094,0,0.47222],"75":[0,0.69444,0.11983,0,0.69445],"76":[0,0.69444,0,0,0.54167],"77":[0,0.69444,0.08094,0,0.875],"78":[0,0.69444,0.08094,0,0.70834],"79":[0,0.69444,0.07555,0,0.73611],"80":[0,0.69444,0.08293,0,0.63889],"81":[0.125,0.69444,0.07555,0,0.73611],"82":[0,0.69444,0.08293,0,0.64584],"83":[0,0.69444,0.09205,0,0.55556],"84":[0,0.69444,0.13372,0,0.68056],"85":[0,0.69444,0.08094,0,0.6875],"86":[0,0.69444,0.1615,0,0.66667],"87":[0,0.69444,0.1615,0,0.94445],"88":[0,0.69444,0.13372,0,0.66667],"89":[0,0.69444,0.17261,0,0.66667],"90":[0,0.69444,0.11983,0,0.61111],"91":[0.25,0.75,0.15942,0,0.28889],"93":[0.25,0.75,0.08719,0,0.28889],"94":[0,0.69444,0.0799,0,0.5],"95":[0.35,0.09444,0.08616,0,0.5],"97":[0,0.44444,0.00981,0,0.48056],"98":[0,0.69444,0.03057,0,0.51667],"99":[0,0.44444,0.08336,0,0.44445],"100":[0,0.69444,0.09483,0,0.51667],"101":[0,0.44444,0.06778,0,0.44445],"102":[0,0.69444,0.21705,0,0.30556],"103":[0.19444,0.44444,0.10836,0,0.5],"104":[0,0.69444,0.01778,0,0.51667],"105":[0,0.67937,0.09718,0,0.23889],"106":[0.19444,0.67937,0.09162,0,0.26667],"107":[0,0.69444,0.08336,0,0.48889],"108":[0,0.69444,0.09483,0,0.23889],"109":[0,0.44444,0.01778,0,0.79445],"110":[0,0.44444,0.01778,0,0.51667],"111":[0,0.44444,0.06613,0,0.5],"112":[0.19444,0.44444,0.0389,0,0.51667],"113":[0.19444,0.44444,0.04169,0,0.51667],"114":[0,0.44444,0.10836,0,0.34167],"115":[0,0.44444,0.0778,0,0.38333],"116":[0,0.57143,0.07225,0,0.36111],"117":[0,0.44444,0.04169,0,0.51667],"118":[0,0.44444,0.10836,0,0.46111],"119":[0,0.44444,0.10836,0,0.68334],"120":[0,0.44444,0.09169,0,0.46111],"121":[0.19444,0.44444,0.10836,0,0.46111],"122":[0,0.44444,0.08752,0,0.43472],"126":[0.35,0.32659,0.08826,0,0.5],"160":[0,0,0,0,0.25],"168":[0,0.67937,0.06385,0,0.5],"176":[0,0.69444,0,0,0.73752],"184":[0.17014,0,0,0,0.44445],"305":[0,0.44444,0.04169,0,0.23889],"567":[0.19444,0.44444,0.04169,0,0.26667],"710":[0,0.69444,0.0799,0,0.5],"711":[0,0.63194,0.08432,0,0.5],"713":[0,0.60889,0.08776,0,0.5],"714":[0,0.69444,0.09205,0,0.5],"715":[0,0.69444,0,0,0.5],"728":[0,0.69444,0.09483,0,0.5],"729":[0,0.67937,0.07774,0,0.27778],"730":[0,0.69444,0,0,0.73752],"732":[0,0.67659,0.08826,0,0.5],"733":[0,0.69444,0.09205,0,0.5],"915":[0,0.69444,0.13372,0,0.54167],"916":[0,0.69444,0,0,0.83334],"920":[0,0.69444,0.07555,0,0.77778],"923":[0,0.69444,0,0,0.61111],"926":[0,0.69444,0.12816,0,0.66667],"928":[0,0.69444,0.08094,0,0.70834],"931":[0,0.69444,0.11983,0,0.72222],"933":[0,0.69444,0.09031,0,0.77778],"934":[0,0.69444,0.04603,0,0.72222],"936":[0,0.69444,0.09031,0,0.77778],"937":[0,0.69444,0.08293,0,0.72222],"8211":[0,0.44444,0.08616,0,0.5],"8212":[0,0.44444,0.08616,0,1.0],"8216":[0,0.69444,0.07816,0,0.27778],"8217":[0,0.69444,0.07816,0,0.27778],"8220":[0,0.69444,0.14205,0,0.5],"8221":[0,0.69444,0.00316,0,0.5]},"SansSerif-Regular":{"32":[0,0,0,0,0.25],"33":[0,0.69444,0,0,0.31945],"34":[0,0.69444,0,0,0.5],"35":[0.19444,0.69444,0,0,0.83334],"36":[0.05556,0.75,0,0,0.5],"37":[0.05556,0.75,0,0,0.83334],"38":[0,0.69444,0,0,0.75834],"39":[0,0.69444,0,0,0.27778],"40":[0.25,0.75,0,0,0.38889],"41":[0.25,0.75,0,0,0.38889],"42":[0,0.75,0,0,0.5],"43":[0.08333,0.58333,0,0,0.77778],"44":[0.125,0.08333,0,0,0.27778],"45":[0,0.44444,0,0,0.33333],"46":[0,0.08333,0,0,0.27778],"47":[0.25,0.75,0,0,0.5],"48":[0,0.65556,0,0,0.5],"49":[0,0.65556,0,0,0.5],"50":[0,0.65556,0,0,0.5],"51":[0,0.65556,0,0,0.5],"52":[0,0.65556,0,0,0.5],"53":[0,0.65556,0,0,0.5],"54":[0,0.65556,0,0,0.5],"55":[0,0.65556,0,0,0.5],"56":[0,0.65556,0,0,0.5],"57":[0,0.65556,0,0,0.5],"58":[0,0.44444,0,0,0.27778],"59":[0.125,0.44444,0,0,0.27778],"61":[-0.13,0.37,0,0,0.77778],"63":[0,0.69444,0,0,0.47222],"64":[0,0.69444,0,0,0.66667],"65":[0,0.69444,0,0,0.66667],"66":[0,0.69444,0,0,0.66667],"67":[0,0.69444,0,0,0.63889],"68":[0,0.69444,0,0,0.72223],"69":[0,0.69444,0,0,0.59722],"70":[0,0.69444,0,0,0.56945],"71":[0,0.69444,0,0,0.66667],"72":[0,0.69444,0,0,0.70834],"73":[0,0.69444,0,0,0.27778],"74":[0,0.69444,0,0,0.47222],"75":[0,0.69444,0,0,0.69445],"76":[0,0.69444,0,0,0.54167],"77":[0,0.69444,0,0,0.875],"78":[0,0.69444,0,0,0.70834],"79":[0,0.69444,0,0,0.73611],"80":[0,0.69444,0,0,0.63889],"81":[0.125,0.69444,0,0,0.73611],"82":[0,0.69444,0,0,0.64584],"83":[0,0.69444,0,0,0.55556],"84":[0,0.69444,0,0,0.68056],"85":[0,0.69444,0,0,0.6875],"86":[0,0.69444,0.01389,0,0.66667],"87":[0,0.69444,0.01389,0,0.94445],"88":[0,0.69444,0,0,0.66667],"89":[0,0.69444,0.025,0,0.66667],"90":[0,0.69444,0,0,0.61111],"91":[0.25,0.75,0,0,0.28889],"93":[0.25,0.75,0,0,0.28889],"94":[0,0.69444,0,0,0.5],"95":[0.35,0.09444,0.02778,0,0.5],"97":[0,0.44444,0,0,0.48056],"98":[0,0.69444,0,0,0.51667],"99":[0,0.44444,0,0,0.44445],"100":[0,0.69444,0,0,0.51667],"101":[0,0.44444,0,0,0.44445],"102":[0,0.69444,0.06944,0,0.30556],"103":[0.19444,0.44444,0.01389,0,0.5],"104":[0,0.69444,0,0,0.51667],"105":[0,0.67937,0,0,0.23889],"106":[0.19444,0.67937,0,0,0.26667],"107":[0,0.69444,0,0,0.48889],"108":[0,0.69444,0,0,0.23889],"109":[0,0.44444,0,0,0.79445],"110":[0,0.44444,0,0,0.51667],"111":[0,0.44444,0,0,0.5],"112":[0.19444,0.44444,0,0,0.51667],"113":[0.19444,0.44444,0,0,0.51667],"114":[0,0.44444,0.01389,0,0.34167],"115":[0,0.44444,0,0,0.38333],"116":[0,0.57143,0,0,0.36111],"117":[0,0.44444,0,0,0.51667],"118":[0,0.44444,0.01389,0,0.46111],"119":[0,0.44444,0.01389,0,0.68334],"120":[0,0.44444,0,0,0.46111],"121":[0.19444,0.44444,0.01389,0,0.46111],"122":[0,0.44444,0,0,0.43472],"126":[0.35,0.32659,0,0,0.5],"160":[0,0,0,0,0.25],"168":[0,0.67937,0,0,0.5],"176":[0,0.69444,0,0,0.66667],"184":[0.17014,0,0,0,0.44445],"305":[0,0.44444,0,0,0.23889],"567":[0.19444,0.44444,0,0,0.26667],"710":[0,0.69444,0,0,0.5],"711":[0,0.63194,0,0,0.5],"713":[0,0.60889,0,0,0.5],"714":[0,0.69444,0,0,0.5],"715":[0,0.69444,0,0,0.5],"728":[0,0.69444,0,0,0.5],"729":[0,0.67937,0,0,0.27778],"730":[0,0.69444,0,0,0.66667],"732":[0,0.67659,0,0,0.5],"733":[0,0.69444,0,0,0.5],"915":[0,0.69444,0,0,0.54167],"916":[0,0.69444,0,0,0.83334],"920":[0,0.69444,0,0,0.77778],"923":[0,0.69444,0,0,0.61111],"926":[0,0.69444,0,0,0.66667],"928":[0,0.69444,0,0,0.70834],"931":[0,0.69444,0,0,0.72222],"933":[0,0.69444,0,0,0.77778],"934":[0,0.69444,0,0,0.72222],"936":[0,0.69444,0,0,0.77778],"937":[0,0.69444,0,0,0.72222],"8211":[0,0.44444,0.02778,0,0.5],"8212":[0,0.44444,0.02778,0,1.0],"8216":[0,0.69444,0,0,0.27778],"8217":[0,0.69444,0,0,0.27778],"8220":[0,0.69444,0,0,0.5],"8221":[0,0.69444,0,0,0.5]},"Script-Regular":{"32":[0,0,0,0,0.25],"65":[0,0.7,0.22925,0,0.80253],"66":[0,0.7,0.04087,0,0.90757],"67":[0,0.7,0.1689,0,0.66619],"68":[0,0.7,0.09371,0,0.77443],"69":[0,0.7,0.18583,0,0.56162],"70":[0,0.7,0.13634,0,0.89544],"71":[0,0.7,0.17322,0,0.60961],"72":[0,0.7,0.29694,0,0.96919],"73":[0,0.7,0.19189,0,0.80907],"74":[0.27778,0.7,0.19189,0,1.05159],"75":[0,0.7,0.31259,0,0.91364],"76":[0,0.7,0.19189,0,0.87373],"77":[0,0.7,0.15981,0,1.08031],"78":[0,0.7,0.3525,0,0.9015],"79":[0,0.7,0.08078,0,0.73787],"80":[0,0.7,0.08078,0,1.01262],"81":[0,0.7,0.03305,0,0.88282],"82":[0,0.7,0.06259,0,0.85],"83":[0,0.7,0.19189,0,0.86767],"84":[0,0.7,0.29087,0,0.74697],"85":[0,0.7,0.25815,0,0.79996],"86":[0,0.7,0.27523,0,0.62204],"87":[0,0.7,0.27523,0,0.80532],"88":[0,0.7,0.26006,0,0.94445],"89":[0,0.7,0.2939,0,0.70961],"90":[0,0.7,0.24037,0,0.8212],"160":[0,0,0,0,0.25]},"Size1-Regular":{"32":[0,0,0,0,0.25],"40":[0.35001,0.85,0,0,0.45834],"41":[0.35001,0.85,0,0,0.45834],"47":[0.35001,0.85,0,0,0.57778],"91":[0.35001,0.85,0,0,0.41667],"92":[0.35001,0.85,0,0,0.57778],"93":[0.35001,0.85,0,0,0.41667],"123":[0.35001,0.85,0,0,0.58334],"125":[0.35001,0.85,0,0,0.58334],"160":[0,0,0,0,0.25],"710":[0,0.72222,0,0,0.55556],"732":[0,0.72222,0,0,0.55556],"770":[0,0.72222,0,0,0.55556],"771":[0,0.72222,0,0,0.55556],"8214":[-0.00099,0.601,0,0,0.77778],"8593":[1e-05,0.6,0,0,0.66667],"8595":[1e-05,0.6,0,0,0.66667],"8657":[1e-05,0.6,0,0,0.77778],"8659":[1e-05,0.6,0,0,0.77778],"8719":[0.25001,0.75,0,0,0.94445],"8720":[0.25001,0.75,0,0,0.94445],"8721":[0.25001,0.75,0,0,1.05556],"8730":[0.35001,0.85,0,0,1.0],"8739":[-0.00599,0.606,0,0,0.33333],"8741":[-0.00599,0.606,0,0,0.55556],"8747":[0.30612,0.805,0.19445,0,0.47222],"8748":[0.306,0.805,0.19445,0,0.47222],"8749":[0.306,0.805,0.19445,0,0.47222],"8750":[0.30612,0.805,0.19445,0,0.47222],"8896":[0.25001,0.75,0,0,0.83334],"8897":[0.25001,0.75,0,0,0.83334],"8898":[0.25001,0.75,0,0,0.83334],"8899":[0.25001,0.75,0,0,0.83334],"8968":[0.35001,0.85,0,0,0.47222],"8969":[0.35001,0.85,0,0,0.47222],"8970":[0.35001,0.85,0,0,0.47222],"8971":[0.35001,0.85,0,0,0.47222],"9168":[-0.00099,0.601,0,0,0.66667],"10216":[0.35001,0.85,0,0,0.47222],"10217":[0.35001,0.85,0,0,0.47222],"10752":[0.25001,0.75,0,0,1.11111],"10753":[0.25001,0.75,0,0,1.11111],"10754":[0.25001,0.75,0,0,1.11111],"10756":[0.25001,0.75,0,0,0.83334],"10758":[0.25001,0.75,0,0,0.83334]},"Size2-Regular":{"32":[0,0,0,0,0.25],"40":[0.65002,1.15,0,0,0.59722],"41":[0.65002,1.15,0,0,0.59722],"47":[0.65002,1.15,0,0,0.81111],"91":[0.65002,1.15,0,0,0.47222],"92":[0.65002,1.15,0,0,0.81111],"93":[0.65002,1.15,0,0,0.47222],"123":[0.65002,1.15,0,0,0.66667],"125":[0.65002,1.15,0,0,0.66667],"160":[0,0,0,0,0.25],"710":[0,0.75,0,0,1.0],"732":[0,0.75,0,0,1.0],"770":[0,0.75,0,0,1.0],"771":[0,0.75,0,0,1.0],"8719":[0.55001,1.05,0,0,1.27778],"8720":[0.55001,1.05,0,0,1.27778],"8721":[0.55001,1.05,0,0,1.44445],"8730":[0.65002,1.15,0,0,1.0],"8747":[0.86225,1.36,0.44445,0,0.55556],"8748":[0.862,1.36,0.44445,0,0.55556],"8749":[0.862,1.36,0.44445,0,0.55556],"8750":[0.86225,1.36,0.44445,0,0.55556],"8896":[0.55001,1.05,0,0,1.11111],"8897":[0.55001,1.05,0,0,1.11111],"8898":[0.55001,1.05,0,0,1.11111],"8899":[0.55001,1.05,0,0,1.11111],"8968":[0.65002,1.15,0,0,0.52778],"8969":[0.65002,1.15,0,0,0.52778],"8970":[0.65002,1.15,0,0,0.52778],"8971":[0.65002,1.15,0,0,0.52778],"10216":[0.65002,1.15,0,0,0.61111],"10217":[0.65002,1.15,0,0,0.61111],"10752":[0.55001,1.05,0,0,1.51112],"10753":[0.55001,1.05,0,0,1.51112],"10754":[0.55001,1.05,0,0,1.51112],"10756":[0.55001,1.05,0,0,1.11111],"10758":[0.55001,1.05,0,0,1.11111]},"Size3-Regular":{"32":[0,0,0,0,0.25],"40":[0.95003,1.45,0,0,0.73611],"41":[0.95003,1.45,0,0,0.73611],"47":[0.95003,1.45,0,0,1.04445],"91":[0.95003,1.45,0,0,0.52778],"92":[0.95003,1.45,0,0,1.04445],"93":[0.95003,1.45,0,0,0.52778],"123":[0.95003,1.45,0,0,0.75],"125":[0.95003,1.45,0,0,0.75],"160":[0,0,0,0,0.25],"710":[0,0.75,0,0,1.44445],"732":[0,0.75,0,0,1.44445],"770":[0,0.75,0,0,1.44445],"771":[0,0.75,0,0,1.44445],"8730":[0.95003,1.45,0,0,1.0],"8968":[0.95003,1.45,0,0,0.58334],"8969":[0.95003,1.45,0,0,0.58334],"8970":[0.95003,1.45,0,0,0.58334],"8971":[0.95003,1.45,0,0,0.58334],"10216":[0.95003,1.45,0,0,0.75],"10217":[0.95003,1.45,0,0,0.75]},"Size4-Regular":{"32":[0,0,0,0,0.25],"40":[1.25003,1.75,0,0,0.79167],"41":[1.25003,1.75,0,0,0.79167],"47":[1.25003,1.75,0,0,1.27778],"91":[1.25003,1.75,0,0,0.58334],"92":[1.25003,1.75,0,0,1.27778],"93":[1.25003,1.75,0,0,0.58334],"123":[1.25003,1.75,0,0,0.80556],"125":[1.25003,1.75,0,0,0.80556],"160":[0,0,0,0,0.25],"710":[0,0.825,0,0,1.8889],"732":[0,0.825,0,0,1.8889],"770":[0,0.825,0,0,1.8889],"771":[0,0.825,0,0,1.8889],"8730":[1.25003,1.75,0,0,1.0],"8968":[1.25003,1.75,0,0,0.63889],"8969":[1.25003,1.75,0,0,0.63889],"8970":[1.25003,1.75,0,0,0.63889],"8971":[1.25003,1.75,0,0,0.63889],"9115":[0.64502,1.155,0,0,0.875],"9116":[1e-05,0.6,0,0,0.875],"9117":[0.64502,1.155,0,0,0.875],"9118":[0.64502,1.155,0,0,0.875],"9119":[1e-05,0.6,0,0,0.875],"9120":[0.64502,1.155,0,0,0.875],"9121":[0.64502,1.155,0,0,0.66667],"9122":[-0.00099,0.601,0,0,0.66667],"9123":[0.64502,1.155,0,0,0.66667],"9124":[0.64502,1.155,0,0,0.66667],"9125":[-0.00099,0.601,0,0,0.66667],"9126":[0.64502,1.155,0,0,0.66667],"9127":[1e-05,0.9,0,0,0.88889],"9128":[0.65002,1.15,0,0,0.88889],"9129":[0.90001,0,0,0,0.88889],"9130":[0,0.3,0,0,0.88889],"9131":[1e-05,0.9,0,0,0.88889],"9132":[0.65002,1.15,0,0,0.88889],"9133":[0.90001,0,0,0,0.88889],"9143":[0.88502,0.915,0,0,1.05556],"10216":[1.25003,1.75,0,0,0.80556],"10217":[1.25003,1.75,0,0,0.80556],"57344":[-0.00499,0.605,0,0,1.05556],"57345":[-0.00499,0.605,0,0,1.05556],"57680":[0,0.12,0,0,0.45],"57681":[0,0.12,0,0,0.45],"57682":[0,0.12,0,0,0.45],"57683":[0,0.12,0,0,0.45]},"Typewriter-Regular":{"32":[0,0,0,0,0.525],"33":[0,0.61111,0,0,0.525],"34":[0,0.61111,0,0,0.525],"35":[0,0.61111,0,0,0.525],"36":[0.08333,0.69444,0,0,0.525],"37":[0.08333,0.69444,0,0,0.525],"38":[0,0.61111,0,0,0.525],"39":[0,0.61111,0,0,0.525],"40":[0.08333,0.69444,0,0,0.525],"41":[0.08333,0.69444,0,0,0.525],"42":[0,0.52083,0,0,0.525],"43":[-0.08056,0.53055,0,0,0.525],"44":[0.13889,0.125,0,0,0.525],"45":[-0.08056,0.53055,0,0,0.525],"46":[0,0.125,0,0,0.525],"47":[0.08333,0.69444,0,0,0.525],"48":[0,0.61111,0,0,0.525],"49":[0,0.61111,0,0,0.525],"50":[0,0.61111,0,0,0.525],"51":[0,0.61111,0,0,0.525],"52":[0,0.61111,0,0,0.525],"53":[0,0.61111,0,0,0.525],"54":[0,0.61111,0,0,0.525],"55":[0,0.61111,0,0,0.525],"56":[0,0.61111,0,0,0.525],"57":[0,0.61111,0,0,0.525],"58":[0,0.43056,0,0,0.525],"59":[0.13889,0.43056,0,0,0.525],"60":[-0.05556,0.55556,0,0,0.525],"61":[-0.19549,0.41562,0,0,0.525],"62":[-0.05556,0.55556,0,0,0.525],"63":[0,0.61111,0,0,0.525],"64":[0,0.61111,0,0,0.525],"65":[0,0.61111,0,0,0.525],"66":[0,0.61111,0,0,0.525],"67":[0,0.61111,0,0,0.525],"68":[0,0.61111,0,0,0.525],"69":[0,0.61111,0,0,0.525],"70":[0,0.61111,0,0,0.525],"71":[0,0.61111,0,0,0.525],"72":[0,0.61111,0,0,0.525],"73":[0,0.61111,0,0,0.525],"74":[0,0.61111,0,0,0.525],"75":[0,0.61111,0,0,0.525],"76":[0,0.61111,0,0,0.525],"77":[0,0.61111,0,0,0.525],"78":[0,0.61111,0,0,0.525],"79":[0,0.61111,0,0,0.525],"80":[0,0.61111,0,0,0.525],"81":[0.13889,0.61111,0,0,0.525],"82":[0,0.61111,0,0,0.525],"83":[0,0.61111,0,0,0.525],"84":[0,0.61111,0,0,0.525],"85":[0,0.61111,0,0,0.525],"86":[0,0.61111,0,0,0.525],"87":[0,0.61111,0,0,0.525],"88":[0,0.61111,0,0,0.525],"89":[0,0.61111,0,0,0.525],"90":[0,0.61111,0,0,0.525],"91":[0.08333,0.69444,0,0,0.525],"92":[0.08333,0.69444,0,0,0.525],"93":[0.08333,0.69444,0,0,0.525],"94":[0,0.61111,0,0,0.525],"95":[0.09514,0,0,0,0.525],"96":[0,0.61111,0,0,0.525],"97":[0,0.43056,0,0,0.525],"98":[0,0.61111,0,0,0.525],"99":[0,0.43056,0,0,0.525],"100":[0,0.61111,0,0,0.525],"101":[0,0.43056,0,0,0.525],"102":[0,0.61111,0,0,0.525],"103":[0.22222,0.43056,0,0,0.525],"104":[0,0.61111,0,0,0.525],"105":[0,0.61111,0,0,0.525],"106":[0.22222,0.61111,0,0,0.525],"107":[0,0.61111,0,0,0.525],"108":[0,0.61111,0,0,0.525],"109":[0,0.43056,0,0,0.525],"110":[0,0.43056,0,0,0.525],"111":[0,0.43056,0,0,0.525],"112":[0.22222,0.43056,0,0,0.525],"113":[0.22222,0.43056,0,0,0.525],"114":[0,0.43056,0,0,0.525],"115":[0,0.43056,0,0,0.525],"116":[0,0.55358,0,0,0.525],"117":[0,0.43056,0,0,0.525],"118":[0,0.43056,0,0,0.525],"119":[0,0.43056,0,0,0.525],"120":[0,0.43056,0,0,0.525],"121":[0.22222,0.43056,0,0,0.525],"122":[0,0.43056,0,0,0.525],"123":[0.08333,0.69444,0,0,0.525],"124":[0.08333,0.69444,0,0,0.525],"125":[0.08333,0.69444,0,0,0.525],"126":[0,0.61111,0,0,0.525],"127":[0,0.61111,0,0,0.525],"160":[0,0,0,0,0.525],"176":[0,0.61111,0,0,0.525],"184":[0.19445,0,0,0,0.525],"305":[0,0.43056,0,0,0.525],"567":[0.22222,0.43056,0,0,0.525],"711":[0,0.56597,0,0,0.525],"713":[0,0.56555,0,0,0.525],"714":[0,0.61111,0,0,0.525],"715":[0,0.61111,0,0,0.525],"728":[0,0.61111,0,0,0.525],"730":[0,0.61111,0,0,0.525],"770":[0,0.61111,0,0,0.525],"771":[0,0.61111,0,0,0.525],"776":[0,0.61111,0,0,0.525],"915":[0,0.61111,0,0,0.525],"916":[0,0.61111,0,0,0.525],"920":[0,0.61111,0,0,0.525],"923":[0,0.61111,0,0,0.525],"926":[0,0.61111,0,0,0.525],"928":[0,0.61111,0,0,0.525],"931":[0,0.61111,0,0,0.525],"933":[0,0.61111,0,0,0.525],"934":[0,0.61111,0,0,0.525],"936":[0,0.61111,0,0,0.525],"937":[0,0.61111,0,0,0.525],"8216":[0,0.61111,0,0,0.525],"8217":[0,0.61111,0,0,0.525],"8242":[0,0.61111,0,0,0.525],"9251":[0.11111,0.21944,0,0,0.525]}};/**
       * This file contains metrics regarding fonts and individual symbols. The sigma
       * and xi variables, as well as the metricMap map contain data extracted from
       * TeX, TeX font metrics, and the TTF files. These data are then exposed via the
       * `metrics` variable and the getCharacterMetrics function.
       */ // In TeX, there are actually three sets of dimensions, one for each of
  // textstyle (size index 5 and higher: >=9pt), scriptstyle (size index 3 and 4:
  // 7-8pt), and scriptscriptstyle (size index 1 and 2: 5-6pt).  These are
  // provided in the the arrays below, in that order.
  //
  // The font metrics are stored in fonts cmsy10, cmsy7, and cmsy5 respsectively.
  // This was determined by running the following script:
  //
  //     latex -interaction=nonstopmode \
  //     '\documentclass{article}\usepackage{amsmath}\begin{document}' \
  //     '$a$ \expandafter\show\the\textfont2' \
  //     '\expandafter\show\the\scriptfont2' \
  //     '\expandafter\show\the\scriptscriptfont2' \
  //     '\stop'
  //
  // The metrics themselves were retreived using the following commands:
  //
  //     tftopl cmsy10
  //     tftopl cmsy7
  //     tftopl cmsy5
  //
  // The output of each of these commands is quite lengthy.  The only part we
  // care about is the FONTDIMEN section. Each value is measured in EMs.
  var sigmasAndXis={slant:[0.250,0.250,0.250],// sigma1
  space:[0.000,0.000,0.000],// sigma2
  stretch:[0.000,0.000,0.000],// sigma3
  shrink:[0.000,0.000,0.000],// sigma4
  xHeight:[0.431,0.431,0.431],// sigma5
  quad:[1.000,1.171,1.472],// sigma6
  extraSpace:[0.000,0.000,0.000],// sigma7
  num1:[0.677,0.732,0.925],// sigma8
  num2:[0.394,0.384,0.387],// sigma9
  num3:[0.444,0.471,0.504],// sigma10
  denom1:[0.686,0.752,1.025],// sigma11
  denom2:[0.345,0.344,0.532],// sigma12
  sup1:[0.413,0.503,0.504],// sigma13
  sup2:[0.363,0.431,0.404],// sigma14
  sup3:[0.289,0.286,0.294],// sigma15
  sub1:[0.150,0.143,0.200],// sigma16
  sub2:[0.247,0.286,0.400],// sigma17
  supDrop:[0.386,0.353,0.494],// sigma18
  subDrop:[0.050,0.071,0.100],// sigma19
  delim1:[2.390,1.700,1.980],// sigma20
  delim2:[1.010,1.157,1.420],// sigma21
  axisHeight:[0.250,0.250,0.250],// sigma22
  // These font metrics are extracted from TeX by using tftopl on cmex10.tfm;
  // they correspond to the font parameters of the extension fonts (family 3).
  // See the TeXbook, page 441. In AMSTeX, the extension fonts scale; to
  // match cmex7, we'd use cmex7.tfm values for script and scriptscript
  // values.
  defaultRuleThickness:[0.04,0.049,0.049],// xi8; cmex7: 0.049
  bigOpSpacing1:[0.111,0.111,0.111],// xi9
  bigOpSpacing2:[0.166,0.166,0.166],// xi10
  bigOpSpacing3:[0.2,0.2,0.2],// xi11
  bigOpSpacing4:[0.6,0.611,0.611],// xi12; cmex7: 0.611
  bigOpSpacing5:[0.1,0.143,0.143],// xi13; cmex7: 0.143
  // The \sqrt rule width is taken from the height of the surd character.
  // Since we use the same font at all sizes, this thickness doesn't scale.
  sqrtRuleThickness:[0.04,0.04,0.04],// This value determines how large a pt is, for metrics which are defined
  // in terms of pts.
  // This value is also used in katex.less; if you change it make sure the
  // values match.
  ptPerEm:[10.0,10.0,10.0],// The space between adjacent `|` columns in an array definition. From
  // `\showthe\doublerulesep` in LaTeX. Equals 2.0 / ptPerEm.
  doubleRuleSep:[0.2,0.2,0.2],// The width of separator lines in {array} environments. From
  // `\showthe\arrayrulewidth` in LaTeX. Equals 0.4 / ptPerEm.
  arrayRuleWidth:[0.04,0.04,0.04],// Two values from LaTeX source2e:
  fboxsep:[0.3,0.3,0.3],//        3 pt / ptPerEm
  fboxrule:[0.04,0.04,0.04]// 0.4 pt / ptPerEm
  };// This map contains a mapping from font name and character code to character
  // metrics, including height, depth, italic correction, and skew (kern from the
  // character to the corresponding \skewchar)
  // This map is generated via `make metrics`. It should not be changed manually.
  // These are very rough approximations.  We default to Times New Roman which
  // should have Latin-1 and Cyrillic characters, but may not depending on the
  // operating system.  The metrics do not account for extra height from the
  // accents.  In the case of Cyrillic characters which have both ascenders and
  // descenders we prefer approximations with ascenders, primarily to prevent
  // the fraction bar or root line from intersecting the glyph.
  // TODO(kevinb) allow union of multiple glyph metrics for better accuracy.
  var extraCharacterMap={// Latin-1
  'Å':'A','Ð':'D','Þ':'o','å':'a','ð':'d','þ':'o',// Cyrillic
  'А':'A','Б':'B','В':'B','Г':'F','Д':'A','Е':'E','Ж':'K','З':'3','И':'N','Й':'N','К':'K','Л':'N','М':'M','Н':'H','О':'O','П':'N','Р':'P','С':'C','Т':'T','У':'y','Ф':'O','Х':'X','Ц':'U','Ч':'h','Ш':'W','Щ':'W','Ъ':'B','Ы':'X','Ь':'B','Э':'3','Ю':'X','Я':'R','а':'a','б':'b','в':'a','г':'r','д':'y','е':'e','ж':'m','з':'e','и':'n','й':'n','к':'n','л':'n','м':'m','н':'n','о':'o','п':'n','р':'p','с':'c','т':'o','у':'y','ф':'b','х':'x','ц':'n','ч':'n','ш':'w','щ':'w','ъ':'a','ы':'m','ь':'a','э':'e','ю':'m','я':'r'};/**
       * This function adds new font metrics to default metricMap
       * It can also override existing metrics
       */function setFontMetrics(fontName,metrics){fontMetricsData[fontName]=metrics;}/**
       * This function is a convenience function for looking up information in the
       * metricMap table. It takes a character as a string, and a font.
       *
       * Note: the `width` property may be undefined if fontMetricsData.js wasn't
       * built using `Make extended_metrics`.
       */function getCharacterMetrics(character,font,mode){if(!fontMetricsData[font]){throw new Error("Font metrics not found for font: "+font+".");}var ch=character.charCodeAt(0);var metrics=fontMetricsData[font][ch];if(!metrics&&character[0]in extraCharacterMap){ch=extraCharacterMap[character[0]].charCodeAt(0);metrics=fontMetricsData[font][ch];}if(!metrics&&mode==='text'){// We don't typically have font metrics for Asian scripts.
  // But since we support them in text mode, we need to return
  // some sort of metrics.
  // So if the character is in a script we support but we
  // don't have metrics for it, just use the metrics for
  // the Latin capital letter M. This is close enough because
  // we (currently) only care about the height of the glpyh
  // not its width.
  if(supportedCodepoint(ch)){metrics=fontMetricsData[font][77];// 77 is the charcode for 'M'
  }}if(metrics){return {depth:metrics[0],height:metrics[1],italic:metrics[2],skew:metrics[3],width:metrics[4]};}}var fontMetricsBySizeIndex={};/**
       * Get the font metrics for a given size.
       */function getGlobalMetrics(size){var sizeIndex;if(size>=5){sizeIndex=0;}else if(size>=3){sizeIndex=1;}else{sizeIndex=2;}if(!fontMetricsBySizeIndex[sizeIndex]){var metrics=fontMetricsBySizeIndex[sizeIndex]={cssEmPerMu:sigmasAndXis.quad[sizeIndex]/18};for(var key in sigmasAndXis){if(sigmasAndXis.hasOwnProperty(key)){metrics[key]=sigmasAndXis[key][sizeIndex];}}}return fontMetricsBySizeIndex[sizeIndex];}/**
       * This file holds a list of all no-argument functions and single-character
       * symbols (like 'a' or ';').
       *
       * For each of the symbols, there are three properties they can have:
       * - font (required): the font to be used for this symbol. Either "main" (the
       normal font), or "ams" (the ams fonts).
       * - group (required): the ParseNode group type the symbol should have (i.e.
       "textord", "mathord", etc).
       See https://github.com/KaTeX/KaTeX/wiki/Examining-TeX#group-types
       * - replace: the character that this symbol or function should be
       *   replaced with (i.e. "\phi" has a replace value of "\u03d5", the phi
       *   character in the main font).
       *
       * The outermost map in the table indicates what mode the symbols should be
       * accepted in (e.g. "math" or "text").
       */ // Some of these have a "-token" suffix since these are also used as `ParseNode`
  // types for raw text tokens, and we want to avoid conflicts with higher-level
  // `ParseNode` types. These `ParseNode`s are constructed within `Parser` by
  // looking up the `symbols` map.
  var ATOMS={"bin":1,"close":1,"inner":1,"open":1,"punct":1,"rel":1};var NON_ATOMS={"accent-token":1,"mathord":1,"op-token":1,"spacing":1,"textord":1};var symbols={"math":{},"text":{}};/* harmony default export */var src_symbols=symbols;/** `acceptUnicodeChar = true` is only applicable if `replace` is set. */function defineSymbol(mode,font,group,replace,name,acceptUnicodeChar){symbols[mode][name]={font:font,group:group,replace:replace};if(acceptUnicodeChar&&replace){symbols[mode][replace]=symbols[mode][name];}}// Some abbreviations for commonly used strings.
  // This helps minify the code, and also spotting typos using jshint.
  // modes:
  var math="math";var symbols_text="text";// fonts:
  var main="main";var ams="ams";// groups:
  var accent="accent-token";var bin="bin";var symbols_close="close";var inner="inner";var mathord="mathord";var op="op-token";var symbols_open="open";var punct="punct";var rel="rel";var spacing="spacing";var textord="textord";// Now comes the symbol table
  // Relation Symbols
  defineSymbol(math,main,rel,"\u2261","\\equiv",true);defineSymbol(math,main,rel,"\u227A","\\prec",true);defineSymbol(math,main,rel,"\u227B","\\succ",true);defineSymbol(math,main,rel,"\u223C","\\sim",true);defineSymbol(math,main,rel,"\u22A5","\\perp");defineSymbol(math,main,rel,"\u2AAF","\\preceq",true);defineSymbol(math,main,rel,"\u2AB0","\\succeq",true);defineSymbol(math,main,rel,"\u2243","\\simeq",true);defineSymbol(math,main,rel,"\u2223","\\mid",true);defineSymbol(math,main,rel,"\u226A","\\ll",true);defineSymbol(math,main,rel,"\u226B","\\gg",true);defineSymbol(math,main,rel,"\u224D","\\asymp",true);defineSymbol(math,main,rel,"\u2225","\\parallel");defineSymbol(math,main,rel,"\u22C8","\\bowtie",true);defineSymbol(math,main,rel,"\u2323","\\smile",true);defineSymbol(math,main,rel,"\u2291","\\sqsubseteq",true);defineSymbol(math,main,rel,"\u2292","\\sqsupseteq",true);defineSymbol(math,main,rel,"\u2250","\\doteq",true);defineSymbol(math,main,rel,"\u2322","\\frown",true);defineSymbol(math,main,rel,"\u220B","\\ni",true);defineSymbol(math,main,rel,"\u221D","\\propto",true);defineSymbol(math,main,rel,"\u22A2","\\vdash",true);defineSymbol(math,main,rel,"\u22A3","\\dashv",true);defineSymbol(math,main,rel,"\u220B","\\owns");// Punctuation
  defineSymbol(math,main,punct,".","\\ldotp");defineSymbol(math,main,punct,"\u22C5","\\cdotp");// Misc Symbols
  defineSymbol(math,main,textord,"#","\\#");defineSymbol(symbols_text,main,textord,"#","\\#");defineSymbol(math,main,textord,"&","\\&");defineSymbol(symbols_text,main,textord,"&","\\&");defineSymbol(math,main,textord,"\u2135","\\aleph",true);defineSymbol(math,main,textord,"\u2200","\\forall",true);defineSymbol(math,main,textord,"\u210F","\\hbar",true);defineSymbol(math,main,textord,"\u2203","\\exists",true);defineSymbol(math,main,textord,"\u2207","\\nabla",true);defineSymbol(math,main,textord,"\u266D","\\flat",true);defineSymbol(math,main,textord,"\u2113","\\ell",true);defineSymbol(math,main,textord,"\u266E","\\natural",true);defineSymbol(math,main,textord,"\u2663","\\clubsuit",true);defineSymbol(math,main,textord,"\u2118","\\wp",true);defineSymbol(math,main,textord,"\u266F","\\sharp",true);defineSymbol(math,main,textord,"\u2662","\\diamondsuit",true);defineSymbol(math,main,textord,"\u211C","\\Re",true);defineSymbol(math,main,textord,"\u2661","\\heartsuit",true);defineSymbol(math,main,textord,"\u2111","\\Im",true);defineSymbol(math,main,textord,"\u2660","\\spadesuit",true);defineSymbol(math,main,textord,"\xA7","\\S",true);defineSymbol(symbols_text,main,textord,"\xA7","\\S");defineSymbol(math,main,textord,"\xB6","\\P",true);defineSymbol(symbols_text,main,textord,"\xB6","\\P");// Math and Text
  defineSymbol(math,main,textord,"\u2020","\\dag");defineSymbol(symbols_text,main,textord,"\u2020","\\dag");defineSymbol(symbols_text,main,textord,"\u2020","\\textdagger");defineSymbol(math,main,textord,"\u2021","\\ddag");defineSymbol(symbols_text,main,textord,"\u2021","\\ddag");defineSymbol(symbols_text,main,textord,"\u2021","\\textdaggerdbl");// Large Delimiters
  defineSymbol(math,main,symbols_close,"\u23B1","\\rmoustache",true);defineSymbol(math,main,symbols_open,"\u23B0","\\lmoustache",true);defineSymbol(math,main,symbols_close,"\u27EF","\\rgroup",true);defineSymbol(math,main,symbols_open,"\u27EE","\\lgroup",true);// Binary Operators
  defineSymbol(math,main,bin,"\u2213","\\mp",true);defineSymbol(math,main,bin,"\u2296","\\ominus",true);defineSymbol(math,main,bin,"\u228E","\\uplus",true);defineSymbol(math,main,bin,"\u2293","\\sqcap",true);defineSymbol(math,main,bin,"\u2217","\\ast");defineSymbol(math,main,bin,"\u2294","\\sqcup",true);defineSymbol(math,main,bin,"\u25EF","\\bigcirc",true);defineSymbol(math,main,bin,"\u2219","\\bullet");defineSymbol(math,main,bin,"\u2021","\\ddagger");defineSymbol(math,main,bin,"\u2240","\\wr",true);defineSymbol(math,main,bin,"\u2A3F","\\amalg");defineSymbol(math,main,bin,"&","\\And");// from amsmath
  // Arrow Symbols
  defineSymbol(math,main,rel,"\u27F5","\\longleftarrow",true);defineSymbol(math,main,rel,"\u21D0","\\Leftarrow",true);defineSymbol(math,main,rel,"\u27F8","\\Longleftarrow",true);defineSymbol(math,main,rel,"\u27F6","\\longrightarrow",true);defineSymbol(math,main,rel,"\u21D2","\\Rightarrow",true);defineSymbol(math,main,rel,"\u27F9","\\Longrightarrow",true);defineSymbol(math,main,rel,"\u2194","\\leftrightarrow",true);defineSymbol(math,main,rel,"\u27F7","\\longleftrightarrow",true);defineSymbol(math,main,rel,"\u21D4","\\Leftrightarrow",true);defineSymbol(math,main,rel,"\u27FA","\\Longleftrightarrow",true);defineSymbol(math,main,rel,"\u21A6","\\mapsto",true);defineSymbol(math,main,rel,"\u27FC","\\longmapsto",true);defineSymbol(math,main,rel,"\u2197","\\nearrow",true);defineSymbol(math,main,rel,"\u21A9","\\hookleftarrow",true);defineSymbol(math,main,rel,"\u21AA","\\hookrightarrow",true);defineSymbol(math,main,rel,"\u2198","\\searrow",true);defineSymbol(math,main,rel,"\u21BC","\\leftharpoonup",true);defineSymbol(math,main,rel,"\u21C0","\\rightharpoonup",true);defineSymbol(math,main,rel,"\u2199","\\swarrow",true);defineSymbol(math,main,rel,"\u21BD","\\leftharpoondown",true);defineSymbol(math,main,rel,"\u21C1","\\rightharpoondown",true);defineSymbol(math,main,rel,"\u2196","\\nwarrow",true);defineSymbol(math,main,rel,"\u21CC","\\rightleftharpoons",true);// AMS Negated Binary Relations
  defineSymbol(math,ams,rel,"\u226E","\\nless",true);// Symbol names preceeded by "@" each have a corresponding macro.
  defineSymbol(math,ams,rel,"\uE010","\\@nleqslant");defineSymbol(math,ams,rel,"\uE011","\\@nleqq");defineSymbol(math,ams,rel,"\u2A87","\\lneq",true);defineSymbol(math,ams,rel,"\u2268","\\lneqq",true);defineSymbol(math,ams,rel,"\uE00C","\\@lvertneqq");defineSymbol(math,ams,rel,"\u22E6","\\lnsim",true);defineSymbol(math,ams,rel,"\u2A89","\\lnapprox",true);defineSymbol(math,ams,rel,"\u2280","\\nprec",true);// unicode-math maps \u22e0 to \npreccurlyeq. We'll use the AMS synonym.
  defineSymbol(math,ams,rel,"\u22E0","\\npreceq",true);defineSymbol(math,ams,rel,"\u22E8","\\precnsim",true);defineSymbol(math,ams,rel,"\u2AB9","\\precnapprox",true);defineSymbol(math,ams,rel,"\u2241","\\nsim",true);defineSymbol(math,ams,rel,"\uE006","\\@nshortmid");defineSymbol(math,ams,rel,"\u2224","\\nmid",true);defineSymbol(math,ams,rel,"\u22AC","\\nvdash",true);defineSymbol(math,ams,rel,"\u22AD","\\nvDash",true);defineSymbol(math,ams,rel,"\u22EA","\\ntriangleleft");defineSymbol(math,ams,rel,"\u22EC","\\ntrianglelefteq",true);defineSymbol(math,ams,rel,"\u228A","\\subsetneq",true);defineSymbol(math,ams,rel,"\uE01A","\\@varsubsetneq");defineSymbol(math,ams,rel,"\u2ACB","\\subsetneqq",true);defineSymbol(math,ams,rel,"\uE017","\\@varsubsetneqq");defineSymbol(math,ams,rel,"\u226F","\\ngtr",true);defineSymbol(math,ams,rel,"\uE00F","\\@ngeqslant");defineSymbol(math,ams,rel,"\uE00E","\\@ngeqq");defineSymbol(math,ams,rel,"\u2A88","\\gneq",true);defineSymbol(math,ams,rel,"\u2269","\\gneqq",true);defineSymbol(math,ams,rel,"\uE00D","\\@gvertneqq");defineSymbol(math,ams,rel,"\u22E7","\\gnsim",true);defineSymbol(math,ams,rel,"\u2A8A","\\gnapprox",true);defineSymbol(math,ams,rel,"\u2281","\\nsucc",true);// unicode-math maps \u22e1 to \nsucccurlyeq. We'll use the AMS synonym.
  defineSymbol(math,ams,rel,"\u22E1","\\nsucceq",true);defineSymbol(math,ams,rel,"\u22E9","\\succnsim",true);defineSymbol(math,ams,rel,"\u2ABA","\\succnapprox",true);// unicode-math maps \u2246 to \simneqq. We'll use the AMS synonym.
  defineSymbol(math,ams,rel,"\u2246","\\ncong",true);defineSymbol(math,ams,rel,"\uE007","\\@nshortparallel");defineSymbol(math,ams,rel,"\u2226","\\nparallel",true);defineSymbol(math,ams,rel,"\u22AF","\\nVDash",true);defineSymbol(math,ams,rel,"\u22EB","\\ntriangleright");defineSymbol(math,ams,rel,"\u22ED","\\ntrianglerighteq",true);defineSymbol(math,ams,rel,"\uE018","\\@nsupseteqq");defineSymbol(math,ams,rel,"\u228B","\\supsetneq",true);defineSymbol(math,ams,rel,"\uE01B","\\@varsupsetneq");defineSymbol(math,ams,rel,"\u2ACC","\\supsetneqq",true);defineSymbol(math,ams,rel,"\uE019","\\@varsupsetneqq");defineSymbol(math,ams,rel,"\u22AE","\\nVdash",true);defineSymbol(math,ams,rel,"\u2AB5","\\precneqq",true);defineSymbol(math,ams,rel,"\u2AB6","\\succneqq",true);defineSymbol(math,ams,rel,"\uE016","\\@nsubseteqq");defineSymbol(math,ams,bin,"\u22B4","\\unlhd");defineSymbol(math,ams,bin,"\u22B5","\\unrhd");// AMS Negated Arrows
  defineSymbol(math,ams,rel,"\u219A","\\nleftarrow",true);defineSymbol(math,ams,rel,"\u219B","\\nrightarrow",true);defineSymbol(math,ams,rel,"\u21CD","\\nLeftarrow",true);defineSymbol(math,ams,rel,"\u21CF","\\nRightarrow",true);defineSymbol(math,ams,rel,"\u21AE","\\nleftrightarrow",true);defineSymbol(math,ams,rel,"\u21CE","\\nLeftrightarrow",true);// AMS Misc
  defineSymbol(math,ams,rel,"\u25B3","\\vartriangle");defineSymbol(math,ams,textord,"\u210F","\\hslash");defineSymbol(math,ams,textord,"\u25BD","\\triangledown");defineSymbol(math,ams,textord,"\u25CA","\\lozenge");defineSymbol(math,ams,textord,"\u24C8","\\circledS");defineSymbol(math,ams,textord,"\xAE","\\circledR");defineSymbol(symbols_text,ams,textord,"\xAE","\\circledR");defineSymbol(math,ams,textord,"\u2221","\\measuredangle",true);defineSymbol(math,ams,textord,"\u2204","\\nexists");defineSymbol(math,ams,textord,"\u2127","\\mho");defineSymbol(math,ams,textord,"\u2132","\\Finv",true);defineSymbol(math,ams,textord,"\u2141","\\Game",true);defineSymbol(math,ams,textord,"\u2035","\\backprime");defineSymbol(math,ams,textord,"\u25B2","\\blacktriangle");defineSymbol(math,ams,textord,"\u25BC","\\blacktriangledown");defineSymbol(math,ams,textord,"\u25A0","\\blacksquare");defineSymbol(math,ams,textord,"\u29EB","\\blacklozenge");defineSymbol(math,ams,textord,"\u2605","\\bigstar");defineSymbol(math,ams,textord,"\u2222","\\sphericalangle",true);defineSymbol(math,ams,textord,"\u2201","\\complement",true);// unicode-math maps U+F0 to \matheth. We map to AMS function \eth
  defineSymbol(math,ams,textord,"\xF0","\\eth",true);defineSymbol(symbols_text,main,textord,"\xF0","\xF0");defineSymbol(math,ams,textord,"\u2571","\\diagup");defineSymbol(math,ams,textord,"\u2572","\\diagdown");defineSymbol(math,ams,textord,"\u25A1","\\square");defineSymbol(math,ams,textord,"\u25A1","\\Box");defineSymbol(math,ams,textord,"\u25CA","\\Diamond");// unicode-math maps U+A5 to \mathyen. We map to AMS function \yen
  defineSymbol(math,ams,textord,"\xA5","\\yen",true);defineSymbol(symbols_text,ams,textord,"\xA5","\\yen",true);defineSymbol(math,ams,textord,"\u2713","\\checkmark",true);defineSymbol(symbols_text,ams,textord,"\u2713","\\checkmark");// AMS Hebrew
  defineSymbol(math,ams,textord,"\u2136","\\beth",true);defineSymbol(math,ams,textord,"\u2138","\\daleth",true);defineSymbol(math,ams,textord,"\u2137","\\gimel",true);// AMS Greek
  defineSymbol(math,ams,textord,"\u03DD","\\digamma",true);defineSymbol(math,ams,textord,"\u03F0","\\varkappa");// AMS Delimiters
  defineSymbol(math,ams,symbols_open,"\u250C","\\@ulcorner",true);defineSymbol(math,ams,symbols_close,"\u2510","\\@urcorner",true);defineSymbol(math,ams,symbols_open,"\u2514","\\@llcorner",true);defineSymbol(math,ams,symbols_close,"\u2518","\\@lrcorner",true);// AMS Binary Relations
  defineSymbol(math,ams,rel,"\u2266","\\leqq",true);defineSymbol(math,ams,rel,"\u2A7D","\\leqslant",true);defineSymbol(math,ams,rel,"\u2A95","\\eqslantless",true);defineSymbol(math,ams,rel,"\u2272","\\lesssim",true);defineSymbol(math,ams,rel,"\u2A85","\\lessapprox",true);defineSymbol(math,ams,rel,"\u224A","\\approxeq",true);defineSymbol(math,ams,bin,"\u22D6","\\lessdot");defineSymbol(math,ams,rel,"\u22D8","\\lll",true);defineSymbol(math,ams,rel,"\u2276","\\lessgtr",true);defineSymbol(math,ams,rel,"\u22DA","\\lesseqgtr",true);defineSymbol(math,ams,rel,"\u2A8B","\\lesseqqgtr",true);defineSymbol(math,ams,rel,"\u2251","\\doteqdot");defineSymbol(math,ams,rel,"\u2253","\\risingdotseq",true);defineSymbol(math,ams,rel,"\u2252","\\fallingdotseq",true);defineSymbol(math,ams,rel,"\u223D","\\backsim",true);defineSymbol(math,ams,rel,"\u22CD","\\backsimeq",true);defineSymbol(math,ams,rel,"\u2AC5","\\subseteqq",true);defineSymbol(math,ams,rel,"\u22D0","\\Subset",true);defineSymbol(math,ams,rel,"\u228F","\\sqsubset",true);defineSymbol(math,ams,rel,"\u227C","\\preccurlyeq",true);defineSymbol(math,ams,rel,"\u22DE","\\curlyeqprec",true);defineSymbol(math,ams,rel,"\u227E","\\precsim",true);defineSymbol(math,ams,rel,"\u2AB7","\\precapprox",true);defineSymbol(math,ams,rel,"\u22B2","\\vartriangleleft");defineSymbol(math,ams,rel,"\u22B4","\\trianglelefteq");defineSymbol(math,ams,rel,"\u22A8","\\vDash",true);defineSymbol(math,ams,rel,"\u22AA","\\Vvdash",true);defineSymbol(math,ams,rel,"\u2323","\\smallsmile");defineSymbol(math,ams,rel,"\u2322","\\smallfrown");defineSymbol(math,ams,rel,"\u224F","\\bumpeq",true);defineSymbol(math,ams,rel,"\u224E","\\Bumpeq",true);defineSymbol(math,ams,rel,"\u2267","\\geqq",true);defineSymbol(math,ams,rel,"\u2A7E","\\geqslant",true);defineSymbol(math,ams,rel,"\u2A96","\\eqslantgtr",true);defineSymbol(math,ams,rel,"\u2273","\\gtrsim",true);defineSymbol(math,ams,rel,"\u2A86","\\gtrapprox",true);defineSymbol(math,ams,bin,"\u22D7","\\gtrdot");defineSymbol(math,ams,rel,"\u22D9","\\ggg",true);defineSymbol(math,ams,rel,"\u2277","\\gtrless",true);defineSymbol(math,ams,rel,"\u22DB","\\gtreqless",true);defineSymbol(math,ams,rel,"\u2A8C","\\gtreqqless",true);defineSymbol(math,ams,rel,"\u2256","\\eqcirc",true);defineSymbol(math,ams,rel,"\u2257","\\circeq",true);defineSymbol(math,ams,rel,"\u225C","\\triangleq",true);defineSymbol(math,ams,rel,"\u223C","\\thicksim");defineSymbol(math,ams,rel,"\u2248","\\thickapprox");defineSymbol(math,ams,rel,"\u2AC6","\\supseteqq",true);defineSymbol(math,ams,rel,"\u22D1","\\Supset",true);defineSymbol(math,ams,rel,"\u2290","\\sqsupset",true);defineSymbol(math,ams,rel,"\u227D","\\succcurlyeq",true);defineSymbol(math,ams,rel,"\u22DF","\\curlyeqsucc",true);defineSymbol(math,ams,rel,"\u227F","\\succsim",true);defineSymbol(math,ams,rel,"\u2AB8","\\succapprox",true);defineSymbol(math,ams,rel,"\u22B3","\\vartriangleright");defineSymbol(math,ams,rel,"\u22B5","\\trianglerighteq");defineSymbol(math,ams,rel,"\u22A9","\\Vdash",true);defineSymbol(math,ams,rel,"\u2223","\\shortmid");defineSymbol(math,ams,rel,"\u2225","\\shortparallel");defineSymbol(math,ams,rel,"\u226C","\\between",true);defineSymbol(math,ams,rel,"\u22D4","\\pitchfork",true);defineSymbol(math,ams,rel,"\u221D","\\varpropto");defineSymbol(math,ams,rel,"\u25C0","\\blacktriangleleft");// unicode-math says that \therefore is a mathord atom.
  // We kept the amssymb atom type, which is rel.
  defineSymbol(math,ams,rel,"\u2234","\\therefore",true);defineSymbol(math,ams,rel,"\u220D","\\backepsilon");defineSymbol(math,ams,rel,"\u25B6","\\blacktriangleright");// unicode-math says that \because is a mathord atom.
  // We kept the amssymb atom type, which is rel.
  defineSymbol(math,ams,rel,"\u2235","\\because",true);defineSymbol(math,ams,rel,"\u22D8","\\llless");defineSymbol(math,ams,rel,"\u22D9","\\gggtr");defineSymbol(math,ams,bin,"\u22B2","\\lhd");defineSymbol(math,ams,bin,"\u22B3","\\rhd");defineSymbol(math,ams,rel,"\u2242","\\eqsim",true);defineSymbol(math,main,rel,"\u22C8","\\Join");defineSymbol(math,ams,rel,"\u2251","\\Doteq",true);// AMS Binary Operators
  defineSymbol(math,ams,bin,"\u2214","\\dotplus",true);defineSymbol(math,ams,bin,"\u2216","\\smallsetminus");defineSymbol(math,ams,bin,"\u22D2","\\Cap",true);defineSymbol(math,ams,bin,"\u22D3","\\Cup",true);defineSymbol(math,ams,bin,"\u2A5E","\\doublebarwedge",true);defineSymbol(math,ams,bin,"\u229F","\\boxminus",true);defineSymbol(math,ams,bin,"\u229E","\\boxplus",true);defineSymbol(math,ams,bin,"\u22C7","\\divideontimes",true);defineSymbol(math,ams,bin,"\u22C9","\\ltimes",true);defineSymbol(math,ams,bin,"\u22CA","\\rtimes",true);defineSymbol(math,ams,bin,"\u22CB","\\leftthreetimes",true);defineSymbol(math,ams,bin,"\u22CC","\\rightthreetimes",true);defineSymbol(math,ams,bin,"\u22CF","\\curlywedge",true);defineSymbol(math,ams,bin,"\u22CE","\\curlyvee",true);defineSymbol(math,ams,bin,"\u229D","\\circleddash",true);defineSymbol(math,ams,bin,"\u229B","\\circledast",true);defineSymbol(math,ams,bin,"\u22C5","\\centerdot");defineSymbol(math,ams,bin,"\u22BA","\\intercal",true);defineSymbol(math,ams,bin,"\u22D2","\\doublecap");defineSymbol(math,ams,bin,"\u22D3","\\doublecup");defineSymbol(math,ams,bin,"\u22A0","\\boxtimes",true);// AMS Arrows
  // Note: unicode-math maps \u21e2 to their own function \rightdasharrow.
  // We'll map it to AMS function \dashrightarrow. It produces the same atom.
  defineSymbol(math,ams,rel,"\u21E2","\\dashrightarrow",true);// unicode-math maps \u21e0 to \leftdasharrow. We'll use the AMS synonym.
  defineSymbol(math,ams,rel,"\u21E0","\\dashleftarrow",true);defineSymbol(math,ams,rel,"\u21C7","\\leftleftarrows",true);defineSymbol(math,ams,rel,"\u21C6","\\leftrightarrows",true);defineSymbol(math,ams,rel,"\u21DA","\\Lleftarrow",true);defineSymbol(math,ams,rel,"\u219E","\\twoheadleftarrow",true);defineSymbol(math,ams,rel,"\u21A2","\\leftarrowtail",true);defineSymbol(math,ams,rel,"\u21AB","\\looparrowleft",true);defineSymbol(math,ams,rel,"\u21CB","\\leftrightharpoons",true);defineSymbol(math,ams,rel,"\u21B6","\\curvearrowleft",true);// unicode-math maps \u21ba to \acwopencirclearrow. We'll use the AMS synonym.
  defineSymbol(math,ams,rel,"\u21BA","\\circlearrowleft",true);defineSymbol(math,ams,rel,"\u21B0","\\Lsh",true);defineSymbol(math,ams,rel,"\u21C8","\\upuparrows",true);defineSymbol(math,ams,rel,"\u21BF","\\upharpoonleft",true);defineSymbol(math,ams,rel,"\u21C3","\\downharpoonleft",true);defineSymbol(math,main,rel,"\u22B6","\\origof",true);// not in font
  defineSymbol(math,main,rel,"\u22B7","\\imageof",true);// not in font
  defineSymbol(math,ams,rel,"\u22B8","\\multimap",true);defineSymbol(math,ams,rel,"\u21AD","\\leftrightsquigarrow",true);defineSymbol(math,ams,rel,"\u21C9","\\rightrightarrows",true);defineSymbol(math,ams,rel,"\u21C4","\\rightleftarrows",true);defineSymbol(math,ams,rel,"\u21A0","\\twoheadrightarrow",true);defineSymbol(math,ams,rel,"\u21A3","\\rightarrowtail",true);defineSymbol(math,ams,rel,"\u21AC","\\looparrowright",true);defineSymbol(math,ams,rel,"\u21B7","\\curvearrowright",true);// unicode-math maps \u21bb to \cwopencirclearrow. We'll use the AMS synonym.
  defineSymbol(math,ams,rel,"\u21BB","\\circlearrowright",true);defineSymbol(math,ams,rel,"\u21B1","\\Rsh",true);defineSymbol(math,ams,rel,"\u21CA","\\downdownarrows",true);defineSymbol(math,ams,rel,"\u21BE","\\upharpoonright",true);defineSymbol(math,ams,rel,"\u21C2","\\downharpoonright",true);defineSymbol(math,ams,rel,"\u21DD","\\rightsquigarrow",true);defineSymbol(math,ams,rel,"\u21DD","\\leadsto");defineSymbol(math,ams,rel,"\u21DB","\\Rrightarrow",true);defineSymbol(math,ams,rel,"\u21BE","\\restriction");defineSymbol(math,main,textord,"\u2018","`");defineSymbol(math,main,textord,"$","\\$");defineSymbol(symbols_text,main,textord,"$","\\$");defineSymbol(symbols_text,main,textord,"$","\\textdollar");defineSymbol(math,main,textord,"%","\\%");defineSymbol(symbols_text,main,textord,"%","\\%");defineSymbol(math,main,textord,"_","\\_");defineSymbol(symbols_text,main,textord,"_","\\_");defineSymbol(symbols_text,main,textord,"_","\\textunderscore");defineSymbol(math,main,textord,"\u2220","\\angle",true);defineSymbol(math,main,textord,"\u221E","\\infty",true);defineSymbol(math,main,textord,"\u2032","\\prime");defineSymbol(math,main,textord,"\u25B3","\\triangle");defineSymbol(math,main,textord,"\u0393","\\Gamma",true);defineSymbol(math,main,textord,"\u0394","\\Delta",true);defineSymbol(math,main,textord,"\u0398","\\Theta",true);defineSymbol(math,main,textord,"\u039B","\\Lambda",true);defineSymbol(math,main,textord,"\u039E","\\Xi",true);defineSymbol(math,main,textord,"\u03A0","\\Pi",true);defineSymbol(math,main,textord,"\u03A3","\\Sigma",true);defineSymbol(math,main,textord,"\u03A5","\\Upsilon",true);defineSymbol(math,main,textord,"\u03A6","\\Phi",true);defineSymbol(math,main,textord,"\u03A8","\\Psi",true);defineSymbol(math,main,textord,"\u03A9","\\Omega",true);defineSymbol(math,main,textord,"A","\u0391");defineSymbol(math,main,textord,"B","\u0392");defineSymbol(math,main,textord,"E","\u0395");defineSymbol(math,main,textord,"Z","\u0396");defineSymbol(math,main,textord,"H","\u0397");defineSymbol(math,main,textord,"I","\u0399");defineSymbol(math,main,textord,"K","\u039A");defineSymbol(math,main,textord,"M","\u039C");defineSymbol(math,main,textord,"N","\u039D");defineSymbol(math,main,textord,"O","\u039F");defineSymbol(math,main,textord,"P","\u03A1");defineSymbol(math,main,textord,"T","\u03A4");defineSymbol(math,main,textord,"X","\u03A7");defineSymbol(math,main,textord,"\xAC","\\neg",true);defineSymbol(math,main,textord,"\xAC","\\lnot");defineSymbol(math,main,textord,"\u22A4","\\top");defineSymbol(math,main,textord,"\u22A5","\\bot");defineSymbol(math,main,textord,"\u2205","\\emptyset");defineSymbol(math,ams,textord,"\u2205","\\varnothing");defineSymbol(math,main,mathord,"\u03B1","\\alpha",true);defineSymbol(math,main,mathord,"\u03B2","\\beta",true);defineSymbol(math,main,mathord,"\u03B3","\\gamma",true);defineSymbol(math,main,mathord,"\u03B4","\\delta",true);defineSymbol(math,main,mathord,"\u03F5","\\epsilon",true);defineSymbol(math,main,mathord,"\u03B6","\\zeta",true);defineSymbol(math,main,mathord,"\u03B7","\\eta",true);defineSymbol(math,main,mathord,"\u03B8","\\theta",true);defineSymbol(math,main,mathord,"\u03B9","\\iota",true);defineSymbol(math,main,mathord,"\u03BA","\\kappa",true);defineSymbol(math,main,mathord,"\u03BB","\\lambda",true);defineSymbol(math,main,mathord,"\u03BC","\\mu",true);defineSymbol(math,main,mathord,"\u03BD","\\nu",true);defineSymbol(math,main,mathord,"\u03BE","\\xi",true);defineSymbol(math,main,mathord,"\u03BF","\\omicron",true);defineSymbol(math,main,mathord,"\u03C0","\\pi",true);defineSymbol(math,main,mathord,"\u03C1","\\rho",true);defineSymbol(math,main,mathord,"\u03C3","\\sigma",true);defineSymbol(math,main,mathord,"\u03C4","\\tau",true);defineSymbol(math,main,mathord,"\u03C5","\\upsilon",true);defineSymbol(math,main,mathord,"\u03D5","\\phi",true);defineSymbol(math,main,mathord,"\u03C7","\\chi",true);defineSymbol(math,main,mathord,"\u03C8","\\psi",true);defineSymbol(math,main,mathord,"\u03C9","\\omega",true);defineSymbol(math,main,mathord,"\u03B5","\\varepsilon",true);defineSymbol(math,main,mathord,"\u03D1","\\vartheta",true);defineSymbol(math,main,mathord,"\u03D6","\\varpi",true);defineSymbol(math,main,mathord,"\u03F1","\\varrho",true);defineSymbol(math,main,mathord,"\u03C2","\\varsigma",true);defineSymbol(math,main,mathord,"\u03C6","\\varphi",true);defineSymbol(math,main,bin,"\u2217","*");defineSymbol(math,main,bin,"+","+");defineSymbol(math,main,bin,"\u2212","-");defineSymbol(math,main,bin,"\u22C5","\\cdot",true);defineSymbol(math,main,bin,"\u2218","\\circ");defineSymbol(math,main,bin,"\xF7","\\div",true);defineSymbol(math,main,bin,"\xB1","\\pm",true);defineSymbol(math,main,bin,"\xD7","\\times",true);defineSymbol(math,main,bin,"\u2229","\\cap",true);defineSymbol(math,main,bin,"\u222A","\\cup",true);defineSymbol(math,main,bin,"\u2216","\\setminus");defineSymbol(math,main,bin,"\u2227","\\land");defineSymbol(math,main,bin,"\u2228","\\lor");defineSymbol(math,main,bin,"\u2227","\\wedge",true);defineSymbol(math,main,bin,"\u2228","\\vee",true);defineSymbol(math,main,textord,"\u221A","\\surd");defineSymbol(math,main,symbols_open,"\u27E8","\\langle",true);defineSymbol(math,main,symbols_open,"\u2223","\\lvert");defineSymbol(math,main,symbols_open,"\u2225","\\lVert");defineSymbol(math,main,symbols_close,"?","?");defineSymbol(math,main,symbols_close,"!","!");defineSymbol(math,main,symbols_close,"\u27E9","\\rangle",true);defineSymbol(math,main,symbols_close,"\u2223","\\rvert");defineSymbol(math,main,symbols_close,"\u2225","\\rVert");defineSymbol(math,main,rel,"=","=");defineSymbol(math,main,rel,":",":");defineSymbol(math,main,rel,"\u2248","\\approx",true);defineSymbol(math,main,rel,"\u2245","\\cong",true);defineSymbol(math,main,rel,"\u2265","\\ge");defineSymbol(math,main,rel,"\u2265","\\geq",true);defineSymbol(math,main,rel,"\u2190","\\gets");defineSymbol(math,main,rel,">","\\gt",true);defineSymbol(math,main,rel,"\u2208","\\in",true);defineSymbol(math,main,rel,"\uE020","\\@not");defineSymbol(math,main,rel,"\u2282","\\subset",true);defineSymbol(math,main,rel,"\u2283","\\supset",true);defineSymbol(math,main,rel,"\u2286","\\subseteq",true);defineSymbol(math,main,rel,"\u2287","\\supseteq",true);defineSymbol(math,ams,rel,"\u2288","\\nsubseteq",true);defineSymbol(math,ams,rel,"\u2289","\\nsupseteq",true);defineSymbol(math,main,rel,"\u22A8","\\models");defineSymbol(math,main,rel,"\u2190","\\leftarrow",true);defineSymbol(math,main,rel,"\u2264","\\le");defineSymbol(math,main,rel,"\u2264","\\leq",true);defineSymbol(math,main,rel,"<","\\lt",true);defineSymbol(math,main,rel,"\u2192","\\rightarrow",true);defineSymbol(math,main,rel,"\u2192","\\to");defineSymbol(math,ams,rel,"\u2271","\\ngeq",true);defineSymbol(math,ams,rel,"\u2270","\\nleq",true);defineSymbol(math,main,spacing,"\xA0","\\ ");defineSymbol(math,main,spacing,"\xA0","\\space");// Ref: LaTeX Source 2e: \DeclareRobustCommand{\nobreakspace}{%
  defineSymbol(math,main,spacing,"\xA0","\\nobreakspace");defineSymbol(symbols_text,main,spacing,"\xA0","\\ ");defineSymbol(symbols_text,main,spacing,"\xA0"," ");defineSymbol(symbols_text,main,spacing,"\xA0","\\space");defineSymbol(symbols_text,main,spacing,"\xA0","\\nobreakspace");defineSymbol(math,main,spacing,null,"\\nobreak");defineSymbol(math,main,spacing,null,"\\allowbreak");defineSymbol(math,main,punct,",",",");defineSymbol(math,main,punct,";",";");defineSymbol(math,ams,bin,"\u22BC","\\barwedge",true);defineSymbol(math,ams,bin,"\u22BB","\\veebar",true);defineSymbol(math,main,bin,"\u2299","\\odot",true);defineSymbol(math,main,bin,"\u2295","\\oplus",true);defineSymbol(math,main,bin,"\u2297","\\otimes",true);defineSymbol(math,main,textord,"\u2202","\\partial",true);defineSymbol(math,main,bin,"\u2298","\\oslash",true);defineSymbol(math,ams,bin,"\u229A","\\circledcirc",true);defineSymbol(math,ams,bin,"\u22A1","\\boxdot",true);defineSymbol(math,main,bin,"\u25B3","\\bigtriangleup");defineSymbol(math,main,bin,"\u25BD","\\bigtriangledown");defineSymbol(math,main,bin,"\u2020","\\dagger");defineSymbol(math,main,bin,"\u22C4","\\diamond");defineSymbol(math,main,bin,"\u22C6","\\star");defineSymbol(math,main,bin,"\u25C3","\\triangleleft");defineSymbol(math,main,bin,"\u25B9","\\triangleright");defineSymbol(math,main,symbols_open,"{","\\{");defineSymbol(symbols_text,main,textord,"{","\\{");defineSymbol(symbols_text,main,textord,"{","\\textbraceleft");defineSymbol(math,main,symbols_close,"}","\\}");defineSymbol(symbols_text,main,textord,"}","\\}");defineSymbol(symbols_text,main,textord,"}","\\textbraceright");defineSymbol(math,main,symbols_open,"{","\\lbrace");defineSymbol(math,main,symbols_close,"}","\\rbrace");defineSymbol(math,main,symbols_open,"[","\\lbrack",true);defineSymbol(symbols_text,main,textord,"[","\\lbrack",true);defineSymbol(math,main,symbols_close,"]","\\rbrack",true);defineSymbol(symbols_text,main,textord,"]","\\rbrack",true);defineSymbol(math,main,symbols_open,"(","\\lparen",true);defineSymbol(math,main,symbols_close,")","\\rparen",true);defineSymbol(symbols_text,main,textord,"<","\\textless",true);// in T1 fontenc
  defineSymbol(symbols_text,main,textord,">","\\textgreater",true);// in T1 fontenc
  defineSymbol(math,main,symbols_open,"\u230A","\\lfloor",true);defineSymbol(math,main,symbols_close,"\u230B","\\rfloor",true);defineSymbol(math,main,symbols_open,"\u2308","\\lceil",true);defineSymbol(math,main,symbols_close,"\u2309","\\rceil",true);defineSymbol(math,main,textord,"\\","\\backslash");defineSymbol(math,main,textord,"\u2223","|");defineSymbol(math,main,textord,"\u2223","\\vert");defineSymbol(symbols_text,main,textord,"|","\\textbar",true);// in T1 fontenc
  defineSymbol(math,main,textord,"\u2225","\\|");defineSymbol(math,main,textord,"\u2225","\\Vert");defineSymbol(symbols_text,main,textord,"\u2225","\\textbardbl");defineSymbol(symbols_text,main,textord,"~","\\textasciitilde");defineSymbol(symbols_text,main,textord,"\\","\\textbackslash");defineSymbol(symbols_text,main,textord,"^","\\textasciicircum");defineSymbol(math,main,rel,"\u2191","\\uparrow",true);defineSymbol(math,main,rel,"\u21D1","\\Uparrow",true);defineSymbol(math,main,rel,"\u2193","\\downarrow",true);defineSymbol(math,main,rel,"\u21D3","\\Downarrow",true);defineSymbol(math,main,rel,"\u2195","\\updownarrow",true);defineSymbol(math,main,rel,"\u21D5","\\Updownarrow",true);defineSymbol(math,main,op,"\u2210","\\coprod");defineSymbol(math,main,op,"\u22C1","\\bigvee");defineSymbol(math,main,op,"\u22C0","\\bigwedge");defineSymbol(math,main,op,"\u2A04","\\biguplus");defineSymbol(math,main,op,"\u22C2","\\bigcap");defineSymbol(math,main,op,"\u22C3","\\bigcup");defineSymbol(math,main,op,"\u222B","\\int");defineSymbol(math,main,op,"\u222B","\\intop");defineSymbol(math,main,op,"\u222C","\\iint");defineSymbol(math,main,op,"\u222D","\\iiint");defineSymbol(math,main,op,"\u220F","\\prod");defineSymbol(math,main,op,"\u2211","\\sum");defineSymbol(math,main,op,"\u2A02","\\bigotimes");defineSymbol(math,main,op,"\u2A01","\\bigoplus");defineSymbol(math,main,op,"\u2A00","\\bigodot");defineSymbol(math,main,op,"\u222E","\\oint");defineSymbol(math,main,op,"\u222F","\\oiint");defineSymbol(math,main,op,"\u2230","\\oiiint");defineSymbol(math,main,op,"\u2A06","\\bigsqcup");defineSymbol(math,main,op,"\u222B","\\smallint");defineSymbol(symbols_text,main,inner,"\u2026","\\textellipsis");defineSymbol(math,main,inner,"\u2026","\\mathellipsis");defineSymbol(symbols_text,main,inner,"\u2026","\\ldots",true);defineSymbol(math,main,inner,"\u2026","\\ldots",true);defineSymbol(math,main,inner,"\u22EF","\\@cdots",true);defineSymbol(math,main,inner,"\u22F1","\\ddots",true);defineSymbol(math,main,textord,"\u22EE","\\varvdots");// \vdots is a macro
  defineSymbol(math,main,accent,"\u02CA","\\acute");defineSymbol(math,main,accent,"\u02CB","\\grave");defineSymbol(math,main,accent,"\xA8","\\ddot");defineSymbol(math,main,accent,"~","\\tilde");defineSymbol(math,main,accent,"\u02C9","\\bar");defineSymbol(math,main,accent,"\u02D8","\\breve");defineSymbol(math,main,accent,"\u02C7","\\check");defineSymbol(math,main,accent,"^","\\hat");defineSymbol(math,main,accent,"\u20D7","\\vec");defineSymbol(math,main,accent,"\u02D9","\\dot");defineSymbol(math,main,accent,"\u02DA","\\mathring");// \imath and \jmath should be invariant to \mathrm, \mathbf, etc., so use PUA
  defineSymbol(math,main,mathord,"\uE131","\\@imath");defineSymbol(math,main,mathord,"\uE237","\\@jmath");defineSymbol(math,main,textord,"\u0131","\u0131");defineSymbol(math,main,textord,"\u0237","\u0237");defineSymbol(symbols_text,main,textord,"\u0131","\\i",true);defineSymbol(symbols_text,main,textord,"\u0237","\\j",true);defineSymbol(symbols_text,main,textord,"\xDF","\\ss",true);defineSymbol(symbols_text,main,textord,"\xE6","\\ae",true);defineSymbol(symbols_text,main,textord,"\u0153","\\oe",true);defineSymbol(symbols_text,main,textord,"\xF8","\\o",true);defineSymbol(symbols_text,main,textord,"\xC6","\\AE",true);defineSymbol(symbols_text,main,textord,"\u0152","\\OE",true);defineSymbol(symbols_text,main,textord,"\xD8","\\O",true);defineSymbol(symbols_text,main,accent,"\u02CA","\\'");// acute
  defineSymbol(symbols_text,main,accent,"\u02CB","\\`");// grave
  defineSymbol(symbols_text,main,accent,"\u02C6","\\^");// circumflex
  defineSymbol(symbols_text,main,accent,"\u02DC","\\~");// tilde
  defineSymbol(symbols_text,main,accent,"\u02C9","\\=");// macron
  defineSymbol(symbols_text,main,accent,"\u02D8","\\u");// breve
  defineSymbol(symbols_text,main,accent,"\u02D9","\\.");// dot above
  defineSymbol(symbols_text,main,accent,"\xB8","\\c");// cedilla
  defineSymbol(symbols_text,main,accent,"\u02DA","\\r");// ring above
  defineSymbol(symbols_text,main,accent,"\u02C7","\\v");// caron
  defineSymbol(symbols_text,main,accent,"\xA8",'\\"');// diaresis
  defineSymbol(symbols_text,main,accent,"\u02DD","\\H");// double acute
  defineSymbol(symbols_text,main,accent,"\u25EF","\\textcircled");// \bigcirc glyph
  // These ligatures are detected and created in Parser.js's `formLigatures`.
  var ligatures={"--":true,"---":true,"``":true,"''":true};defineSymbol(symbols_text,main,textord,"\u2013","--",true);defineSymbol(symbols_text,main,textord,"\u2013","\\textendash");defineSymbol(symbols_text,main,textord,"\u2014","---",true);defineSymbol(symbols_text,main,textord,"\u2014","\\textemdash");defineSymbol(symbols_text,main,textord,"\u2018","`",true);defineSymbol(symbols_text,main,textord,"\u2018","\\textquoteleft");defineSymbol(symbols_text,main,textord,"\u2019","'",true);defineSymbol(symbols_text,main,textord,"\u2019","\\textquoteright");defineSymbol(symbols_text,main,textord,"\u201C","``",true);defineSymbol(symbols_text,main,textord,"\u201C","\\textquotedblleft");defineSymbol(symbols_text,main,textord,"\u201D","''",true);defineSymbol(symbols_text,main,textord,"\u201D","\\textquotedblright");//  \degree from gensymb package
  defineSymbol(math,main,textord,"\xB0","\\degree",true);defineSymbol(symbols_text,main,textord,"\xB0","\\degree");// \textdegree from inputenc package
  defineSymbol(symbols_text,main,textord,"\xB0","\\textdegree",true);// TODO: In LaTeX, \pounds can generate a different character in text and math
  // mode, but among our fonts, only Main-Regular defines this character "163".
  defineSymbol(math,main,textord,"\xA3","\\pounds");defineSymbol(math,main,textord,"\xA3","\\mathsterling",true);defineSymbol(symbols_text,main,textord,"\xA3","\\pounds");defineSymbol(symbols_text,main,textord,"\xA3","\\textsterling",true);defineSymbol(math,ams,textord,"\u2720","\\maltese");defineSymbol(symbols_text,ams,textord,"\u2720","\\maltese");// There are lots of symbols which are the same, so we add them in afterwards.
  // All of these are textords in math mode
  var mathTextSymbols="0123456789/@.\"";for(var i=0;i<mathTextSymbols.length;i++){var ch=mathTextSymbols.charAt(i);defineSymbol(math,main,textord,ch,ch);}// All of these are textords in text mode
  var textSymbols="0123456789!@*()-=+\";:?/.,";for(var _i=0;_i<textSymbols.length;_i++){var _ch=textSymbols.charAt(_i);defineSymbol(symbols_text,main,textord,_ch,_ch);}// All of these are textords in text mode, and mathords in math mode
  var letters="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";for(var _i2=0;_i2<letters.length;_i2++){var _ch2=letters.charAt(_i2);defineSymbol(math,main,mathord,_ch2,_ch2);defineSymbol(symbols_text,main,textord,_ch2,_ch2);}// Blackboard bold and script letters in Unicode range
  defineSymbol(math,ams,textord,"C","\u2102");// blackboard bold
  defineSymbol(symbols_text,ams,textord,"C","\u2102");defineSymbol(math,ams,textord,"H","\u210D");defineSymbol(symbols_text,ams,textord,"H","\u210D");defineSymbol(math,ams,textord,"N","\u2115");defineSymbol(symbols_text,ams,textord,"N","\u2115");defineSymbol(math,ams,textord,"P","\u2119");defineSymbol(symbols_text,ams,textord,"P","\u2119");defineSymbol(math,ams,textord,"Q","\u211A");defineSymbol(symbols_text,ams,textord,"Q","\u211A");defineSymbol(math,ams,textord,"R","\u211D");defineSymbol(symbols_text,ams,textord,"R","\u211D");defineSymbol(math,ams,textord,"Z","\u2124");defineSymbol(symbols_text,ams,textord,"Z","\u2124");defineSymbol(math,main,mathord,"h","\u210E");// italic h, Planck constant
  defineSymbol(symbols_text,main,mathord,"h","\u210E");// The next loop loads wide (surrogate pair) characters.
  // We support some letters in the Unicode range U+1D400 to U+1D7FF,
  // Mathematical Alphanumeric Symbols.
  // Some editors do not deal well with wide characters. So don't write the
  // string into this file. Instead, create the string from the surrogate pair.
  var wideChar="";for(var _i3=0;_i3<letters.length;_i3++){var _ch3=letters.charAt(_i3);// The hex numbers in the next line are a surrogate pair.
  // 0xD835 is the high surrogate for all letters in the range we support.
  // 0xDC00 is the low surrogate for bold A.
  wideChar=String.fromCharCode(0xD835,0xDC00+_i3);// A-Z a-z bold
  defineSymbol(math,main,mathord,_ch3,wideChar);defineSymbol(symbols_text,main,textord,_ch3,wideChar);wideChar=String.fromCharCode(0xD835,0xDC34+_i3);// A-Z a-z italic
  defineSymbol(math,main,mathord,_ch3,wideChar);defineSymbol(symbols_text,main,textord,_ch3,wideChar);wideChar=String.fromCharCode(0xD835,0xDC68+_i3);// A-Z a-z bold italic
  defineSymbol(math,main,mathord,_ch3,wideChar);defineSymbol(symbols_text,main,textord,_ch3,wideChar);wideChar=String.fromCharCode(0xD835,0xDD04+_i3);// A-Z a-z Fractur
  defineSymbol(math,main,mathord,_ch3,wideChar);defineSymbol(symbols_text,main,textord,_ch3,wideChar);wideChar=String.fromCharCode(0xD835,0xDDA0+_i3);// A-Z a-z sans-serif
  defineSymbol(math,main,mathord,_ch3,wideChar);defineSymbol(symbols_text,main,textord,_ch3,wideChar);wideChar=String.fromCharCode(0xD835,0xDDD4+_i3);// A-Z a-z sans bold
  defineSymbol(math,main,mathord,_ch3,wideChar);defineSymbol(symbols_text,main,textord,_ch3,wideChar);wideChar=String.fromCharCode(0xD835,0xDE08+_i3);// A-Z a-z sans italic
  defineSymbol(math,main,mathord,_ch3,wideChar);defineSymbol(symbols_text,main,textord,_ch3,wideChar);wideChar=String.fromCharCode(0xD835,0xDE70+_i3);// A-Z a-z monospace
  defineSymbol(math,main,mathord,_ch3,wideChar);defineSymbol(symbols_text,main,textord,_ch3,wideChar);if(_i3<26){// KaTeX fonts have only capital letters for blackboard bold and script.
  // See exception for k below.
  wideChar=String.fromCharCode(0xD835,0xDD38+_i3);// A-Z double struck
  defineSymbol(math,main,mathord,_ch3,wideChar);defineSymbol(symbols_text,main,textord,_ch3,wideChar);wideChar=String.fromCharCode(0xD835,0xDC9C+_i3);// A-Z script
  defineSymbol(math,main,mathord,_ch3,wideChar);defineSymbol(symbols_text,main,textord,_ch3,wideChar);}// TODO: Add bold script when it is supported by a KaTeX font.
  }// "k" is the only double struck lower case letter in the KaTeX fonts.
  wideChar=String.fromCharCode(0xD835,0xDD5C);// k double struck
  defineSymbol(math,main,mathord,"k",wideChar);defineSymbol(symbols_text,main,textord,"k",wideChar);// Next, some wide character numerals
  for(var _i4=0;_i4<10;_i4++){var _ch4=_i4.toString();wideChar=String.fromCharCode(0xD835,0xDFCE+_i4);// 0-9 bold
  defineSymbol(math,main,mathord,_ch4,wideChar);defineSymbol(symbols_text,main,textord,_ch4,wideChar);wideChar=String.fromCharCode(0xD835,0xDFE2+_i4);// 0-9 sans serif
  defineSymbol(math,main,mathord,_ch4,wideChar);defineSymbol(symbols_text,main,textord,_ch4,wideChar);wideChar=String.fromCharCode(0xD835,0xDFEC+_i4);// 0-9 bold sans
  defineSymbol(math,main,mathord,_ch4,wideChar);defineSymbol(symbols_text,main,textord,_ch4,wideChar);wideChar=String.fromCharCode(0xD835,0xDFF6+_i4);// 0-9 monospace
  defineSymbol(math,main,mathord,_ch4,wideChar);defineSymbol(symbols_text,main,textord,_ch4,wideChar);}// We add these Latin-1 letters as symbols for backwards-compatibility,
  // but they are not actually in the font, nor are they supported by the
  // Unicode accent mechanism, so they fall back to Times font and look ugly.
  // TODO(edemaine): Fix this.
  var extraLatin="\xD0\xDE\xFE";for(var _i5=0;_i5<extraLatin.length;_i5++){var _ch5=extraLatin.charAt(_i5);defineSymbol(math,main,mathord,_ch5,_ch5);defineSymbol(symbols_text,main,textord,_ch5,_ch5);}/**
       * This file provides support for Unicode range U+1D400 to U+1D7FF,
       * Mathematical Alphanumeric Symbols.
       *
       * Function wideCharacterFont takes a wide character as input and returns
       * the font information necessary to render it properly.
       */ /**
       * Data below is from https://www.unicode.org/charts/PDF/U1D400.pdf
       * That document sorts characters into groups by font type, say bold or italic.
       *
       * In the arrays below, each subarray consists three elements:
       *      * The CSS class of that group when in math mode.
       *      * The CSS class of that group when in text mode.
       *      * The font name, so that KaTeX can get font metrics.
       */var wideLatinLetterData=[["mathbf","textbf","Main-Bold"],// A-Z bold upright
  ["mathbf","textbf","Main-Bold"],// a-z bold upright
  ["mathnormal","textit","Math-Italic"],// A-Z italic
  ["mathnormal","textit","Math-Italic"],// a-z italic
  ["boldsymbol","boldsymbol","Main-BoldItalic"],// A-Z bold italic
  ["boldsymbol","boldsymbol","Main-BoldItalic"],// a-z bold italic
  // Map fancy A-Z letters to script, not calligraphic.
  // This aligns with unicode-math and math fonts (except Cambria Math).
  ["mathscr","textscr","Script-Regular"],// A-Z script
  ["","",""],// a-z script.  No font
  ["","",""],// A-Z bold script. No font
  ["","",""],// a-z bold script. No font
  ["mathfrak","textfrak","Fraktur-Regular"],// A-Z Fraktur
  ["mathfrak","textfrak","Fraktur-Regular"],// a-z Fraktur
  ["mathbb","textbb","AMS-Regular"],// A-Z double-struck
  ["mathbb","textbb","AMS-Regular"],// k double-struck
  ["","",""],// A-Z bold Fraktur No font metrics
  ["","",""],// a-z bold Fraktur.   No font.
  ["mathsf","textsf","SansSerif-Regular"],// A-Z sans-serif
  ["mathsf","textsf","SansSerif-Regular"],// a-z sans-serif
  ["mathboldsf","textboldsf","SansSerif-Bold"],// A-Z bold sans-serif
  ["mathboldsf","textboldsf","SansSerif-Bold"],// a-z bold sans-serif
  ["mathitsf","textitsf","SansSerif-Italic"],// A-Z italic sans-serif
  ["mathitsf","textitsf","SansSerif-Italic"],// a-z italic sans-serif
  ["","",""],// A-Z bold italic sans. No font
  ["","",""],// a-z bold italic sans. No font
  ["mathtt","texttt","Typewriter-Regular"],// A-Z monospace
  ["mathtt","texttt","Typewriter-Regular"]// a-z monospace
  ];var wideNumeralData=[["mathbf","textbf","Main-Bold"],// 0-9 bold
  ["","",""],// 0-9 double-struck. No KaTeX font.
  ["mathsf","textsf","SansSerif-Regular"],// 0-9 sans-serif
  ["mathboldsf","textboldsf","SansSerif-Bold"],// 0-9 bold sans-serif
  ["mathtt","texttt","Typewriter-Regular"]// 0-9 monospace
  ];var wideCharacterFont=function wideCharacterFont(wideChar,mode){// IE doesn't support codePointAt(). So work with the surrogate pair.
  var H=wideChar.charCodeAt(0);// high surrogate
  var L=wideChar.charCodeAt(1);// low surrogate
  var codePoint=(H-0xD800)*0x400+(L-0xDC00)+0x10000;var j=mode==="math"?0:1;// column index for CSS class.
  if(0x1D400<=codePoint&&codePoint<0x1D6A4){// wideLatinLetterData contains exactly 26 chars on each row.
  // So we can calculate the relevant row. No traverse necessary.
  var i=Math.floor((codePoint-0x1D400)/26);return [wideLatinLetterData[i][2],wideLatinLetterData[i][j]];}else if(0x1D7CE<=codePoint&&codePoint<=0x1D7FF){// Numerals, ten per row.
  var _i=Math.floor((codePoint-0x1D7CE)/10);return [wideNumeralData[_i][2],wideNumeralData[_i][j]];}else if(codePoint===0x1D6A5||codePoint===0x1D6A6){// dotless i or j
  return [wideLatinLetterData[0][2],wideLatinLetterData[0][j]];}else if(0x1D6A6<codePoint&&codePoint<0x1D7CE){// Greek letters. Not supported, yet.
  return ["",""];}else{// We don't support any wide characters outside 1D400–1D7FF.
  throw new src_ParseError("Unsupported character: "+wideChar);}};/**
       * This file contains information about the options that the Parser carries
       * around with it while parsing. Data is held in an `Options` object, and when
       * recursing, a new `Options` object can be created with the `.with*` and
       * `.reset` functions.
       */var sizeStyleMap=[// Each element contains [textsize, scriptsize, scriptscriptsize].
  // The size mappings are taken from TeX with \normalsize=10pt.
  [1,1,1],// size1: [5, 5, 5]              \tiny
  [2,1,1],// size2: [6, 5, 5]
  [3,1,1],// size3: [7, 5, 5]              \scriptsize
  [4,2,1],// size4: [8, 6, 5]              \footnotesize
  [5,2,1],// size5: [9, 6, 5]              \small
  [6,3,1],// size6: [10, 7, 5]             \normalsize
  [7,4,2],// size7: [12, 8, 6]             \large
  [8,6,3],// size8: [14.4, 10, 7]          \Large
  [9,7,6],// size9: [17.28, 12, 10]        \LARGE
  [10,8,7],// size10: [20.74, 14.4, 12]     \huge
  [11,10,9]// size11: [24.88, 20.74, 17.28] \HUGE
  ];var sizeMultipliers=[// fontMetrics.js:getGlobalMetrics also uses size indexes, so if
  // you change size indexes, change that function.
  0.5,0.6,0.7,0.8,0.9,1.0,1.2,1.44,1.728,2.074,2.488];var sizeAtStyle=function sizeAtStyle(size,style){return style.size<2?size:sizeStyleMap[size-1][style.size-1];};// In these types, "" (empty string) means "no change".
  /**
       * This is the main options class. It contains the current style, size, color,
       * and font.
       *
       * Options objects should not be modified. To create a new Options with
       * different properties, call a `.having*` method.
       */var Options=/*#__PURE__*/function(){// A font family applies to a group of fonts (i.e. SansSerif), while a font
  // represents a specific font (i.e. SansSerif Bold).
  // See: https://tex.stackexchange.com/questions/22350/difference-between-textrm-and-mathrm
  /**
         * The base size index.
         */function Options(data){this.style=void 0;this.color=void 0;this.size=void 0;this.textSize=void 0;this.phantom=void 0;this.font=void 0;this.fontFamily=void 0;this.fontWeight=void 0;this.fontShape=void 0;this.sizeMultiplier=void 0;this.maxSize=void 0;this.minRuleThickness=void 0;this._fontMetrics=void 0;this.style=data.style;this.color=data.color;this.size=data.size||Options.BASESIZE;this.textSize=data.textSize||this.size;this.phantom=!!data.phantom;this.font=data.font||"";this.fontFamily=data.fontFamily||"";this.fontWeight=data.fontWeight||'';this.fontShape=data.fontShape||'';this.sizeMultiplier=sizeMultipliers[this.size-1];this.maxSize=data.maxSize;this.minRuleThickness=data.minRuleThickness;this._fontMetrics=undefined;}/**
         * Returns a new options object with the same properties as "this".  Properties
         * from "extension" will be copied to the new options object.
         */var _proto=Options.prototype;_proto.extend=function extend(extension){var data={style:this.style,size:this.size,textSize:this.textSize,color:this.color,phantom:this.phantom,font:this.font,fontFamily:this.fontFamily,fontWeight:this.fontWeight,fontShape:this.fontShape,maxSize:this.maxSize,minRuleThickness:this.minRuleThickness};for(var key in extension){if(extension.hasOwnProperty(key)){data[key]=extension[key];}}return new Options(data);}/**
         * Return an options object with the given style. If `this.style === style`,
         * returns `this`.
         */;_proto.havingStyle=function havingStyle(style){if(this.style===style){return this;}else{return this.extend({style:style,size:sizeAtStyle(this.textSize,style)});}}/**
         * Return an options object with a cramped version of the current style. If
         * the current style is cramped, returns `this`.
         */;_proto.havingCrampedStyle=function havingCrampedStyle(){return this.havingStyle(this.style.cramp());}/**
         * Return an options object with the given size and in at least `\textstyle`.
         * Returns `this` if appropriate.
         */;_proto.havingSize=function havingSize(size){if(this.size===size&&this.textSize===size){return this;}else{return this.extend({style:this.style.text(),size:size,textSize:size,sizeMultiplier:sizeMultipliers[size-1]});}}/**
         * Like `this.havingSize(BASESIZE).havingStyle(style)`. If `style` is omitted,
         * changes to at least `\textstyle`.
         */;_proto.havingBaseStyle=function havingBaseStyle(style){style=style||this.style.text();var wantSize=sizeAtStyle(Options.BASESIZE,style);if(this.size===wantSize&&this.textSize===Options.BASESIZE&&this.style===style){return this;}else{return this.extend({style:style,size:wantSize});}}/**
         * Remove the effect of sizing changes such as \Huge.
         * Keep the effect of the current style, such as \scriptstyle.
         */;_proto.havingBaseSizing=function havingBaseSizing(){var size;switch(this.style.id){case 4:case 5:size=3;// normalsize in scriptstyle
  break;case 6:case 7:size=1;// normalsize in scriptscriptstyle
  break;default:size=6;// normalsize in textstyle or displaystyle
  }return this.extend({style:this.style.text(),size:size});}/**
         * Create a new options object with the given color.
         */;_proto.withColor=function withColor(color){return this.extend({color:color});}/**
         * Create a new options object with "phantom" set to true.
         */;_proto.withPhantom=function withPhantom(){return this.extend({phantom:true});}/**
         * Creates a new options object with the given math font or old text font.
         * @type {[type]}
         */;_proto.withFont=function withFont(font){return this.extend({font:font});}/**
         * Create a new options objects with the given fontFamily.
         */;_proto.withTextFontFamily=function withTextFontFamily(fontFamily){return this.extend({fontFamily:fontFamily,font:""});}/**
         * Creates a new options object with the given font weight
         */;_proto.withTextFontWeight=function withTextFontWeight(fontWeight){return this.extend({fontWeight:fontWeight,font:""});}/**
         * Creates a new options object with the given font weight
         */;_proto.withTextFontShape=function withTextFontShape(fontShape){return this.extend({fontShape:fontShape,font:""});}/**
         * Return the CSS sizing classes required to switch from enclosing options
         * `oldOptions` to `this`. Returns an array of classes.
         */;_proto.sizingClasses=function sizingClasses(oldOptions){if(oldOptions.size!==this.size){return ["sizing","reset-size"+oldOptions.size,"size"+this.size];}else{return [];}}/**
         * Return the CSS sizing classes required to switch to the base size. Like
         * `this.havingSize(BASESIZE).sizingClasses(this)`.
         */;_proto.baseSizingClasses=function baseSizingClasses(){if(this.size!==Options.BASESIZE){return ["sizing","reset-size"+this.size,"size"+Options.BASESIZE];}else{return [];}}/**
         * Return the font metrics for this size.
         */;_proto.fontMetrics=function fontMetrics(){if(!this._fontMetrics){this._fontMetrics=getGlobalMetrics(this.size);}return this._fontMetrics;}/**
         * Gets the CSS color of the current options object
         */;_proto.getColor=function getColor(){if(this.phantom){return "transparent";}else{return this.color;}};return Options;}();Options.BASESIZE=6;/* harmony default export */var src_Options=Options;/**
       * This file does conversion between units.  In particular, it provides
       * calculateSize to convert other units into ems.
       */ // This table gives the number of TeX pts in one of each *absolute* TeX unit.
  // Thus, multiplying a length by this number converts the length from units
  // into pts.  Dividing the result by ptPerEm gives the number of ems
  // *assuming* a font size of ptPerEm (normal size, normal style).
  var ptPerUnit={// https://en.wikibooks.org/wiki/LaTeX/Lengths and
  // https://tex.stackexchange.com/a/8263
  "pt":1,// TeX point
  "mm":7227/2540,// millimeter
  "cm":7227/254,// centimeter
  "in":72.27,// inch
  "bp":803/800,// big (PostScript) points
  "pc":12,// pica
  "dd":1238/1157,// didot
  "cc":14856/1157,// cicero (12 didot)
  "nd":685/642,// new didot
  "nc":1370/107,// new cicero (12 new didot)
  "sp":1/65536,// scaled point (TeX's internal smallest unit)
  // https://tex.stackexchange.com/a/41371
  "px":803/800// \pdfpxdimen defaults to 1 bp in pdfTeX and LuaTeX
  };// Dictionary of relative units, for fast validity testing.
  var relativeUnit={"ex":true,"em":true,"mu":true};/**
       * Determine whether the specified unit (either a string defining the unit
       * or a "size" parse node containing a unit field) is valid.
       */var validUnit=function validUnit(unit){if(typeof unit!=="string"){unit=unit.unit;}return unit in ptPerUnit||unit in relativeUnit||unit==="ex";};/*
   * Convert a "size" parse node (with numeric "number" and string "unit" fields,
   * as parsed by functions.js argType "size") into a CSS em value for the
   * current style/scale.  `options` gives the current options.
   */var calculateSize=function calculateSize(sizeValue,options){var scale;if(sizeValue.unit in ptPerUnit){// Absolute units
  scale=ptPerUnit[sizeValue.unit]// Convert unit to pt
  /options.fontMetrics().ptPerEm// Convert pt to CSS em
  /options.sizeMultiplier;// Unscale to make absolute units
  }else if(sizeValue.unit==="mu"){// `mu` units scale with scriptstyle/scriptscriptstyle.
  scale=options.fontMetrics().cssEmPerMu;}else{// Other relative units always refer to the *textstyle* font
  // in the current size.
  var unitOptions;if(options.style.isTight()){// isTight() means current style is script/scriptscript.
  unitOptions=options.havingStyle(options.style.text());}else{unitOptions=options;}// TODO: In TeX these units are relative to the quad of the current
  // *text* font, e.g. cmr10. KaTeX instead uses values from the
  // comparably-sized *Computer Modern symbol* font. At 10pt, these
  // match. At 7pt and 5pt, they differ: cmr7=1.138894, cmsy7=1.170641;
  // cmr5=1.361133, cmsy5=1.472241. Consider $\scriptsize a\kern1emb$.
  // TeX \showlists shows a kern of 1.13889 * fontsize;
  // KaTeX shows a kern of 1.171 * fontsize.
  if(sizeValue.unit==="ex"){scale=unitOptions.fontMetrics().xHeight;}else if(sizeValue.unit==="em"){scale=unitOptions.fontMetrics().quad;}else{throw new src_ParseError("Invalid unit: '"+sizeValue.unit+"'");}if(unitOptions!==options){scale*=unitOptions.sizeMultiplier/options.sizeMultiplier;}}return Math.min(sizeValue.number*scale,options.maxSize);};/* eslint no-console:0 */ /**
       * This module contains general functions that can be used for building
       * different kinds of domTree nodes in a consistent manner.
       */ /**
       * Looks up the given symbol in fontMetrics, after applying any symbol
       * replacements defined in symbol.js
       */var lookupSymbol=function lookupSymbol(value,// TODO(#963): Use a union type for this.
  fontName,mode){// Replace the value with its replaced value from symbol.js
  if(src_symbols[mode][value]&&src_symbols[mode][value].replace){value=src_symbols[mode][value].replace;}return {value:value,metrics:getCharacterMetrics(value,fontName,mode)};};/**
       * Makes a symbolNode after translation via the list of symbols in symbols.js.
       * Correctly pulls out metrics for the character, and optionally takes a list of
       * classes to be attached to the node.
       *
       * TODO: make argument order closer to makeSpan
       * TODO: add a separate argument for math class (e.g. `mop`, `mbin`), which
       * should if present come first in `classes`.
       * TODO(#953): Make `options` mandatory and always pass it in.
       */var makeSymbol=function makeSymbol(value,fontName,mode,options,classes){var lookup=lookupSymbol(value,fontName,mode);var metrics=lookup.metrics;value=lookup.value;var symbolNode;if(metrics){var italic=metrics.italic;if(mode==="text"||options&&options.font==="mathit"){italic=0;}symbolNode=new SymbolNode(value,metrics.height,metrics.depth,italic,metrics.skew,metrics.width,classes);}else{// TODO(emily): Figure out a good way to only print this in development
  typeof console!=="undefined"&&console.warn("No character metrics "+("for '"+value+"' in style '"+fontName+"' and mode '"+mode+"'"));symbolNode=new SymbolNode(value,0,0,0,0,0,classes);}if(options){symbolNode.maxFontSize=options.sizeMultiplier;if(options.style.isTight()){symbolNode.classes.push("mtight");}var color=options.getColor();if(color){symbolNode.style.color=color;}}return symbolNode;};/**
       * Makes a symbol in Main-Regular or AMS-Regular.
       * Used for rel, bin, open, close, inner, and punct.
       */var mathsym=function mathsym(value,mode,options,classes){if(classes===void 0){classes=[];}// Decide what font to render the symbol in by its entry in the symbols
  // table.
  // Have a special case for when the value = \ because the \ is used as a
  // textord in unsupported command errors but cannot be parsed as a regular
  // text ordinal and is therefore not present as a symbol in the symbols
  // table for text, as well as a special case for boldsymbol because it
  // can be used for bold + and -
  if(options.font==="boldsymbol"&&lookupSymbol(value,"Main-Bold",mode).metrics){return makeSymbol(value,"Main-Bold",mode,options,classes.concat(["mathbf"]));}else if(value==="\\"||src_symbols[mode][value].font==="main"){return makeSymbol(value,"Main-Regular",mode,options,classes);}else{return makeSymbol(value,"AMS-Regular",mode,options,classes.concat(["amsrm"]));}};/**
       * Determines which of the two font names (Main-Bold and Math-BoldItalic) and
       * corresponding style tags (mathbf or boldsymbol) to use for font "boldsymbol",
       * depending on the symbol.  Use this function instead of fontMap for font
       * "boldsymbol".
       */var boldsymbol=function boldsymbol(value,mode,options,classes,type){if(type!=="textord"&&lookupSymbol(value,"Math-BoldItalic",mode).metrics){return {fontName:"Math-BoldItalic",fontClass:"boldsymbol"};}else{// Some glyphs do not exist in Math-BoldItalic so we need to use
  // Main-Bold instead.
  return {fontName:"Main-Bold",fontClass:"mathbf"};}};/**
       * Makes either a mathord or textord in the correct font and color.
       */var makeOrd=function makeOrd(group,options,type){var mode=group.mode;var text=group.text;var classes=["mord"];// Math mode or Old font (i.e. \rm)
  var isFont=mode==="math"||mode==="text"&&options.font;var fontOrFamily=isFont?options.font:options.fontFamily;if(text.charCodeAt(0)===0xD835){// surrogate pairs get special treatment
  var _wideCharacterFont=wideCharacterFont(text,mode),wideFontName=_wideCharacterFont[0],wideFontClass=_wideCharacterFont[1];return makeSymbol(text,wideFontName,mode,options,classes.concat(wideFontClass));}else if(fontOrFamily){var fontName;var fontClasses;if(fontOrFamily==="boldsymbol"){var fontData=boldsymbol(text,mode,options,classes,type);fontName=fontData.fontName;fontClasses=[fontData.fontClass];}else if(isFont){fontName=fontMap[fontOrFamily].fontName;fontClasses=[fontOrFamily];}else{fontName=retrieveTextFontName(fontOrFamily,options.fontWeight,options.fontShape);fontClasses=[fontOrFamily,options.fontWeight,options.fontShape];}if(lookupSymbol(text,fontName,mode).metrics){return makeSymbol(text,fontName,mode,options,classes.concat(fontClasses));}else if(ligatures.hasOwnProperty(text)&&fontName.substr(0,10)==="Typewriter"){// Deconstruct ligatures in monospace fonts (\texttt, \tt).
  var parts=[];for(var i=0;i<text.length;i++){parts.push(makeSymbol(text[i],fontName,mode,options,classes.concat(fontClasses)));}return makeFragment(parts);}}// Makes a symbol in the default font for mathords and textords.
  if(type==="mathord"){return makeSymbol(text,"Math-Italic",mode,options,classes.concat(["mathnormal"]));}else if(type==="textord"){var font=src_symbols[mode][text]&&src_symbols[mode][text].font;if(font==="ams"){var _fontName=retrieveTextFontName("amsrm",options.fontWeight,options.fontShape);return makeSymbol(text,_fontName,mode,options,classes.concat("amsrm",options.fontWeight,options.fontShape));}else if(font==="main"||!font){var _fontName2=retrieveTextFontName("textrm",options.fontWeight,options.fontShape);return makeSymbol(text,_fontName2,mode,options,classes.concat(options.fontWeight,options.fontShape));}else{// fonts added by plugins
  var _fontName3=retrieveTextFontName(font,options.fontWeight,options.fontShape);// We add font name as a css class
  return makeSymbol(text,_fontName3,mode,options,classes.concat(_fontName3,options.fontWeight,options.fontShape));}}else{throw new Error("unexpected type: "+type+" in makeOrd");}};/**
       * Returns true if subsequent symbolNodes have the same classes, skew, maxFont,
       * and styles.
       */var canCombine=function canCombine(prev,next){if(createClass(prev.classes)!==createClass(next.classes)||prev.skew!==next.skew||prev.maxFontSize!==next.maxFontSize){return false;}// If prev and next both are just "mbin"s or "mord"s we don't combine them
  // so that the proper spacing can be preserved.
  if(prev.classes.length===1){var cls=prev.classes[0];if(cls==="mbin"||cls==="mord"){return false;}}for(var style in prev.style){if(prev.style.hasOwnProperty(style)&&prev.style[style]!==next.style[style]){return false;}}for(var _style in next.style){if(next.style.hasOwnProperty(_style)&&prev.style[_style]!==next.style[_style]){return false;}}return true;};/**
       * Combine consecutive domTree.symbolNodes into a single symbolNode.
       * Note: this function mutates the argument.
       */var tryCombineChars=function tryCombineChars(chars){for(var i=0;i<chars.length-1;i++){var prev=chars[i];var next=chars[i+1];if(prev instanceof SymbolNode&&next instanceof SymbolNode&&canCombine(prev,next)){prev.text+=next.text;prev.height=Math.max(prev.height,next.height);prev.depth=Math.max(prev.depth,next.depth);// Use the last character's italic correction since we use
  // it to add padding to the right of the span created from
  // the combined characters.
  prev.italic=next.italic;chars.splice(i+1,1);i--;}}return chars;};/**
       * Calculate the height, depth, and maxFontSize of an element based on its
       * children.
       */var sizeElementFromChildren=function sizeElementFromChildren(elem){var height=0;var depth=0;var maxFontSize=0;for(var i=0;i<elem.children.length;i++){var child=elem.children[i];if(child.height>height){height=child.height;}if(child.depth>depth){depth=child.depth;}if(child.maxFontSize>maxFontSize){maxFontSize=child.maxFontSize;}}elem.height=height;elem.depth=depth;elem.maxFontSize=maxFontSize;};/**
       * Makes a span with the given list of classes, list of children, and options.
       *
       * TODO(#953): Ensure that `options` is always provided (currently some call
       * sites don't pass it) and make the type below mandatory.
       * TODO: add a separate argument for math class (e.g. `mop`, `mbin`), which
       * should if present come first in `classes`.
       */var makeSpan=function makeSpan(classes,children,options,style){var span=new Span(classes,children,options,style);sizeElementFromChildren(span);return span;};// SVG one is simpler -- doesn't require height, depth, max-font setting.
  // This is also a separate method for typesafety.
  var makeSvgSpan=function makeSvgSpan(classes,children,options,style){return new Span(classes,children,options,style);};var makeLineSpan=function makeLineSpan(className,options,thickness){var line=makeSpan([className],[],options);line.height=Math.max(thickness||options.fontMetrics().defaultRuleThickness,options.minRuleThickness);line.style.borderBottomWidth=line.height+"em";line.maxFontSize=1.0;return line;};/**
       * Makes an anchor with the given href, list of classes, list of children,
       * and options.
       */var makeAnchor=function makeAnchor(href,classes,children,options){var anchor=new Anchor(href,classes,children,options);sizeElementFromChildren(anchor);return anchor;};/**
       * Makes a document fragment with the given list of children.
       */var makeFragment=function makeFragment(children){var fragment=new DocumentFragment(children);sizeElementFromChildren(fragment);return fragment;};/**
       * Wraps group in a span if it's a document fragment, allowing to apply classes
       * and styles
       */var wrapFragment=function wrapFragment(group,options){if(group instanceof DocumentFragment){return makeSpan([],[group],options);}return group;};// These are exact object types to catch typos in the names of the optional fields.
  // Computes the updated `children` list and the overall depth.
  //
  // This helper function for makeVList makes it easier to enforce type safety by
  // allowing early exits (returns) in the logic.
  var getVListChildrenAndDepth=function getVListChildrenAndDepth(params){if(params.positionType==="individualShift"){var oldChildren=params.children;var children=[oldChildren[0]];// Add in kerns to the list of params.children to get each element to be
  // shifted to the correct specified shift
  var _depth=-oldChildren[0].shift-oldChildren[0].elem.depth;var currPos=_depth;for(var i=1;i<oldChildren.length;i++){var diff=-oldChildren[i].shift-currPos-oldChildren[i].elem.depth;var size=diff-(oldChildren[i-1].elem.height+oldChildren[i-1].elem.depth);currPos=currPos+diff;children.push({type:"kern",size:size});children.push(oldChildren[i]);}return {children:children,depth:_depth};}var depth;if(params.positionType==="top"){// We always start at the bottom, so calculate the bottom by adding up
  // all the sizes
  var bottom=params.positionData;for(var _i=0;_i<params.children.length;_i++){var child=params.children[_i];bottom-=child.type==="kern"?child.size:child.elem.height+child.elem.depth;}depth=bottom;}else if(params.positionType==="bottom"){depth=-params.positionData;}else{var firstChild=params.children[0];if(firstChild.type!=="elem"){throw new Error('First child must have type "elem".');}if(params.positionType==="shift"){depth=-firstChild.elem.depth-params.positionData;}else if(params.positionType==="firstBaseline"){depth=-firstChild.elem.depth;}else{throw new Error("Invalid positionType "+params.positionType+".");}}return {children:params.children,depth:depth};};/**
       * Makes a vertical list by stacking elements and kerns on top of each other.
       * Allows for many different ways of specifying the positioning method.
       *
       * See VListParam documentation above.
       */var makeVList=function makeVList(params,options){var _getVListChildrenAndD=getVListChildrenAndDepth(params),children=_getVListChildrenAndD.children,depth=_getVListChildrenAndD.depth;// Create a strut that is taller than any list item. The strut is added to
  // each item, where it will determine the item's baseline. Since it has
  // `overflow:hidden`, the strut's top edge will sit on the item's line box's
  // top edge and the strut's bottom edge will sit on the item's baseline,
  // with no additional line-height spacing. This allows the item baseline to
  // be positioned precisely without worrying about font ascent and
  // line-height.
  var pstrutSize=0;for(var i=0;i<children.length;i++){var child=children[i];if(child.type==="elem"){var elem=child.elem;pstrutSize=Math.max(pstrutSize,elem.maxFontSize,elem.height);}}pstrutSize+=2;var pstrut=makeSpan(["pstrut"],[]);pstrut.style.height=pstrutSize+"em";// Create a new list of actual children at the correct offsets
  var realChildren=[];var minPos=depth;var maxPos=depth;var currPos=depth;for(var _i2=0;_i2<children.length;_i2++){var _child=children[_i2];if(_child.type==="kern"){currPos+=_child.size;}else{var _elem=_child.elem;var classes=_child.wrapperClasses||[];var style=_child.wrapperStyle||{};var childWrap=makeSpan(classes,[pstrut,_elem],undefined,style);childWrap.style.top=-pstrutSize-currPos-_elem.depth+"em";if(_child.marginLeft){childWrap.style.marginLeft=_child.marginLeft;}if(_child.marginRight){childWrap.style.marginRight=_child.marginRight;}realChildren.push(childWrap);currPos+=_elem.height+_elem.depth;}minPos=Math.min(minPos,currPos);maxPos=Math.max(maxPos,currPos);}// The vlist contents go in a table-cell with `vertical-align:bottom`.
  // This cell's bottom edge will determine the containing table's baseline
  // without overly expanding the containing line-box.
  var vlist=makeSpan(["vlist"],realChildren);vlist.style.height=maxPos+"em";// A second row is used if necessary to represent the vlist's depth.
  var rows;if(minPos<0){// We will define depth in an empty span with display: table-cell.
  // It should render with the height that we define. But Chrome, in
  // contenteditable mode only, treats that span as if it contains some
  // text content. And that min-height over-rides our desired height.
  // So we put another empty span inside the depth strut span.
  var emptySpan=makeSpan([],[]);var depthStrut=makeSpan(["vlist"],[emptySpan]);depthStrut.style.height=-minPos+"em";// Safari wants the first row to have inline content; otherwise it
  // puts the bottom of the *second* row on the baseline.
  var topStrut=makeSpan(["vlist-s"],[new SymbolNode("\u200B")]);rows=[makeSpan(["vlist-r"],[vlist,topStrut]),makeSpan(["vlist-r"],[depthStrut])];}else{rows=[makeSpan(["vlist-r"],[vlist])];}var vtable=makeSpan(["vlist-t"],rows);if(rows.length===2){vtable.classes.push("vlist-t2");}vtable.height=maxPos;vtable.depth=-minPos;return vtable;};// Glue is a concept from TeX which is a flexible space between elements in
  // either a vertical or horizontal list. In KaTeX, at least for now, it's
  // static space between elements in a horizontal layout.
  var makeGlue=function makeGlue(measurement,options){// Make an empty span for the space
  var rule=makeSpan(["mspace"],[],options);var size=calculateSize(measurement,options);rule.style.marginRight=size+"em";return rule;};// Takes font options, and returns the appropriate fontLookup name
  var retrieveTextFontName=function retrieveTextFontName(fontFamily,fontWeight,fontShape){var baseFontName="";switch(fontFamily){case"amsrm":baseFontName="AMS";break;case"textrm":baseFontName="Main";break;case"textsf":baseFontName="SansSerif";break;case"texttt":baseFontName="Typewriter";break;default:baseFontName=fontFamily;// use fonts added by a plugin
  }var fontStylesName;if(fontWeight==="textbf"&&fontShape==="textit"){fontStylesName="BoldItalic";}else if(fontWeight==="textbf"){fontStylesName="Bold";}else if(fontWeight==="textit"){fontStylesName="Italic";}else{fontStylesName="Regular";}return baseFontName+"-"+fontStylesName;};/**
       * Maps TeX font commands to objects containing:
       * - variant: string used for "mathvariant" attribute in buildMathML.js
       * - fontName: the "style" parameter to fontMetrics.getCharacterMetrics
       */ // A map between tex font commands an MathML mathvariant attribute values
  var fontMap={// styles
  "mathbf":{variant:"bold",fontName:"Main-Bold"},"mathrm":{variant:"normal",fontName:"Main-Regular"},"textit":{variant:"italic",fontName:"Main-Italic"},"mathit":{variant:"italic",fontName:"Main-Italic"},"mathnormal":{variant:"italic",fontName:"Math-Italic"},// "boldsymbol" is missing because they require the use of multiple fonts:
  // Math-BoldItalic and Main-Bold.  This is handled by a special case in
  // makeOrd which ends up calling boldsymbol.
  // families
  "mathbb":{variant:"double-struck",fontName:"AMS-Regular"},"mathcal":{variant:"script",fontName:"Caligraphic-Regular"},"mathfrak":{variant:"fraktur",fontName:"Fraktur-Regular"},"mathscr":{variant:"script",fontName:"Script-Regular"},"mathsf":{variant:"sans-serif",fontName:"SansSerif-Regular"},"mathtt":{variant:"monospace",fontName:"Typewriter-Regular"}};var svgData={//   path, width, height
  vec:["vec",0.471,0.714],// values from the font glyph
  oiintSize1:["oiintSize1",0.957,0.499],// oval to overlay the integrand
  oiintSize2:["oiintSize2",1.472,0.659],oiiintSize1:["oiiintSize1",1.304,0.499],oiiintSize2:["oiiintSize2",1.98,0.659]};var staticSvg=function staticSvg(value,options){// Create a span with inline SVG for the element.
  var _svgData$value=svgData[value],pathName=_svgData$value[0],width=_svgData$value[1],height=_svgData$value[2];var path=new PathNode(pathName);var svgNode=new SvgNode([path],{"width":width+"em","height":height+"em",// Override CSS rule `.katex svg { width: 100% }`
  "style":"width:"+width+"em","viewBox":"0 0 "+1000*width+" "+1000*height,"preserveAspectRatio":"xMinYMin"});var span=makeSvgSpan(["overlay"],[svgNode],options);span.height=height;span.style.height=height+"em";span.style.width=width+"em";return span;};/* harmony default export */var buildCommon={fontMap:fontMap,makeSymbol:makeSymbol,mathsym:mathsym,makeSpan:makeSpan,makeSvgSpan:makeSvgSpan,makeLineSpan:makeLineSpan,makeAnchor:makeAnchor,makeFragment:makeFragment,wrapFragment:wrapFragment,makeVList:makeVList,makeOrd:makeOrd,makeGlue:makeGlue,staticSvg:staticSvg,svgData:svgData,tryCombineChars:tryCombineChars};/**
       * Describes spaces between different classes of atoms.
       */var thinspace={number:3,unit:"mu"};var mediumspace={number:4,unit:"mu"};var thickspace={number:5,unit:"mu"};// Making the type below exact with all optional fields doesn't work due to
  // - https://github.com/facebook/flow/issues/4582
  // - https://github.com/facebook/flow/issues/5688
  // However, since *all* fields are optional, $Shape<> works as suggested in 5688
  // above.
  // Spacing relationships for display and text styles
  var spacings={mord:{mop:thinspace,mbin:mediumspace,mrel:thickspace,minner:thinspace},mop:{mord:thinspace,mop:thinspace,mrel:thickspace,minner:thinspace},mbin:{mord:mediumspace,mop:mediumspace,mopen:mediumspace,minner:mediumspace},mrel:{mord:thickspace,mop:thickspace,mopen:thickspace,minner:thickspace},mopen:{},mclose:{mop:thinspace,mbin:mediumspace,mrel:thickspace,minner:thinspace},mpunct:{mord:thinspace,mop:thinspace,mrel:thickspace,mopen:thinspace,mclose:thinspace,mpunct:thinspace,minner:thinspace},minner:{mord:thinspace,mop:thinspace,mbin:mediumspace,mrel:thickspace,mopen:thinspace,mpunct:thinspace,minner:thinspace}};// Spacing relationships for script and scriptscript styles
  var tightSpacings={mord:{mop:thinspace},mop:{mord:thinspace,mop:thinspace},mbin:{},mrel:{},mopen:{},mclose:{mop:thinspace},mpunct:{},minner:{mop:thinspace}};/** Context provided to function handlers for error messages. */ // Note: reverse the order of the return type union will cause a flow error.
  // See https://github.com/facebook/flow/issues/3663.
  // More general version of `HtmlBuilder` for nodes (e.g. \sum, accent types)
  // whose presence impacts super/subscripting. In this case, ParseNode<"supsub">
  // delegates its HTML building to the HtmlBuilder corresponding to these nodes.
  /**
       * Final function spec for use at parse time.
       * This is almost identical to `FunctionPropSpec`, except it
       * 1. includes the function handler, and
       * 2. requires all arguments except argTypes.
       * It is generated by `defineFunction()` below.
       */ /**
       * All registered functions.
       * `functions.js` just exports this same dictionary again and makes it public.
       * `Parser.js` requires this dictionary.
       */var _functions={};/**
       * All HTML builders. Should be only used in the `define*` and the `build*ML`
       * functions.
       */var _htmlGroupBuilders={};/**
       * All MathML builders. Should be only used in the `define*` and the `build*ML`
       * functions.
       */var _mathmlGroupBuilders={};function defineFunction(_ref){var type=_ref.type,names=_ref.names,props=_ref.props,handler=_ref.handler,htmlBuilder=_ref.htmlBuilder,mathmlBuilder=_ref.mathmlBuilder;// Set default values of functions
  var data={type:type,numArgs:props.numArgs,argTypes:props.argTypes,allowedInArgument:!!props.allowedInArgument,allowedInText:!!props.allowedInText,allowedInMath:props.allowedInMath===undefined?true:props.allowedInMath,numOptionalArgs:props.numOptionalArgs||0,infix:!!props.infix,primitive:!!props.primitive,handler:handler};for(var i=0;i<names.length;++i){_functions[names[i]]=data;}if(type){if(htmlBuilder){_htmlGroupBuilders[type]=htmlBuilder;}if(mathmlBuilder){_mathmlGroupBuilders[type]=mathmlBuilder;}}}/**
       * Use this to register only the HTML and MathML builders for a function (e.g.
       * if the function's ParseNode is generated in Parser.js rather than via a
       * stand-alone handler provided to `defineFunction`).
       */function defineFunctionBuilders(_ref2){var type=_ref2.type,htmlBuilder=_ref2.htmlBuilder,mathmlBuilder=_ref2.mathmlBuilder;defineFunction({type:type,names:[],props:{numArgs:0},handler:function handler(){throw new Error('Should never be called.');},htmlBuilder:htmlBuilder,mathmlBuilder:mathmlBuilder});}var normalizeArgument=function normalizeArgument(arg){return arg.type==="ordgroup"&&arg.body.length===1?arg.body[0]:arg;};// Since the corresponding buildHTML/buildMathML function expects a
  // list of elements, we normalize for different kinds of arguments
  var ordargument=function ordargument(arg){return arg.type==="ordgroup"?arg.body:[arg];};/**
       * This file does the main work of building a domTree structure from a parse
       * tree. The entry point is the `buildHTML` function, which takes a parse tree.
       * Then, the buildExpression, buildGroup, and various groupBuilders functions
       * are called, to produce a final HTML tree.
       */var buildHTML_makeSpan=buildCommon.makeSpan;// Binary atoms (first class `mbin`) change into ordinary atoms (`mord`)
  // depending on their surroundings. See TeXbook pg. 442-446, Rules 5 and 6,
  // and the text before Rule 19.
  var binLeftCanceller=["leftmost","mbin","mopen","mrel","mop","mpunct"];var binRightCanceller=["rightmost","mrel","mclose","mpunct"];var styleMap={"display":src_Style.DISPLAY,"text":src_Style.TEXT,"script":src_Style.SCRIPT,"scriptscript":src_Style.SCRIPTSCRIPT};var DomEnum={mord:"mord",mop:"mop",mbin:"mbin",mrel:"mrel",mopen:"mopen",mclose:"mclose",mpunct:"mpunct",minner:"minner"};/**
       * Take a list of nodes, build them in order, and return a list of the built
       * nodes. documentFragments are flattened into their contents, so the
       * returned list contains no fragments. `isRealGroup` is true if `expression`
       * is a real group (no atoms will be added on either side), as opposed to
       * a partial group (e.g. one created by \color). `surrounding` is an array
       * consisting type of nodes that will be added to the left and right.
       */var buildExpression=function buildExpression(expression,options,isRealGroup,surrounding){if(surrounding===void 0){surrounding=[null,null];}// Parse expressions into `groups`.
  var groups=[];for(var i=0;i<expression.length;i++){var output=buildGroup(expression[i],options);if(output instanceof DocumentFragment){var children=output.children;groups.push.apply(groups,children);}else{groups.push(output);}}// Combine consecutive domTree.symbolNodes into a single symbolNode.
  buildCommon.tryCombineChars(groups);// If `expression` is a partial group, let the parent handle spacings
  // to avoid processing groups multiple times.
  if(!isRealGroup){return groups;}var glueOptions=options;if(expression.length===1){var node=expression[0];if(node.type==="sizing"){glueOptions=options.havingSize(node.size);}else if(node.type==="styling"){glueOptions=options.havingStyle(styleMap[node.style]);}}// Dummy spans for determining spacings between surrounding atoms.
  // If `expression` has no atoms on the left or right, class "leftmost"
  // or "rightmost", respectively, is used to indicate it.
  var dummyPrev=buildHTML_makeSpan([surrounding[0]||"leftmost"],[],options);var dummyNext=buildHTML_makeSpan([surrounding[1]||"rightmost"],[],options);// TODO: These code assumes that a node's math class is the first element
  // of its `classes` array. A later cleanup should ensure this, for
  // instance by changing the signature of `makeSpan`.
  // Before determining what spaces to insert, perform bin cancellation.
  // Binary operators change to ordinary symbols in some contexts.
  var isRoot=isRealGroup==="root";traverseNonSpaceNodes(groups,function(node,prev){var prevType=prev.classes[0];var type=node.classes[0];if(prevType==="mbin"&&utils.contains(binRightCanceller,type)){prev.classes[0]="mord";}else if(type==="mbin"&&utils.contains(binLeftCanceller,prevType)){node.classes[0]="mord";}},{node:dummyPrev},dummyNext,isRoot);traverseNonSpaceNodes(groups,function(node,prev){var prevType=getTypeOfDomTree(prev);var type=getTypeOfDomTree(node);// 'mtight' indicates that the node is script or scriptscript style.
  var space=prevType&&type?node.hasClass("mtight")?tightSpacings[prevType][type]:spacings[prevType][type]:null;if(space){// Insert glue (spacing) after the `prev`.
  return buildCommon.makeGlue(space,glueOptions);}},{node:dummyPrev},dummyNext,isRoot);return groups;};// Depth-first traverse non-space `nodes`, calling `callback` with the current and
  // previous node as arguments, optionally returning a node to insert after the
  // previous node. `prev` is an object with the previous node and `insertAfter`
  // function to insert after it. `next` is a node that will be added to the right.
  // Used for bin cancellation and inserting spacings.
  var traverseNonSpaceNodes=function traverseNonSpaceNodes(nodes,callback,prev,next,isRoot){if(next){// temporarily append the right node, if exists
  nodes.push(next);}var i=0;for(;i<nodes.length;i++){var node=nodes[i];var partialGroup=checkPartialGroup(node);if(partialGroup){// Recursive DFS
  // $FlowFixMe: make nodes a $ReadOnlyArray by returning a new array
  traverseNonSpaceNodes(partialGroup.children,callback,prev,null,isRoot);continue;}// Ignore explicit spaces (e.g., \;, \,) when determining what implicit
  // spacing should go between atoms of different classes
  var nonspace=!node.hasClass("mspace");if(nonspace){var result=callback(node,prev.node);if(result){if(prev.insertAfter){prev.insertAfter(result);}else{// insert at front
  nodes.unshift(result);i++;}}}if(nonspace){prev.node=node;}else if(isRoot&&node.hasClass("newline")){prev.node=buildHTML_makeSpan(["leftmost"]);// treat like beginning of line
  }prev.insertAfter=function(index){return function(n){nodes.splice(index+1,0,n);i++;};}(i);}if(next){nodes.pop();}};// Check if given node is a partial group, i.e., does not affect spacing around.
  var checkPartialGroup=function checkPartialGroup(node){if(node instanceof DocumentFragment||node instanceof Anchor||node instanceof Span&&node.hasClass("enclosing")){return node;}return null;};// Return the outermost node of a domTree.
  var getOutermostNode=function getOutermostNode(node,side){var partialGroup=checkPartialGroup(node);if(partialGroup){var children=partialGroup.children;if(children.length){if(side==="right"){return getOutermostNode(children[children.length-1],"right");}else if(side==="left"){return getOutermostNode(children[0],"left");}}}return node;};// Return math atom class (mclass) of a domTree.
  // If `side` is given, it will get the type of the outermost node at given side.
  var getTypeOfDomTree=function getTypeOfDomTree(node,side){if(!node){return null;}if(side){node=getOutermostNode(node,side);}// This makes a lot of assumptions as to where the type of atom
  // appears.  We should do a better job of enforcing this.
  return DomEnum[node.classes[0]]||null;};var makeNullDelimiter=function makeNullDelimiter(options,classes){var moreClasses=["nulldelimiter"].concat(options.baseSizingClasses());return buildHTML_makeSpan(classes.concat(moreClasses));};/**
       * buildGroup is the function that takes a group and calls the correct groupType
       * function for it. It also handles the interaction of size and style changes
       * between parents and children.
       */var buildGroup=function buildGroup(group,options,baseOptions){if(!group){return buildHTML_makeSpan();}if(_htmlGroupBuilders[group.type]){// Call the groupBuilders function
  // $FlowFixMe
  var groupNode=_htmlGroupBuilders[group.type](group,options);// If the size changed between the parent and the current group, account
  // for that size difference.
  if(baseOptions&&options.size!==baseOptions.size){groupNode=buildHTML_makeSpan(options.sizingClasses(baseOptions),[groupNode],options);var multiplier=options.sizeMultiplier/baseOptions.sizeMultiplier;groupNode.height*=multiplier;groupNode.depth*=multiplier;}return groupNode;}else{throw new src_ParseError("Got group of unknown type: '"+group.type+"'");}};/**
       * Combine an array of HTML DOM nodes (e.g., the output of `buildExpression`)
       * into an unbreakable HTML node of class .base, with proper struts to
       * guarantee correct vertical extent.  `buildHTML` calls this repeatedly to
       * make up the entire expression as a sequence of unbreakable units.
       */function buildHTMLUnbreakable(children,options){// Compute height and depth of this chunk.
  var body=buildHTML_makeSpan(["base"],children,options);// Add strut, which ensures that the top of the HTML element falls at
  // the height of the expression, and the bottom of the HTML element
  // falls at the depth of the expression.
  var strut=buildHTML_makeSpan(["strut"]);strut.style.height=body.height+body.depth+"em";strut.style.verticalAlign=-body.depth+"em";body.children.unshift(strut);return body;}/**
       * Take an entire parse tree, and build it into an appropriate set of HTML
       * nodes.
       */function buildHTML(tree,options){// Strip off outer tag wrapper for processing below.
  var tag=null;if(tree.length===1&&tree[0].type==="tag"){tag=tree[0].tag;tree=tree[0].body;}// Build the expression contained in the tree
  var expression=buildExpression(tree,options,"root");var eqnNum;if(expression.length===2&&expression[1].hasClass("tag")){// An environment with automatic equation numbers, e.g. {gather}.
  eqnNum=expression.pop();}var children=[];// Create one base node for each chunk between potential line breaks.
  // The TeXBook [p.173] says "A formula will be broken only after a
  // relation symbol like $=$ or $<$ or $\rightarrow$, or after a binary
  // operation symbol like $+$ or $-$ or $\times$, where the relation or
  // binary operation is on the ``outer level'' of the formula (i.e., not
  // enclosed in {...} and not part of an \over construction)."
  var parts=[];for(var i=0;i<expression.length;i++){parts.push(expression[i]);if(expression[i].hasClass("mbin")||expression[i].hasClass("mrel")||expression[i].hasClass("allowbreak")){// Put any post-operator glue on same line as operator.
  // Watch for \nobreak along the way, and stop at \newline.
  var nobreak=false;while(i<expression.length-1&&expression[i+1].hasClass("mspace")&&!expression[i+1].hasClass("newline")){i++;parts.push(expression[i]);if(expression[i].hasClass("nobreak")){nobreak=true;}}// Don't allow break if \nobreak among the post-operator glue.
  if(!nobreak){children.push(buildHTMLUnbreakable(parts,options));parts=[];}}else if(expression[i].hasClass("newline")){// Write the line except the newline
  parts.pop();if(parts.length>0){children.push(buildHTMLUnbreakable(parts,options));parts=[];}// Put the newline at the top level
  children.push(expression[i]);}}if(parts.length>0){children.push(buildHTMLUnbreakable(parts,options));}// Now, if there was a tag, build it too and append it as a final child.
  var tagChild;if(tag){tagChild=buildHTMLUnbreakable(buildExpression(tag,options,true));tagChild.classes=["tag"];children.push(tagChild);}else if(eqnNum){children.push(eqnNum);}var htmlNode=buildHTML_makeSpan(["katex-html"],children);htmlNode.setAttribute("aria-hidden","true");// Adjust the strut of the tag to be the maximum height of all children
  // (the height of the enclosing htmlNode) for proper vertical alignment.
  if(tagChild){var strut=tagChild.children[0];strut.style.height=htmlNode.height+htmlNode.depth+"em";strut.style.verticalAlign=-htmlNode.depth+"em";}return htmlNode;}/**
       * These objects store data about MathML nodes. This is the MathML equivalent
       * of the types in domTree.js. Since MathML handles its own rendering, and
       * since we're mainly using MathML to improve accessibility, we don't manage
       * any of the styling state that the plain DOM nodes do.
       *
       * The `toNode` and `toMarkup` functions work simlarly to how they do in
       * domTree.js, creating namespaced DOM nodes and HTML text markup respectively.
       */function newDocumentFragment(children){return new DocumentFragment(children);}/**
       * This node represents a general purpose MathML node of any type. The
       * constructor requires the type of node to create (for example, `"mo"` or
       * `"mspace"`, corresponding to `<mo>` and `<mspace>` tags).
       */var MathNode=/*#__PURE__*/function(){function MathNode(type,children,classes){this.type=void 0;this.attributes=void 0;this.children=void 0;this.classes=void 0;this.type=type;this.attributes={};this.children=children||[];this.classes=classes||[];}/**
         * Sets an attribute on a MathML node. MathML depends on attributes to convey a
         * semantic content, so this is used heavily.
         */var _proto=MathNode.prototype;_proto.setAttribute=function setAttribute(name,value){this.attributes[name]=value;}/**
         * Gets an attribute on a MathML node.
         */;_proto.getAttribute=function getAttribute(name){return this.attributes[name];}/**
         * Converts the math node into a MathML-namespaced DOM element.
         */;_proto.toNode=function toNode(){var node=document.createElementNS("http://www.w3.org/1998/Math/MathML",this.type);for(var attr in this.attributes){if(Object.prototype.hasOwnProperty.call(this.attributes,attr)){node.setAttribute(attr,this.attributes[attr]);}}if(this.classes.length>0){node.className=createClass(this.classes);}for(var i=0;i<this.children.length;i++){node.appendChild(this.children[i].toNode());}return node;}/**
         * Converts the math node into an HTML markup string.
         */;_proto.toMarkup=function toMarkup(){var markup="<"+this.type;// Add the attributes
  for(var attr in this.attributes){if(Object.prototype.hasOwnProperty.call(this.attributes,attr)){markup+=" "+attr+"=\"";markup+=utils.escape(this.attributes[attr]);markup+="\"";}}if(this.classes.length>0){markup+=" class =\""+utils.escape(createClass(this.classes))+"\"";}markup+=">";for(var i=0;i<this.children.length;i++){markup+=this.children[i].toMarkup();}markup+="</"+this.type+">";return markup;}/**
         * Converts the math node into a string, similar to innerText, but escaped.
         */;_proto.toText=function toText(){return this.children.map(function(child){return child.toText();}).join("");};return MathNode;}();/**
       * This node represents a piece of text.
       */var TextNode=/*#__PURE__*/function(){function TextNode(text){this.text=void 0;this.text=text;}/**
         * Converts the text node into a DOM text node.
         */var _proto2=TextNode.prototype;_proto2.toNode=function toNode(){return document.createTextNode(this.text);}/**
         * Converts the text node into escaped HTML markup
         * (representing the text itself).
         */;_proto2.toMarkup=function toMarkup(){return utils.escape(this.toText());}/**
         * Converts the text node into a string
         * (representing the text iteself).
         */;_proto2.toText=function toText(){return this.text;};return TextNode;}();/**
       * This node represents a space, but may render as <mspace.../> or as text,
       * depending on the width.
       */var SpaceNode=/*#__PURE__*/function(){/**
         * Create a Space node with width given in CSS ems.
         */function SpaceNode(width){this.width=void 0;this.character=void 0;this.width=width;// See https://www.w3.org/TR/2000/WD-MathML2-20000328/chapter6.html
  // for a table of space-like characters.  We use Unicode
  // representations instead of &LongNames; as it's not clear how to
  // make the latter via document.createTextNode.
  if(width>=0.05555&&width<=0.05556){this.character="\u200A";// &VeryThinSpace;
  }else if(width>=0.1666&&width<=0.1667){this.character="\u2009";// &ThinSpace;
  }else if(width>=0.2222&&width<=0.2223){this.character="\u2005";// &MediumSpace;
  }else if(width>=0.2777&&width<=0.2778){this.character="\u2005\u200A";// &ThickSpace;
  }else if(width>=-0.05556&&width<=-0.05555){this.character="\u200A\u2063";// &NegativeVeryThinSpace;
  }else if(width>=-0.1667&&width<=-0.1666){this.character="\u2009\u2063";// &NegativeThinSpace;
  }else if(width>=-0.2223&&width<=-0.2222){this.character="\u205F\u2063";// &NegativeMediumSpace;
  }else if(width>=-0.2778&&width<=-0.2777){this.character="\u2005\u2063";// &NegativeThickSpace;
  }else{this.character=null;}}/**
         * Converts the math node into a MathML-namespaced DOM element.
         */var _proto3=SpaceNode.prototype;_proto3.toNode=function toNode(){if(this.character){return document.createTextNode(this.character);}else{var node=document.createElementNS("http://www.w3.org/1998/Math/MathML","mspace");node.setAttribute("width",this.width+"em");return node;}}/**
         * Converts the math node into an HTML markup string.
         */;_proto3.toMarkup=function toMarkup(){if(this.character){return "<mtext>"+this.character+"</mtext>";}else{return "<mspace width=\""+this.width+"em\"/>";}}/**
         * Converts the math node into a string, similar to innerText.
         */;_proto3.toText=function toText(){if(this.character){return this.character;}else{return " ";}};return SpaceNode;}();/* harmony default export */var mathMLTree={MathNode:MathNode,TextNode:TextNode,SpaceNode:SpaceNode,newDocumentFragment:newDocumentFragment};/**
       * This file converts a parse tree into a cooresponding MathML tree. The main
       * entry point is the `buildMathML` function, which takes a parse tree from the
       * parser.
       */ /**
       * Takes a symbol and converts it into a MathML text node after performing
       * optional replacement from symbols.js.
       */var makeText=function makeText(text,mode,options){if(src_symbols[mode][text]&&src_symbols[mode][text].replace&&text.charCodeAt(0)!==0xD835&&!(ligatures.hasOwnProperty(text)&&options&&(options.fontFamily&&options.fontFamily.substr(4,2)==="tt"||options.font&&options.font.substr(4,2)==="tt"))){text=src_symbols[mode][text].replace;}return new mathMLTree.TextNode(text);};/**
       * Wrap the given array of nodes in an <mrow> node if needed, i.e.,
       * unless the array has length 1.  Always returns a single node.
       */var makeRow=function makeRow(body){if(body.length===1){return body[0];}else{return new mathMLTree.MathNode("mrow",body);}};/**
       * Returns the math variant as a string or null if none is required.
       */var getVariant=function getVariant(group,options){// Handle \text... font specifiers as best we can.
  // MathML has a limited list of allowable mathvariant specifiers; see
  // https://www.w3.org/TR/MathML3/chapter3.html#presm.commatt
  if(options.fontFamily==="texttt"){return "monospace";}else if(options.fontFamily==="textsf"){if(options.fontShape==="textit"&&options.fontWeight==="textbf"){return "sans-serif-bold-italic";}else if(options.fontShape==="textit"){return "sans-serif-italic";}else if(options.fontWeight==="textbf"){return "bold-sans-serif";}else{return "sans-serif";}}else if(options.fontShape==="textit"&&options.fontWeight==="textbf"){return "bold-italic";}else if(options.fontShape==="textit"){return "italic";}else if(options.fontWeight==="textbf"){return "bold";}var font=options.font;if(!font||font==="mathnormal"){return null;}var mode=group.mode;if(font==="mathit"){return "italic";}else if(font==="boldsymbol"){return group.type==="textord"?"bold":"bold-italic";}else if(font==="mathbf"){return "bold";}else if(font==="mathbb"){return "double-struck";}else if(font==="mathfrak"){return "fraktur";}else if(font==="mathscr"||font==="mathcal"){// MathML makes no distinction between script and caligrahpic
  return "script";}else if(font==="mathsf"){return "sans-serif";}else if(font==="mathtt"){return "monospace";}var text=group.text;if(utils.contains(["\\imath","\\jmath"],text)){return null;}if(src_symbols[mode][text]&&src_symbols[mode][text].replace){text=src_symbols[mode][text].replace;}var fontName=buildCommon.fontMap[font].fontName;if(getCharacterMetrics(text,fontName,mode)){return buildCommon.fontMap[font].variant;}return null;};/**
       * Takes a list of nodes, builds them, and returns a list of the generated
       * MathML nodes.  Also combine consecutive <mtext> outputs into a single
       * <mtext> tag.
       */var buildMathML_buildExpression=function buildExpression(expression,options,isOrdgroup){if(expression.length===1){var group=buildMathML_buildGroup(expression[0],options);if(isOrdgroup&&group instanceof MathNode&&group.type==="mo"){// When TeX writers want to suppress spacing on an operator,
  // they often put the operator by itself inside braces.
  group.setAttribute("lspace","0em");group.setAttribute("rspace","0em");}return [group];}var groups=[];var lastGroup;for(var i=0;i<expression.length;i++){var _group=buildMathML_buildGroup(expression[i],options);if(_group instanceof MathNode&&lastGroup instanceof MathNode){// Concatenate adjacent <mtext>s
  if(_group.type==='mtext'&&lastGroup.type==='mtext'&&_group.getAttribute('mathvariant')===lastGroup.getAttribute('mathvariant')){var _lastGroup$children;(_lastGroup$children=lastGroup.children).push.apply(_lastGroup$children,_group.children);continue;// Concatenate adjacent <mn>s
  }else if(_group.type==='mn'&&lastGroup.type==='mn'){var _lastGroup$children2;(_lastGroup$children2=lastGroup.children).push.apply(_lastGroup$children2,_group.children);continue;// Concatenate <mn>...</mn> followed by <mi>.</mi>
  }else if(_group.type==='mi'&&_group.children.length===1&&lastGroup.type==='mn'){var child=_group.children[0];if(child instanceof TextNode&&child.text==='.'){var _lastGroup$children3;(_lastGroup$children3=lastGroup.children).push.apply(_lastGroup$children3,_group.children);continue;}}else if(lastGroup.type==='mi'&&lastGroup.children.length===1){var lastChild=lastGroup.children[0];if(lastChild instanceof TextNode&&lastChild.text==="\u0338"&&(_group.type==='mo'||_group.type==='mi'||_group.type==='mn')){var _child=_group.children[0];if(_child instanceof TextNode&&_child.text.length>0){// Overlay with combining character long solidus
  _child.text=_child.text.slice(0,1)+"\u0338"+_child.text.slice(1);groups.pop();}}}}groups.push(_group);lastGroup=_group;}return groups;};/**
       * Equivalent to buildExpression, but wraps the elements in an <mrow>
       * if there's more than one.  Returns a single node instead of an array.
       */var buildExpressionRow=function buildExpressionRow(expression,options,isOrdgroup){return makeRow(buildMathML_buildExpression(expression,options,isOrdgroup));};/**
       * Takes a group from the parser and calls the appropriate groupBuilders function
       * on it to produce a MathML node.
       */var buildMathML_buildGroup=function buildGroup(group,options){if(!group){return new mathMLTree.MathNode("mrow");}if(_mathmlGroupBuilders[group.type]){// Call the groupBuilders function
  // $FlowFixMe
  var result=_mathmlGroupBuilders[group.type](group,options);// $FlowFixMe
  return result;}else{throw new src_ParseError("Got group of unknown type: '"+group.type+"'");}};/**
       * Takes a full parse tree and settings and builds a MathML representation of
       * it. In particular, we put the elements from building the parse tree into a
       * <semantics> tag so we can also include that TeX source as an annotation.
       *
       * Note that we actually return a domTree element with a `<math>` inside it so
       * we can do appropriate styling.
       */function buildMathML(tree,texExpression,options,isDisplayMode,forMathmlOnly){var expression=buildMathML_buildExpression(tree,options);// TODO: Make a pass thru the MathML similar to buildHTML.traverseNonSpaceNodes
  // and add spacing nodes. This is necessary only adjacent to math operators
  // like \sin or \lim or to subsup elements that contain math operators.
  // MathML takes care of the other spacing issues.
  // Wrap up the expression in an mrow so it is presented in the semantics
  // tag correctly, unless it's a single <mrow> or <mtable>.
  var wrapper;if(expression.length===1&&expression[0]instanceof MathNode&&utils.contains(["mrow","mtable"],expression[0].type)){wrapper=expression[0];}else{wrapper=new mathMLTree.MathNode("mrow",expression);}// Build a TeX annotation of the source
  var annotation=new mathMLTree.MathNode("annotation",[new mathMLTree.TextNode(texExpression)]);annotation.setAttribute("encoding","application/x-tex");var semantics=new mathMLTree.MathNode("semantics",[wrapper,annotation]);var math=new mathMLTree.MathNode("math",[semantics]);math.setAttribute("xmlns","http://www.w3.org/1998/Math/MathML");if(isDisplayMode){math.setAttribute("display","block");}// You can't style <math> nodes, so we wrap the node in a span.
  // NOTE: The span class is not typed to have <math> nodes as children, and
  // we don't want to make the children type more generic since the children
  // of span are expected to have more fields in `buildHtml` contexts.
  var wrapperClass=forMathmlOnly?"katex":"katex-mathml";// $FlowFixMe
  return buildCommon.makeSpan([wrapperClass],[math]);}var optionsFromSettings=function optionsFromSettings(settings){return new src_Options({style:settings.displayMode?src_Style.DISPLAY:src_Style.TEXT,maxSize:settings.maxSize,minRuleThickness:settings.minRuleThickness});};var displayWrap=function displayWrap(node,settings){if(settings.displayMode){var classes=["katex-display"];if(settings.leqno){classes.push("leqno");}if(settings.fleqn){classes.push("fleqn");}node=buildCommon.makeSpan(classes,[node]);}return node;};var buildTree=function buildTree(tree,expression,settings){var options=optionsFromSettings(settings);var katexNode;if(settings.output==="mathml"){return buildMathML(tree,expression,options,settings.displayMode,true);}else if(settings.output==="html"){var htmlNode=buildHTML(tree,options);katexNode=buildCommon.makeSpan(["katex"],[htmlNode]);}else{var mathMLNode=buildMathML(tree,expression,options,settings.displayMode,false);var _htmlNode=buildHTML(tree,options);katexNode=buildCommon.makeSpan(["katex"],[mathMLNode,_htmlNode]);}return displayWrap(katexNode,settings);};var buildHTMLTree=function buildHTMLTree(tree,expression,settings){var options=optionsFromSettings(settings);var htmlNode=buildHTML(tree,options);var katexNode=buildCommon.makeSpan(["katex"],[htmlNode]);return displayWrap(katexNode,settings);};/**
       * This file provides support to buildMathML.js and buildHTML.js
       * for stretchy wide elements rendered from SVG files
       * and other CSS trickery.
       */var stretchyCodePoint={widehat:"^",widecheck:"ˇ",widetilde:"~",utilde:"~",overleftarrow:"\u2190",underleftarrow:"\u2190",xleftarrow:"\u2190",overrightarrow:"\u2192",underrightarrow:"\u2192",xrightarrow:"\u2192",underbrace:"\u23DF",overbrace:"\u23DE",overgroup:"\u23E0",undergroup:"\u23E1",overleftrightarrow:"\u2194",underleftrightarrow:"\u2194",xleftrightarrow:"\u2194",Overrightarrow:"\u21D2",xRightarrow:"\u21D2",overleftharpoon:"\u21BC",xleftharpoonup:"\u21BC",overrightharpoon:"\u21C0",xrightharpoonup:"\u21C0",xLeftarrow:"\u21D0",xLeftrightarrow:"\u21D4",xhookleftarrow:"\u21A9",xhookrightarrow:"\u21AA",xmapsto:"\u21A6",xrightharpoondown:"\u21C1",xleftharpoondown:"\u21BD",xrightleftharpoons:"\u21CC",xleftrightharpoons:"\u21CB",xtwoheadleftarrow:"\u219E",xtwoheadrightarrow:"\u21A0",xlongequal:"=",xtofrom:"\u21C4",xrightleftarrows:"\u21C4",xrightequilibrium:"\u21CC",// Not a perfect match.
  xleftequilibrium:"\u21CB",// None better available.
  "\\cdrightarrow":"\u2192","\\cdleftarrow":"\u2190","\\cdlongequal":"="};var mathMLnode=function mathMLnode(label){var node=new mathMLTree.MathNode("mo",[new mathMLTree.TextNode(stretchyCodePoint[label.replace(/^\\/,'')])]);node.setAttribute("stretchy","true");return node;};// Many of the KaTeX SVG images have been adapted from glyphs in KaTeX fonts.
  // Copyright (c) 2009-2010, Design Science, Inc. (<www.mathjax.org>)
  // Copyright (c) 2014-2017 Khan Academy (<www.khanacademy.org>)
  // Licensed under the SIL Open Font License, Version 1.1.
  // See \nhttp://scripts.sil.org/OFL
  // Very Long SVGs
  //    Many of the KaTeX stretchy wide elements use a long SVG image and an
  //    overflow: hidden tactic to achieve a stretchy image while avoiding
  //    distortion of arrowheads or brace corners.
  //    The SVG typically contains a very long (400 em) arrow.
  //    The SVG is in a container span that has overflow: hidden, so the span
  //    acts like a window that exposes only part of the  SVG.
  //    The SVG always has a longer, thinner aspect ratio than the container span.
  //    After the SVG fills 100% of the height of the container span,
  //    there is a long arrow shaft left over. That left-over shaft is not shown.
  //    Instead, it is sliced off because the span's CSS has overflow: hidden.
  //    Thus, the reader sees an arrow that matches the subject matter width
  //    without distortion.
  //    Some functions, such as \cancel, need to vary their aspect ratio. These
  //    functions do not get the overflow SVG treatment.
  // Second Brush Stroke
  //    Low resolution monitors struggle to display images in fine detail.
  //    So browsers apply anti-aliasing. A long straight arrow shaft therefore
  //    will sometimes appear as if it has a blurred edge.
  //    To mitigate this, these SVG files contain a second "brush-stroke" on the
  //    arrow shafts. That is, a second long thin rectangular SVG path has been
  //    written directly on top of each arrow shaft. This reinforcement causes
  //    some of the screen pixels to display as black instead of the anti-aliased
  //    gray pixel that a  single path would generate. So we get arrow shafts
  //    whose edges appear to be sharper.
  // In the katexImagesData object just below, the dimensions all
  // correspond to path geometry inside the relevant SVG.
  // For example, \overrightarrow uses the same arrowhead as glyph U+2192
  // from the KaTeX Main font. The scaling factor is 1000.
  // That is, inside the font, that arrowhead is 522 units tall, which
  // corresponds to 0.522 em inside the document.
  var katexImagesData={//   path(s), minWidth, height, align
  overrightarrow:[["rightarrow"],0.888,522,"xMaxYMin"],overleftarrow:[["leftarrow"],0.888,522,"xMinYMin"],underrightarrow:[["rightarrow"],0.888,522,"xMaxYMin"],underleftarrow:[["leftarrow"],0.888,522,"xMinYMin"],xrightarrow:[["rightarrow"],1.469,522,"xMaxYMin"],"\\cdrightarrow":[["rightarrow"],3.0,522,"xMaxYMin"],// CD minwwidth2.5pc
  xleftarrow:[["leftarrow"],1.469,522,"xMinYMin"],"\\cdleftarrow":[["leftarrow"],3.0,522,"xMinYMin"],Overrightarrow:[["doublerightarrow"],0.888,560,"xMaxYMin"],xRightarrow:[["doublerightarrow"],1.526,560,"xMaxYMin"],xLeftarrow:[["doubleleftarrow"],1.526,560,"xMinYMin"],overleftharpoon:[["leftharpoon"],0.888,522,"xMinYMin"],xleftharpoonup:[["leftharpoon"],0.888,522,"xMinYMin"],xleftharpoondown:[["leftharpoondown"],0.888,522,"xMinYMin"],overrightharpoon:[["rightharpoon"],0.888,522,"xMaxYMin"],xrightharpoonup:[["rightharpoon"],0.888,522,"xMaxYMin"],xrightharpoondown:[["rightharpoondown"],0.888,522,"xMaxYMin"],xlongequal:[["longequal"],0.888,334,"xMinYMin"],"\\cdlongequal":[["longequal"],3.0,334,"xMinYMin"],xtwoheadleftarrow:[["twoheadleftarrow"],0.888,334,"xMinYMin"],xtwoheadrightarrow:[["twoheadrightarrow"],0.888,334,"xMaxYMin"],overleftrightarrow:[["leftarrow","rightarrow"],0.888,522],overbrace:[["leftbrace","midbrace","rightbrace"],1.6,548],underbrace:[["leftbraceunder","midbraceunder","rightbraceunder"],1.6,548],underleftrightarrow:[["leftarrow","rightarrow"],0.888,522],xleftrightarrow:[["leftarrow","rightarrow"],1.75,522],xLeftrightarrow:[["doubleleftarrow","doublerightarrow"],1.75,560],xrightleftharpoons:[["leftharpoondownplus","rightharpoonplus"],1.75,716],xleftrightharpoons:[["leftharpoonplus","rightharpoondownplus"],1.75,716],xhookleftarrow:[["leftarrow","righthook"],1.08,522],xhookrightarrow:[["lefthook","rightarrow"],1.08,522],overlinesegment:[["leftlinesegment","rightlinesegment"],0.888,522],underlinesegment:[["leftlinesegment","rightlinesegment"],0.888,522],overgroup:[["leftgroup","rightgroup"],0.888,342],undergroup:[["leftgroupunder","rightgroupunder"],0.888,342],xmapsto:[["leftmapsto","rightarrow"],1.5,522],xtofrom:[["leftToFrom","rightToFrom"],1.75,528],// The next three arrows are from the mhchem package.
  // In mhchem.sty, min-length is 2.0em. But these arrows might appear in the
  // document as \xrightarrow or \xrightleftharpoons. Those have
  // min-length = 1.75em, so we set min-length on these next three to match.
  xrightleftarrows:[["baraboveleftarrow","rightarrowabovebar"],1.75,901],xrightequilibrium:[["baraboveshortleftharpoon","rightharpoonaboveshortbar"],1.75,716],xleftequilibrium:[["shortbaraboveleftharpoon","shortrightharpoonabovebar"],1.75,716]};var groupLength=function groupLength(arg){if(arg.type==="ordgroup"){return arg.body.length;}else{return 1;}};var svgSpan=function svgSpan(group,options){// Create a span with inline SVG for the element.
  function buildSvgSpan_(){var viewBoxWidth=400000;// default
  var label=group.label.substr(1);if(utils.contains(["widehat","widecheck","widetilde","utilde"],label)){// Each type in the `if` statement corresponds to one of the ParseNode
  // types below. This narrowing is required to access `grp.base`.
  // $FlowFixMe
  var grp=group;// There are four SVG images available for each function.
  // Choose a taller image when there are more characters.
  var numChars=groupLength(grp.base);var viewBoxHeight;var pathName;var _height;if(numChars>5){if(label==="widehat"||label==="widecheck"){viewBoxHeight=420;viewBoxWidth=2364;_height=0.42;pathName=label+"4";}else{viewBoxHeight=312;viewBoxWidth=2340;_height=0.34;pathName="tilde4";}}else{var imgIndex=[1,1,2,2,3,3][numChars];if(label==="widehat"||label==="widecheck"){viewBoxWidth=[0,1062,2364,2364,2364][imgIndex];viewBoxHeight=[0,239,300,360,420][imgIndex];_height=[0,0.24,0.3,0.3,0.36,0.42][imgIndex];pathName=label+imgIndex;}else{viewBoxWidth=[0,600,1033,2339,2340][imgIndex];viewBoxHeight=[0,260,286,306,312][imgIndex];_height=[0,0.26,0.286,0.3,0.306,0.34][imgIndex];pathName="tilde"+imgIndex;}}var path=new PathNode(pathName);var svgNode=new SvgNode([path],{"width":"100%","height":_height+"em","viewBox":"0 0 "+viewBoxWidth+" "+viewBoxHeight,"preserveAspectRatio":"none"});return {span:buildCommon.makeSvgSpan([],[svgNode],options),minWidth:0,height:_height};}else{var spans=[];var data=katexImagesData[label];var paths=data[0],_minWidth=data[1],_viewBoxHeight=data[2];var _height2=_viewBoxHeight/1000;var numSvgChildren=paths.length;var widthClasses;var aligns;if(numSvgChildren===1){// $FlowFixMe: All these cases must be of the 4-tuple type.
  var align1=data[3];widthClasses=["hide-tail"];aligns=[align1];}else if(numSvgChildren===2){widthClasses=["halfarrow-left","halfarrow-right"];aligns=["xMinYMin","xMaxYMin"];}else if(numSvgChildren===3){widthClasses=["brace-left","brace-center","brace-right"];aligns=["xMinYMin","xMidYMin","xMaxYMin"];}else{throw new Error("Correct katexImagesData or update code here to support\n                    "+numSvgChildren+" children.");}for(var i=0;i<numSvgChildren;i++){var _path=new PathNode(paths[i]);var _svgNode=new SvgNode([_path],{"width":"400em","height":_height2+"em","viewBox":"0 0 "+viewBoxWidth+" "+_viewBoxHeight,"preserveAspectRatio":aligns[i]+" slice"});var _span=buildCommon.makeSvgSpan([widthClasses[i]],[_svgNode],options);if(numSvgChildren===1){return {span:_span,minWidth:_minWidth,height:_height2};}else{_span.style.height=_height2+"em";spans.push(_span);}}return {span:buildCommon.makeSpan(["stretchy"],spans,options),minWidth:_minWidth,height:_height2};}}// buildSvgSpan_()
  var _buildSvgSpan_=buildSvgSpan_(),span=_buildSvgSpan_.span,minWidth=_buildSvgSpan_.minWidth,height=_buildSvgSpan_.height;// Note that we are returning span.depth = 0.
  // Any adjustments relative to the baseline must be done in buildHTML.
  span.height=height;span.style.height=height+"em";if(minWidth>0){span.style.minWidth=minWidth+"em";}return span;};var encloseSpan=function encloseSpan(inner,label,topPad,bottomPad,options){// Return an image span for \cancel, \bcancel, \xcancel, \fbox, or \angl
  var img;var totalHeight=inner.height+inner.depth+topPad+bottomPad;if(/fbox|color|angl/.test(label)){img=buildCommon.makeSpan(["stretchy",label],[],options);if(label==="fbox"){var color=options.color&&options.getColor();if(color){img.style.borderColor=color;}}}else{// \cancel, \bcancel, or \xcancel
  // Since \cancel's SVG is inline and it omits the viewBox attribute,
  // its stroke-width will not vary with span area.
  var lines=[];if(/^[bx]cancel$/.test(label)){lines.push(new LineNode({"x1":"0","y1":"0","x2":"100%","y2":"100%","stroke-width":"0.046em"}));}if(/^x?cancel$/.test(label)){lines.push(new LineNode({"x1":"0","y1":"100%","x2":"100%","y2":"0","stroke-width":"0.046em"}));}var svgNode=new SvgNode(lines,{"width":"100%","height":totalHeight+"em"});img=buildCommon.makeSvgSpan([],[svgNode],options);}img.height=totalHeight;img.style.height=totalHeight+"em";return img;};/* harmony default export */var stretchy={encloseSpan:encloseSpan,mathMLnode:mathMLnode,svgSpan:svgSpan};/**
       * Asserts that the node is of the given type and returns it with stricter
       * typing. Throws if the node's type does not match.
       */function assertNodeType(node,type){if(!node||node.type!==type){throw new Error("Expected node of type "+type+", but got "+(node?"node of type "+node.type:String(node)));}// $FlowFixMe, >=0.125
  return node;}/**
       * Returns the node more strictly typed iff it is of the given type. Otherwise,
       * returns null.
       */function assertSymbolNodeType(node){var typedNode=checkSymbolNodeType(node);if(!typedNode){throw new Error("Expected node of symbol group type, but got "+(node?"node of type "+node.type:String(node)));}return typedNode;}/**
       * Returns the node more strictly typed iff it is of the given type. Otherwise,
       * returns null.
       */function checkSymbolNodeType(node){if(node&&(node.type==="atom"||NON_ATOMS.hasOwnProperty(node.type))){// $FlowFixMe
  return node;}return null;}// NOTE: Unlike most `htmlBuilder`s, this one handles not only "accent", but
  // also "supsub" since an accent can affect super/subscripting.
  var htmlBuilder=function htmlBuilder(grp,options){// Accents are handled in the TeXbook pg. 443, rule 12.
  var base;var group;var supSubGroup;if(grp&&grp.type==="supsub"){// If our base is a character box, and we have superscripts and
  // subscripts, the supsub will defer to us. In particular, we want
  // to attach the superscripts and subscripts to the inner body (so
  // that the position of the superscripts and subscripts won't be
  // affected by the height of the accent). We accomplish this by
  // sticking the base of the accent into the base of the supsub, and
  // rendering that, while keeping track of where the accent is.
  // The real accent group is the base of the supsub group
  group=assertNodeType(grp.base,"accent");// The character box is the base of the accent group
  base=group.base;// Stick the character box into the base of the supsub group
  grp.base=base;// Rerender the supsub group with its new base, and store that
  // result.
  supSubGroup=assertSpan(buildGroup(grp,options));// reset original base
  grp.base=group;}else{group=assertNodeType(grp,"accent");base=group.base;}// Build the base group
  var body=buildGroup(base,options.havingCrampedStyle());// Does the accent need to shift for the skew of a character?
  var mustShift=group.isShifty&&utils.isCharacterBox(base);// Calculate the skew of the accent. This is based on the line "If the
  // nucleus is not a single character, let s = 0; otherwise set s to the
  // kern amount for the nucleus followed by the \skewchar of its font."
  // Note that our skew metrics are just the kern between each character
  // and the skewchar.
  var skew=0;if(mustShift){// If the base is a character box, then we want the skew of the
  // innermost character. To do that, we find the innermost character:
  var baseChar=utils.getBaseElem(base);// Then, we render its group to get the symbol inside it
  var baseGroup=buildGroup(baseChar,options.havingCrampedStyle());// Finally, we pull the skew off of the symbol.
  skew=assertSymbolDomNode(baseGroup).skew;// Note that we now throw away baseGroup, because the layers we
  // removed with getBaseElem might contain things like \color which
  // we can't get rid of.
  // TODO(emily): Find a better way to get the skew
  }var accentBelow=group.label==="\\c";// calculate the amount of space between the body and the accent
  var clearance=accentBelow?body.height+body.depth:Math.min(body.height,options.fontMetrics().xHeight);// Build the accent
  var accentBody;if(!group.isStretchy){var accent;var width;if(group.label==="\\vec"){// Before version 0.9, \vec used the combining font glyph U+20D7.
  // But browsers, especially Safari, are not consistent in how they
  // render combining characters when not preceded by a character.
  // So now we use an SVG.
  // If Safari reforms, we should consider reverting to the glyph.
  accent=buildCommon.staticSvg("vec",options);width=buildCommon.svgData.vec[1];}else{accent=buildCommon.makeOrd({mode:group.mode,text:group.label},options,"textord");accent=assertSymbolDomNode(accent);// Remove the italic correction of the accent, because it only serves to
  // shift the accent over to a place we don't want.
  accent.italic=0;width=accent.width;if(accentBelow){clearance+=accent.depth;}}accentBody=buildCommon.makeSpan(["accent-body"],[accent]);// "Full" accents expand the width of the resulting symbol to be
  // at least the width of the accent, and overlap directly onto the
  // character without any vertical offset.
  var accentFull=group.label==="\\textcircled";if(accentFull){accentBody.classes.push('accent-full');clearance=body.height;}// Shift the accent over by the skew.
  var left=skew;// CSS defines `.katex .accent .accent-body:not(.accent-full) { width: 0 }`
  // so that the accent doesn't contribute to the bounding box.
  // We need to shift the character by its width (effectively half
  // its width) to compensate.
  if(!accentFull){left-=width/2;}accentBody.style.left=left+"em";// \textcircled uses the \bigcirc glyph, so it needs some
  // vertical adjustment to match LaTeX.
  if(group.label==="\\textcircled"){accentBody.style.top=".2em";}accentBody=buildCommon.makeVList({positionType:"firstBaseline",children:[{type:"elem",elem:body},{type:"kern",size:-clearance},{type:"elem",elem:accentBody}]},options);}else{accentBody=stretchy.svgSpan(group,options);accentBody=buildCommon.makeVList({positionType:"firstBaseline",children:[{type:"elem",elem:body},{type:"elem",elem:accentBody,wrapperClasses:["svg-align"],wrapperStyle:skew>0?{width:"calc(100% - "+2*skew+"em)",marginLeft:2*skew+"em"}:undefined}]},options);}var accentWrap=buildCommon.makeSpan(["mord","accent"],[accentBody],options);if(supSubGroup){// Here, we replace the "base" child of the supsub with our newly
  // generated accent.
  supSubGroup.children[0]=accentWrap;// Since we don't rerun the height calculation after replacing the
  // accent, we manually recalculate height.
  supSubGroup.height=Math.max(accentWrap.height,supSubGroup.height);// Accents should always be ords, even when their innards are not.
  supSubGroup.classes[0]="mord";return supSubGroup;}else{return accentWrap;}};var mathmlBuilder=function mathmlBuilder(group,options){var accentNode=group.isStretchy?stretchy.mathMLnode(group.label):new mathMLTree.MathNode("mo",[makeText(group.label,group.mode)]);var node=new mathMLTree.MathNode("mover",[buildMathML_buildGroup(group.base,options),accentNode]);node.setAttribute("accent","true");return node;};var NON_STRETCHY_ACCENT_REGEX=new RegExp(["\\acute","\\grave","\\ddot","\\tilde","\\bar","\\breve","\\check","\\hat","\\vec","\\dot","\\mathring"].map(function(accent){return "\\"+accent;}).join("|"));// Accents
  defineFunction({type:"accent",names:["\\acute","\\grave","\\ddot","\\tilde","\\bar","\\breve","\\check","\\hat","\\vec","\\dot","\\mathring","\\widecheck","\\widehat","\\widetilde","\\overrightarrow","\\overleftarrow","\\Overrightarrow","\\overleftrightarrow","\\overgroup","\\overlinesegment","\\overleftharpoon","\\overrightharpoon"],props:{numArgs:1},handler:function handler(context,args){var base=normalizeArgument(args[0]);var isStretchy=!NON_STRETCHY_ACCENT_REGEX.test(context.funcName);var isShifty=!isStretchy||context.funcName==="\\widehat"||context.funcName==="\\widetilde"||context.funcName==="\\widecheck";return {type:"accent",mode:context.parser.mode,label:context.funcName,isStretchy:isStretchy,isShifty:isShifty,base:base};},htmlBuilder:htmlBuilder,mathmlBuilder:mathmlBuilder});// Text-mode accents
  defineFunction({type:"accent",names:["\\'","\\`","\\^","\\~","\\=","\\u","\\.",'\\"',"\\c","\\r","\\H","\\v","\\textcircled"],props:{numArgs:1,allowedInText:true,allowedInMath:true,// unless in strict mode
  argTypes:["primitive"]},handler:function handler(context,args){var base=args[0];var mode=context.parser.mode;if(mode==="math"){context.parser.settings.reportNonstrict("mathVsTextAccents","LaTeX's accent "+context.funcName+" works only in text mode");mode="text";}return {type:"accent",mode:mode,label:context.funcName,isStretchy:false,isShifty:true,base:base};},htmlBuilder:htmlBuilder,mathmlBuilder:mathmlBuilder});// Horizontal overlap functions
  defineFunction({type:"accentUnder",names:["\\underleftarrow","\\underrightarrow","\\underleftrightarrow","\\undergroup","\\underlinesegment","\\utilde"],props:{numArgs:1},handler:function handler(_ref,args){var parser=_ref.parser,funcName=_ref.funcName;var base=args[0];return {type:"accentUnder",mode:parser.mode,label:funcName,base:base};},htmlBuilder:function htmlBuilder(group,options){// Treat under accents much like underlines.
  var innerGroup=buildGroup(group.base,options);var accentBody=stretchy.svgSpan(group,options);var kern=group.label==="\\utilde"?0.12:0;// Generate the vlist, with the appropriate kerns
  var vlist=buildCommon.makeVList({positionType:"top",positionData:innerGroup.height,children:[{type:"elem",elem:accentBody,wrapperClasses:["svg-align"]},{type:"kern",size:kern},{type:"elem",elem:innerGroup}]},options);return buildCommon.makeSpan(["mord","accentunder"],[vlist],options);},mathmlBuilder:function mathmlBuilder(group,options){var accentNode=stretchy.mathMLnode(group.label);var node=new mathMLTree.MathNode("munder",[buildMathML_buildGroup(group.base,options),accentNode]);node.setAttribute("accentunder","true");return node;}});// Helper function
  var paddedNode=function paddedNode(group){var node=new mathMLTree.MathNode("mpadded",group?[group]:[]);node.setAttribute("width","+0.6em");node.setAttribute("lspace","0.3em");return node;};// Stretchy arrows with an optional argument
  defineFunction({type:"xArrow",names:["\\xleftarrow","\\xrightarrow","\\xLeftarrow","\\xRightarrow","\\xleftrightarrow","\\xLeftrightarrow","\\xhookleftarrow","\\xhookrightarrow","\\xmapsto","\\xrightharpoondown","\\xrightharpoonup","\\xleftharpoondown","\\xleftharpoonup","\\xrightleftharpoons","\\xleftrightharpoons","\\xlongequal","\\xtwoheadrightarrow","\\xtwoheadleftarrow","\\xtofrom",// The next 3 functions are here to support the mhchem extension.
  // Direct use of these functions is discouraged and may break someday.
  "\\xrightleftarrows","\\xrightequilibrium","\\xleftequilibrium",// The next 3 functions are here only to support the {CD} environment.
  "\\\\cdrightarrow","\\\\cdleftarrow","\\\\cdlongequal"],props:{numArgs:1,numOptionalArgs:1},handler:function handler(_ref,args,optArgs){var parser=_ref.parser,funcName=_ref.funcName;return {type:"xArrow",mode:parser.mode,label:funcName,body:args[0],below:optArgs[0]};},// Flow is unable to correctly infer the type of `group`, even though it's
  // unamibiguously determined from the passed-in `type` above.
  htmlBuilder:function htmlBuilder(group,options){var style=options.style;// Build the argument groups in the appropriate style.
  // Ref: amsmath.dtx:   \hbox{$\scriptstyle\mkern#3mu{#6}\mkern#4mu$}%
  // Some groups can return document fragments.  Handle those by wrapping
  // them in a span.
  var newOptions=options.havingStyle(style.sup());var upperGroup=buildCommon.wrapFragment(buildGroup(group.body,newOptions,options),options);var arrowPrefix=group.label.slice(0,2)==="\\x"?"x":"cd";upperGroup.classes.push(arrowPrefix+"-arrow-pad");var lowerGroup;if(group.below){// Build the lower group
  newOptions=options.havingStyle(style.sub());lowerGroup=buildCommon.wrapFragment(buildGroup(group.below,newOptions,options),options);lowerGroup.classes.push(arrowPrefix+"-arrow-pad");}var arrowBody=stretchy.svgSpan(group,options);// Re shift: Note that stretchy.svgSpan returned arrowBody.depth = 0.
  // The point we want on the math axis is at 0.5 * arrowBody.height.
  var arrowShift=-options.fontMetrics().axisHeight+0.5*arrowBody.height;// 2 mu kern. Ref: amsmath.dtx: #7\if0#2\else\mkern#2mu\fi
  var upperShift=-options.fontMetrics().axisHeight-0.5*arrowBody.height-0.111;// 0.111 em = 2 mu
  if(upperGroup.depth>0.25||group.label==="\\xleftequilibrium"){upperShift-=upperGroup.depth;// shift up if depth encroaches
  }// Generate the vlist
  var vlist;if(lowerGroup){var lowerShift=-options.fontMetrics().axisHeight+lowerGroup.height+0.5*arrowBody.height+0.111;vlist=buildCommon.makeVList({positionType:"individualShift",children:[{type:"elem",elem:upperGroup,shift:upperShift},{type:"elem",elem:arrowBody,shift:arrowShift},{type:"elem",elem:lowerGroup,shift:lowerShift}]},options);}else{vlist=buildCommon.makeVList({positionType:"individualShift",children:[{type:"elem",elem:upperGroup,shift:upperShift},{type:"elem",elem:arrowBody,shift:arrowShift}]},options);}// $FlowFixMe: Replace this with passing "svg-align" into makeVList.
  vlist.children[0].children[0].children[1].classes.push("svg-align");return buildCommon.makeSpan(["mrel","x-arrow"],[vlist],options);},mathmlBuilder:function mathmlBuilder(group,options){var arrowNode=stretchy.mathMLnode(group.label);arrowNode.setAttribute("minsize",group.label.charAt(0)==="x"?"1.75em":"3.0em");var node;if(group.body){var upperNode=paddedNode(buildMathML_buildGroup(group.body,options));if(group.below){var lowerNode=paddedNode(buildMathML_buildGroup(group.below,options));node=new mathMLTree.MathNode("munderover",[arrowNode,lowerNode,upperNode]);}else{node=new mathMLTree.MathNode("mover",[arrowNode,upperNode]);}}else if(group.below){var _lowerNode=paddedNode(buildMathML_buildGroup(group.below,options));node=new mathMLTree.MathNode("munder",[arrowNode,_lowerNode]);}else{// This should never happen.
  // Parser.js throws an error if there is no argument.
  node=paddedNode();node=new mathMLTree.MathNode("mover",[arrowNode,node]);}return node;}});var cdArrowFunctionName={">":"\\\\cdrightarrow","<":"\\\\cdleftarrow","=":"\\\\cdlongequal","A":"\\uparrow","V":"\\downarrow","|":"\\Vert",".":"no arrow"};var newCell=function newCell(){// Create an empty cell, to be filled below with parse nodes.
  // The parseTree from this module must be constructed like the
  // one created by parseArray(), so an empty CD cell must
  // be a ParseNode<"styling">. And CD is always displaystyle.
  // So these values are fixed and flow can do implicit typing.
  return {type:"styling",body:[],mode:"math",style:"display"};};var isStartOfArrow=function isStartOfArrow(node){return node.type==="textord"&&node.text==="@";};var isLabelEnd=function isLabelEnd(node,endChar){return (node.type==="mathord"||node.type==="atom")&&node.text===endChar;};function cdArrow(arrowChar,labels,parser){// Return a parse tree of an arrow and its labels.
  // This acts in a way similar to a macro expansion.
  var funcName=cdArrowFunctionName[arrowChar];switch(funcName){case"\\\\cdrightarrow":case"\\\\cdleftarrow":return parser.callFunction(funcName,[labels[0]],[labels[1]]);case"\\uparrow":case"\\downarrow":{var leftLabel=parser.callFunction("\\\\cdleft",[labels[0]],[]);var bareArrow={type:"atom",text:funcName,mode:"math",family:"rel"};var sizedArrow=parser.callFunction("\\Big",[bareArrow],[]);var rightLabel=parser.callFunction("\\\\cdright",[labels[1]],[]);var arrowGroup={type:"ordgroup",mode:"math",body:[leftLabel,sizedArrow,rightLabel]};return parser.callFunction("\\\\cdparent",[arrowGroup],[]);}case"\\\\cdlongequal":return parser.callFunction("\\\\cdlongequal",[],[]);case"\\Vert":{var arrow={type:"textord",text:"\\Vert",mode:"math"};return parser.callFunction("\\Big",[arrow],[]);}default:return {type:"textord",text:" ",mode:"math"};}}function parseCD(parser){// Get the array's parse nodes with \\ temporarily mapped to \cr.
  var parsedRows=[];parser.gullet.beginGroup();parser.gullet.macros.set("\\cr","\\\\\\relax");parser.gullet.beginGroup();while(true){// eslint-disable-line no-constant-condition
  // Get the parse nodes for the next row.
  parsedRows.push(parser.parseExpression(false,"\\\\"));parser.gullet.endGroup();parser.gullet.beginGroup();var next=parser.fetch().text;if(next==="&"||next==="\\\\"){parser.consume();}else if(next==="\\end"){if(parsedRows[parsedRows.length-1].length===0){parsedRows.pop();// final row ended in \\
  }break;}else{throw new src_ParseError("Expected \\\\ or \\cr or \\end",parser.nextToken);}}var row=[];var body=[row];// Loop thru the parse nodes. Collect them into cells and arrows.
  for(var i=0;i<parsedRows.length;i++){// Start a new row.
  var rowNodes=parsedRows[i];// Create the first cell.
  var cell=newCell();for(var j=0;j<rowNodes.length;j++){if(!isStartOfArrow(rowNodes[j])){// If a parseNode is not an arrow, it goes into a cell.
  cell.body.push(rowNodes[j]);}else{// Parse node j is an "@", the start of an arrow.
  // Before starting on the arrow, push the cell into `row`.
  row.push(cell);// Now collect parseNodes into an arrow.
  // The character after "@" defines the arrow type.
  j+=1;var arrowChar=assertSymbolNodeType(rowNodes[j]).text;// Create two empty label nodes. We may or may not use them.
  var labels=new Array(2);labels[0]={type:"ordgroup",mode:"math",body:[]};labels[1]={type:"ordgroup",mode:"math",body:[]};// Process the arrow.
  if("=|.".indexOf(arrowChar)>-1);else if("<>AV".indexOf(arrowChar)>-1){// Four arrows, `@>>>`, `@<<<`, `@AAA`, and `@VVV`, each take
  // two optional labels. E.g. the right-point arrow syntax is
  // really:  @>{optional label}>{optional label}>
  // Collect parseNodes into labels.
  for(var labelNum=0;labelNum<2;labelNum++){var inLabel=true;for(var k=j+1;k<rowNodes.length;k++){if(isLabelEnd(rowNodes[k],arrowChar)){inLabel=false;j=k;break;}if(isStartOfArrow(rowNodes[k])){throw new src_ParseError("Missing a "+arrowChar+" character to complete a CD arrow.",rowNodes[k]);}labels[labelNum].body.push(rowNodes[k]);}if(inLabel){// isLabelEnd never returned a true.
  throw new src_ParseError("Missing a "+arrowChar+" character to complete a CD arrow.",rowNodes[j]);}}}else{throw new src_ParseError("Expected one of \"<>AV=|.\" after @",rowNodes[j]);}// Now join the arrow to its labels.
  var arrow=cdArrow(arrowChar,labels,parser);// Wrap the arrow in  ParseNode<"styling">.
  // This is done to match parseArray() behavior.
  var wrappedArrow={type:"styling",body:[arrow],mode:"math",style:"display"// CD is always displaystyle.
  };row.push(wrappedArrow);// In CD's syntax, cells are implicit. That is, everything that
  // is not an arrow gets collected into a cell. So create an empty
  // cell now. It will collect upcoming parseNodes.
  cell=newCell();}}if(i%2===0){// Even-numbered rows consist of: cell, arrow, cell, arrow, ... cell
  // The last cell is not yet pushed into `row`, so:
  row.push(cell);}else{// Odd-numbered rows consist of: vert arrow, empty cell, ... vert arrow
  // Remove the empty cell that was placed at the beginning of `row`.
  row.shift();}row=[];body.push(row);}// End row group
  parser.gullet.endGroup();// End array group defining \\
  parser.gullet.endGroup();// define column separation.
  var cols=new Array(body[0].length).fill({type:"align",align:"c",pregap:0.25,// CD package sets \enskip between columns.
  postgap:0.25// So pre and post each get half an \enskip, i.e. 0.25em.
  });return {type:"array",mode:"math",body:body,arraystretch:1,addJot:true,rowGaps:[null],cols:cols,colSeparationType:"CD",hLinesBeforeRow:new Array(body.length+1).fill([])};}// The functions below are not available for general use.
  // They are here only for internal use by the {CD} environment in placing labels
  // next to vertical arrows.
  // We don't need any such functions for horizontal arrows because we can reuse
  // the functionality that already exists for extensible arrows.
  defineFunction({type:"cdlabel",names:["\\\\cdleft","\\\\cdright"],props:{numArgs:1},handler:function handler(_ref,args){var parser=_ref.parser,funcName=_ref.funcName;return {type:"cdlabel",mode:parser.mode,side:funcName.slice(4),label:args[0]};},htmlBuilder:function htmlBuilder(group,options){var newOptions=options.havingStyle(options.style.sup());var label=buildCommon.wrapFragment(buildGroup(group.label,newOptions,options),options);label.classes.push("cd-label-"+group.side);label.style.bottom=0.8-label.depth+"em";// Zero out label height & depth, so vertical align of arrow is set
  // by the arrow height, not by the label.
  label.height=0;label.depth=0;return label;},mathmlBuilder:function mathmlBuilder(group,options){var label=new mathMLTree.MathNode("mrow",[buildMathML_buildGroup(group.label,options)]);label=new mathMLTree.MathNode("mpadded",[label]);label.setAttribute("width","0");if(group.side==="left"){label.setAttribute("lspace","-1width");}// We have to guess at vertical alignment. We know the arrow is 1.8em tall,
  // But we don't know the height or depth of the label.
  label.setAttribute("voffset","0.7em");label=new mathMLTree.MathNode("mstyle",[label]);label.setAttribute("displaystyle","false");label.setAttribute("scriptlevel","1");return label;}});defineFunction({type:"cdlabelparent",names:["\\\\cdparent"],props:{numArgs:1},handler:function handler(_ref2,args){var parser=_ref2.parser;return {type:"cdlabelparent",mode:parser.mode,fragment:args[0]};},htmlBuilder:function htmlBuilder(group,options){// Wrap the vertical arrow and its labels.
  // The parent gets position: relative. The child gets position: absolute.
  // So CSS can locate the label correctly.
  var parent=buildCommon.wrapFragment(buildGroup(group.fragment,options),options);parent.classes.push("cd-vert-arrow");return parent;},mathmlBuilder:function mathmlBuilder(group,options){return new mathMLTree.MathNode("mrow",[buildMathML_buildGroup(group.fragment,options)]);}});// \@char is an internal function that takes a grouped decimal argument like
  // {123} and converts into symbol with code 123.  It is used by the *macro*
  // \char defined in macros.js.
  defineFunction({type:"textord",names:["\\@char"],props:{numArgs:1,allowedInText:true},handler:function handler(_ref,args){var parser=_ref.parser;var arg=assertNodeType(args[0],"ordgroup");var group=arg.body;var number="";for(var i=0;i<group.length;i++){var node=assertNodeType(group[i],"textord");number+=node.text;}var code=parseInt(number);var text;if(isNaN(code)){throw new src_ParseError("\\@char has non-numeric argument "+number);// If we drop IE support, the following code could be replaced with
  // text = String.fromCodePoint(code)
  }else if(code<0||code>=0x10ffff){throw new src_ParseError("\\@char with invalid code point "+number);}else if(code<=0xffff){text=String.fromCharCode(code);}else{// Astral code point; split into surrogate halves
  code-=0x10000;text=String.fromCharCode((code>>10)+0xd800,(code&0x3ff)+0xdc00);}return {type:"textord",mode:parser.mode,text:text};}});var color_htmlBuilder=function htmlBuilder(group,options){var elements=buildExpression(group.body,options.withColor(group.color),false);// \color isn't supposed to affect the type of the elements it contains.
  // To accomplish this, we wrap the results in a fragment, so the inner
  // elements will be able to directly interact with their neighbors. For
  // example, `\color{red}{2 +} 3` has the same spacing as `2 + 3`
  return buildCommon.makeFragment(elements);};var color_mathmlBuilder=function mathmlBuilder(group,options){var inner=buildMathML_buildExpression(group.body,options.withColor(group.color));var node=new mathMLTree.MathNode("mstyle",inner);node.setAttribute("mathcolor",group.color);return node;};defineFunction({type:"color",names:["\\textcolor"],props:{numArgs:2,allowedInText:true,argTypes:["color","original"]},handler:function handler(_ref,args){var parser=_ref.parser;var color=assertNodeType(args[0],"color-token").color;var body=args[1];return {type:"color",mode:parser.mode,color:color,body:ordargument(body)};},htmlBuilder:color_htmlBuilder,mathmlBuilder:color_mathmlBuilder});defineFunction({type:"color",names:["\\color"],props:{numArgs:1,allowedInText:true,argTypes:["color"]},handler:function handler(_ref2,args){var parser=_ref2.parser,breakOnTokenText=_ref2.breakOnTokenText;var color=assertNodeType(args[0],"color-token").color;// Set macro \current@color in current namespace to store the current
  // color, mimicking the behavior of color.sty.
  // This is currently used just to correctly color a \right
  // that follows a \color command.
  parser.gullet.macros.set("\\current@color",color);// Parse out the implicit body that should be colored.
  var body=parser.parseExpression(true,breakOnTokenText);return {type:"color",mode:parser.mode,color:color,body:body};},htmlBuilder:color_htmlBuilder,mathmlBuilder:color_mathmlBuilder});// Row breaks within tabular environments, and line breaks at top level
  // \DeclareRobustCommand\\{...\@xnewline}
  defineFunction({type:"cr",names:["\\\\"],props:{numArgs:0,numOptionalArgs:1,argTypes:["size"],allowedInText:true},handler:function handler(_ref,args,optArgs){var parser=_ref.parser;var size=optArgs[0];var newLine=!parser.settings.displayMode||!parser.settings.useStrictBehavior("newLineInDisplayMode","In LaTeX, \\\\ or \\newline "+"does nothing in display mode");return {type:"cr",mode:parser.mode,newLine:newLine,size:size&&assertNodeType(size,"size").value};},// The following builders are called only at the top level,
  // not within tabular/array environments.
  htmlBuilder:function htmlBuilder(group,options){var span=buildCommon.makeSpan(["mspace"],[],options);if(group.newLine){span.classes.push("newline");if(group.size){span.style.marginTop=calculateSize(group.size,options)+"em";}}return span;},mathmlBuilder:function mathmlBuilder(group,options){var node=new mathMLTree.MathNode("mspace");if(group.newLine){node.setAttribute("linebreak","newline");if(group.size){node.setAttribute("height",calculateSize(group.size,options)+"em");}}return node;}});var globalMap={"\\global":"\\global","\\long":"\\\\globallong","\\\\globallong":"\\\\globallong","\\def":"\\gdef","\\gdef":"\\gdef","\\edef":"\\xdef","\\xdef":"\\xdef","\\let":"\\\\globallet","\\futurelet":"\\\\globalfuture"};var checkControlSequence=function checkControlSequence(tok){var name=tok.text;if(/^(?:[\\{}$&#^_]|EOF)$/.test(name)){throw new src_ParseError("Expected a control sequence",tok);}return name;};var getRHS=function getRHS(parser){var tok=parser.gullet.popToken();if(tok.text==="="){// consume optional equals
  tok=parser.gullet.popToken();if(tok.text===" "){// consume one optional space
  tok=parser.gullet.popToken();}}return tok;};var letCommand=function letCommand(parser,name,tok,global){var macro=parser.gullet.macros.get(tok.text);if(macro==null){// don't expand it later even if a macro with the same name is defined
  // e.g., \let\foo=\frac \def\frac{\relax} \frac12
  tok.noexpand=true;macro={tokens:[tok],numArgs:0,// reproduce the same behavior in expansion
  unexpandable:!parser.gullet.isExpandable(tok.text)};}parser.gullet.macros.set(name,macro,global);};// <assignment> -> <non-macro assignment>|<macro assignment>
  // <non-macro assignment> -> <simple assignment>|\global<non-macro assignment>
  // <macro assignment> -> <definition>|<prefix><macro assignment>
  // <prefix> -> \global|\long|\outer
  defineFunction({type:"internal",names:["\\global","\\long","\\\\globallong"// can’t be entered directly
  ],props:{numArgs:0,allowedInText:true},handler:function handler(_ref){var parser=_ref.parser,funcName=_ref.funcName;parser.consumeSpaces();var token=parser.fetch();if(globalMap[token.text]){// KaTeX doesn't have \par, so ignore \long
  if(funcName==="\\global"||funcName==="\\\\globallong"){token.text=globalMap[token.text];}return assertNodeType(parser.parseFunction(),"internal");}throw new src_ParseError("Invalid token after macro prefix",token);}});// Basic support for macro definitions: \def, \gdef, \edef, \xdef
  // <definition> -> <def><control sequence><definition text>
  // <def> -> \def|\gdef|\edef|\xdef
  // <definition text> -> <parameter text><left brace><balanced text><right brace>
  defineFunction({type:"internal",names:["\\def","\\gdef","\\edef","\\xdef"],props:{numArgs:0,allowedInText:true,primitive:true},handler:function handler(_ref2){var parser=_ref2.parser,funcName=_ref2.funcName;var tok=parser.gullet.popToken();var name=tok.text;if(/^(?:[\\{}$&#^_]|EOF)$/.test(name)){throw new src_ParseError("Expected a control sequence",tok);}var numArgs=0;var insert;var delimiters=[[]];// <parameter text> contains no braces
  while(parser.gullet.future().text!=="{"){tok=parser.gullet.popToken();if(tok.text==="#"){// If the very last character of the <parameter text> is #, so that
  // this # is immediately followed by {, TeX will behave as if the {
  // had been inserted at the right end of both the parameter text
  // and the replacement text.
  if(parser.gullet.future().text==="{"){insert=parser.gullet.future();delimiters[numArgs].push("{");break;}// A parameter, the first appearance of # must be followed by 1,
  // the next by 2, and so on; up to nine #’s are allowed
  tok=parser.gullet.popToken();if(!/^[1-9]$/.test(tok.text)){throw new src_ParseError("Invalid argument number \""+tok.text+"\"");}if(parseInt(tok.text)!==numArgs+1){throw new src_ParseError("Argument number \""+tok.text+"\" out of order");}numArgs++;delimiters.push([]);}else if(tok.text==="EOF"){throw new src_ParseError("Expected a macro definition");}else{delimiters[numArgs].push(tok.text);}}// replacement text, enclosed in '{' and '}' and properly nested
  var _parser$gullet$consum=parser.gullet.consumeArg(),tokens=_parser$gullet$consum.tokens;if(insert){tokens.unshift(insert);}if(funcName==="\\edef"||funcName==="\\xdef"){tokens=parser.gullet.expandTokens(tokens);tokens.reverse();// to fit in with stack order
  }// Final arg is the expansion of the macro
  parser.gullet.macros.set(name,{tokens:tokens,numArgs:numArgs,delimiters:delimiters},funcName===globalMap[funcName]);return {type:"internal",mode:parser.mode};}});// <simple assignment> -> <let assignment>
  // <let assignment> -> \futurelet<control sequence><token><token>
  //     | \let<control sequence><equals><one optional space><token>
  // <equals> -> <optional spaces>|<optional spaces>=
  defineFunction({type:"internal",names:["\\let","\\\\globallet"// can’t be entered directly
  ],props:{numArgs:0,allowedInText:true,primitive:true},handler:function handler(_ref3){var parser=_ref3.parser,funcName=_ref3.funcName;var name=checkControlSequence(parser.gullet.popToken());parser.gullet.consumeSpaces();var tok=getRHS(parser);letCommand(parser,name,tok,funcName==="\\\\globallet");return {type:"internal",mode:parser.mode};}});// ref: https://www.tug.org/TUGboat/tb09-3/tb22bechtolsheim.pdf
  defineFunction({type:"internal",names:["\\futurelet","\\\\globalfuture"// can’t be entered directly
  ],props:{numArgs:0,allowedInText:true,primitive:true},handler:function handler(_ref4){var parser=_ref4.parser,funcName=_ref4.funcName;var name=checkControlSequence(parser.gullet.popToken());var middle=parser.gullet.popToken();var tok=parser.gullet.popToken();letCommand(parser,name,tok,funcName==="\\\\globalfuture");parser.gullet.pushToken(tok);parser.gullet.pushToken(middle);return {type:"internal",mode:parser.mode};}});/**
       * This file deals with creating delimiters of various sizes. The TeXbook
       * discusses these routines on page 441-442, in the "Another subroutine sets box
       * x to a specified variable delimiter" paragraph.
       *
       * There are three main routines here. `makeSmallDelim` makes a delimiter in the
       * normal font, but in either text, script, or scriptscript style.
       * `makeLargeDelim` makes a delimiter in textstyle, but in one of the Size1,
       * Size2, Size3, or Size4 fonts. `makeStackedDelim` makes a delimiter out of
       * smaller pieces that are stacked on top of one another.
       *
       * The functions take a parameter `center`, which determines if the delimiter
       * should be centered around the axis.
       *
       * Then, there are three exposed functions. `sizedDelim` makes a delimiter in
       * one of the given sizes. This is used for things like `\bigl`.
       * `customSizedDelim` makes a delimiter with a given total height+depth. It is
       * called in places like `\sqrt`. `leftRightDelim` makes an appropriate
       * delimiter which surrounds an expression of a given height an depth. It is
       * used in `\left` and `\right`.
       */ /**
       * Get the metrics for a given symbol and font, after transformation (i.e.
       * after following replacement from symbols.js)
       */var getMetrics=function getMetrics(symbol,font,mode){var replace=src_symbols.math[symbol]&&src_symbols.math[symbol].replace;var metrics=getCharacterMetrics(replace||symbol,font,mode);if(!metrics){throw new Error("Unsupported symbol "+symbol+" and font size "+font+".");}return metrics;};/**
       * Puts a delimiter span in a given style, and adds appropriate height, depth,
       * and maxFontSizes.
       */var styleWrap=function styleWrap(delim,toStyle,options,classes){var newOptions=options.havingBaseStyle(toStyle);var span=buildCommon.makeSpan(classes.concat(newOptions.sizingClasses(options)),[delim],options);var delimSizeMultiplier=newOptions.sizeMultiplier/options.sizeMultiplier;span.height*=delimSizeMultiplier;span.depth*=delimSizeMultiplier;span.maxFontSize=newOptions.sizeMultiplier;return span;};var centerSpan=function centerSpan(span,options,style){var newOptions=options.havingBaseStyle(style);var shift=(1-options.sizeMultiplier/newOptions.sizeMultiplier)*options.fontMetrics().axisHeight;span.classes.push("delimcenter");span.style.top=shift+"em";span.height-=shift;span.depth+=shift;};/**
       * Makes a small delimiter. This is a delimiter that comes in the Main-Regular
       * font, but is restyled to either be in textstyle, scriptstyle, or
       * scriptscriptstyle.
       */var makeSmallDelim=function makeSmallDelim(delim,style,center,options,mode,classes){var text=buildCommon.makeSymbol(delim,"Main-Regular",mode,options);var span=styleWrap(text,style,options,classes);if(center){centerSpan(span,options,style);}return span;};/**
       * Builds a symbol in the given font size (note size is an integer)
       */var mathrmSize=function mathrmSize(value,size,mode,options){return buildCommon.makeSymbol(value,"Size"+size+"-Regular",mode,options);};/**
       * Makes a large delimiter. This is a delimiter that comes in the Size1, Size2,
       * Size3, or Size4 fonts. It is always rendered in textstyle.
       */var makeLargeDelim=function makeLargeDelim(delim,size,center,options,mode,classes){var inner=mathrmSize(delim,size,mode,options);var span=styleWrap(buildCommon.makeSpan(["delimsizing","size"+size],[inner],options),src_Style.TEXT,options,classes);if(center){centerSpan(span,options,src_Style.TEXT);}return span;};/**
       * Make a span from a font glyph with the given offset and in the given font.
       * This is used in makeStackedDelim to make the stacking pieces for the delimiter.
       */var makeGlyphSpan=function makeGlyphSpan(symbol,font,mode){var sizeClass;// Apply the correct CSS class to choose the right font.
  if(font==="Size1-Regular"){sizeClass="delim-size1";}else/* if (font === "Size4-Regular") */{sizeClass="delim-size4";}var corner=buildCommon.makeSpan(["delimsizinginner",sizeClass],[buildCommon.makeSpan([],[buildCommon.makeSymbol(symbol,font,mode)])]);// Since this will be passed into `makeVList` in the end, wrap the element
  // in the appropriate tag that VList uses.
  return {type:"elem",elem:corner};};var makeInner=function makeInner(ch,height,options){// Create a span with inline SVG for the inner part of a tall stacked delimiter.
  var width=fontMetricsData["Size4-Regular"][ch.charCodeAt(0)]?fontMetricsData["Size4-Regular"][ch.charCodeAt(0)][4].toFixed(3):fontMetricsData["Size1-Regular"][ch.charCodeAt(0)][4].toFixed(3);var path=new PathNode("inner",innerPath(ch,Math.round(1000*height)));var svgNode=new SvgNode([path],{"width":width+"em","height":height+"em",// Override CSS rule `.katex svg { width: 100% }`
  "style":"width:"+width+"em","viewBox":"0 0 "+1000*width+" "+Math.round(1000*height),"preserveAspectRatio":"xMinYMin"});var span=buildCommon.makeSvgSpan([],[svgNode],options);span.height=height;span.style.height=height+"em";span.style.width=width+"em";return {type:"elem",elem:span};};// Helpers for makeStackedDelim
  var lapInEms=0.008;var lap={type:"kern",size:-1*lapInEms};var verts=["|","\\lvert","\\rvert","\\vert"];var doubleVerts=["\\|","\\lVert","\\rVert","\\Vert"];/**
       * Make a stacked delimiter out of a given delimiter, with the total height at
       * least `heightTotal`. This routine is mentioned on page 442 of the TeXbook.
       */var makeStackedDelim=function makeStackedDelim(delim,heightTotal,center,options,mode,classes){// There are four parts, the top, an optional middle, a repeated part, and a
  // bottom.
  var top;var middle;var repeat;var bottom;top=repeat=bottom=delim;middle=null;// Also keep track of what font the delimiters are in
  var font="Size1-Regular";// We set the parts and font based on the symbol. Note that we use
  // '\u23d0' instead of '|' and '\u2016' instead of '\\|' for the
  // repeats of the arrows
  if(delim==="\\uparrow"){repeat=bottom="\u23D0";}else if(delim==="\\Uparrow"){repeat=bottom="\u2016";}else if(delim==="\\downarrow"){top=repeat="\u23D0";}else if(delim==="\\Downarrow"){top=repeat="\u2016";}else if(delim==="\\updownarrow"){top="\\uparrow";repeat="\u23D0";bottom="\\downarrow";}else if(delim==="\\Updownarrow"){top="\\Uparrow";repeat="\u2016";bottom="\\Downarrow";}else if(utils.contains(verts,delim)){repeat="\u2223";}else if(utils.contains(doubleVerts,delim)){repeat="\u2225";}else if(delim==="["||delim==="\\lbrack"){top="\u23A1";repeat="\u23A2";bottom="\u23A3";font="Size4-Regular";}else if(delim==="]"||delim==="\\rbrack"){top="\u23A4";repeat="\u23A5";bottom="\u23A6";font="Size4-Regular";}else if(delim==="\\lfloor"||delim==="\u230A"){repeat=top="\u23A2";bottom="\u23A3";font="Size4-Regular";}else if(delim==="\\lceil"||delim==="\u2308"){top="\u23A1";repeat=bottom="\u23A2";font="Size4-Regular";}else if(delim==="\\rfloor"||delim==="\u230B"){repeat=top="\u23A5";bottom="\u23A6";font="Size4-Regular";}else if(delim==="\\rceil"||delim==="\u2309"){top="\u23A4";repeat=bottom="\u23A5";font="Size4-Regular";}else if(delim==="("||delim==="\\lparen"){top="\u239B";repeat="\u239C";bottom="\u239D";font="Size4-Regular";}else if(delim===")"||delim==="\\rparen"){top="\u239E";repeat="\u239F";bottom="\u23A0";font="Size4-Regular";}else if(delim==="\\{"||delim==="\\lbrace"){top="\u23A7";middle="\u23A8";bottom="\u23A9";repeat="\u23AA";font="Size4-Regular";}else if(delim==="\\}"||delim==="\\rbrace"){top="\u23AB";middle="\u23AC";bottom="\u23AD";repeat="\u23AA";font="Size4-Regular";}else if(delim==="\\lgroup"||delim==="\u27EE"){top="\u23A7";bottom="\u23A9";repeat="\u23AA";font="Size4-Regular";}else if(delim==="\\rgroup"||delim==="\u27EF"){top="\u23AB";bottom="\u23AD";repeat="\u23AA";font="Size4-Regular";}else if(delim==="\\lmoustache"||delim==="\u23B0"){top="\u23A7";bottom="\u23AD";repeat="\u23AA";font="Size4-Regular";}else if(delim==="\\rmoustache"||delim==="\u23B1"){top="\u23AB";bottom="\u23A9";repeat="\u23AA";font="Size4-Regular";}// Get the metrics of the four sections
  var topMetrics=getMetrics(top,font,mode);var topHeightTotal=topMetrics.height+topMetrics.depth;var repeatMetrics=getMetrics(repeat,font,mode);var repeatHeightTotal=repeatMetrics.height+repeatMetrics.depth;var bottomMetrics=getMetrics(bottom,font,mode);var bottomHeightTotal=bottomMetrics.height+bottomMetrics.depth;var middleHeightTotal=0;var middleFactor=1;if(middle!==null){var middleMetrics=getMetrics(middle,font,mode);middleHeightTotal=middleMetrics.height+middleMetrics.depth;middleFactor=2;// repeat symmetrically above and below middle
  }// Calcuate the minimal height that the delimiter can have.
  // It is at least the size of the top, bottom, and optional middle combined.
  var minHeight=topHeightTotal+bottomHeightTotal+middleHeightTotal;// Compute the number of copies of the repeat symbol we will need
  var repeatCount=Math.max(0,Math.ceil((heightTotal-minHeight)/(middleFactor*repeatHeightTotal)));// Compute the total height of the delimiter including all the symbols
  var realHeightTotal=minHeight+repeatCount*middleFactor*repeatHeightTotal;// The center of the delimiter is placed at the center of the axis. Note
  // that in this context, "center" means that the delimiter should be
  // centered around the axis in the current style, while normally it is
  // centered around the axis in textstyle.
  var axisHeight=options.fontMetrics().axisHeight;if(center){axisHeight*=options.sizeMultiplier;}// Calculate the depth
  var depth=realHeightTotal/2-axisHeight;// Now, we start building the pieces that will go into the vlist
  // Keep a list of the pieces of the stacked delimiter
  var stack=[];// Add the bottom symbol
  stack.push(makeGlyphSpan(bottom,font,mode));stack.push(lap);// overlap
  if(middle===null){// The middle section will be an SVG. Make it an extra 0.016em tall.
  // We'll overlap by 0.008em at top and bottom.
  var innerHeight=realHeightTotal-topHeightTotal-bottomHeightTotal+2*lapInEms;stack.push(makeInner(repeat,innerHeight,options));}else{// When there is a middle bit, we need the middle part and two repeated
  // sections
  var _innerHeight=(realHeightTotal-topHeightTotal-bottomHeightTotal-middleHeightTotal)/2+2*lapInEms;stack.push(makeInner(repeat,_innerHeight,options));// Now insert the middle of the brace.
  stack.push(lap);stack.push(makeGlyphSpan(middle,font,mode));stack.push(lap);stack.push(makeInner(repeat,_innerHeight,options));}// Add the top symbol
  stack.push(lap);stack.push(makeGlyphSpan(top,font,mode));// Finally, build the vlist
  var newOptions=options.havingBaseStyle(src_Style.TEXT);var inner=buildCommon.makeVList({positionType:"bottom",positionData:depth,children:stack},newOptions);return styleWrap(buildCommon.makeSpan(["delimsizing","mult"],[inner],newOptions),src_Style.TEXT,options,classes);};// All surds have 0.08em padding above the viniculum inside the SVG.
  // That keeps browser span height rounding error from pinching the line.
  var vbPad=80;// padding above the surd, measured inside the viewBox.
  var emPad=0.08;// padding, in ems, measured in the document.
  var sqrtSvg=function sqrtSvg(sqrtName,height,viewBoxHeight,extraViniculum,options){var path=sqrtPath(sqrtName,extraViniculum,viewBoxHeight);var pathNode=new PathNode(sqrtName,path);var svg=new SvgNode([pathNode],{// Note: 1000:1 ratio of viewBox to document em width.
  "width":"400em","height":height+"em","viewBox":"0 0 400000 "+viewBoxHeight,"preserveAspectRatio":"xMinYMin slice"});return buildCommon.makeSvgSpan(["hide-tail"],[svg],options);};/**
       * Make a sqrt image of the given height,
       */var makeSqrtImage=function makeSqrtImage(height,options){// Define a newOptions that removes the effect of size changes such as \Huge.
  // We don't pick different a height surd for \Huge. For it, we scale up.
  var newOptions=options.havingBaseSizing();// Pick the desired surd glyph from a sequence of surds.
  var delim=traverseSequence("\\surd",height*newOptions.sizeMultiplier,stackLargeDelimiterSequence,newOptions);var sizeMultiplier=newOptions.sizeMultiplier;// default
  // The standard sqrt SVGs each have a 0.04em thick viniculum.
  // If Settings.minRuleThickness is larger than that, we add extraViniculum.
  var extraViniculum=Math.max(0,options.minRuleThickness-options.fontMetrics().sqrtRuleThickness);// Create a span containing an SVG image of a sqrt symbol.
  var span;var spanHeight=0;var texHeight=0;var viewBoxHeight=0;var advanceWidth;// We create viewBoxes with 80 units of "padding" above each surd.
  // Then browser rounding error on the parent span height will not
  // encroach on the ink of the viniculum. But that padding is not
  // included in the TeX-like `height` used for calculation of
  // vertical alignment. So texHeight = span.height < span.style.height.
  if(delim.type==="small"){// Get an SVG that is derived from glyph U+221A in font KaTeX-Main.
  // 1000 unit normal glyph height.
  viewBoxHeight=1000+1000*extraViniculum+vbPad;if(height<1.0){sizeMultiplier=1.0;// mimic a \textfont radical
  }else if(height<1.4){sizeMultiplier=0.7;// mimic a \scriptfont radical
  }spanHeight=(1.0+extraViniculum+emPad)/sizeMultiplier;texHeight=(1.00+extraViniculum)/sizeMultiplier;span=sqrtSvg("sqrtMain",spanHeight,viewBoxHeight,extraViniculum,options);span.style.minWidth="0.853em";advanceWidth=0.833/sizeMultiplier;// from the font.
  }else if(delim.type==="large"){// These SVGs come from fonts: KaTeX_Size1, _Size2, etc.
  viewBoxHeight=(1000+vbPad)*sizeToMaxHeight[delim.size];texHeight=(sizeToMaxHeight[delim.size]+extraViniculum)/sizeMultiplier;spanHeight=(sizeToMaxHeight[delim.size]+extraViniculum+emPad)/sizeMultiplier;span=sqrtSvg("sqrtSize"+delim.size,spanHeight,viewBoxHeight,extraViniculum,options);span.style.minWidth="1.02em";advanceWidth=1.0/sizeMultiplier;// 1.0 from the font.
  }else{// Tall sqrt. In TeX, this would be stacked using multiple glyphs.
  // We'll use a single SVG to accomplish the same thing.
  spanHeight=height+extraViniculum+emPad;texHeight=height+extraViniculum;viewBoxHeight=Math.floor(1000*height+extraViniculum)+vbPad;span=sqrtSvg("sqrtTall",spanHeight,viewBoxHeight,extraViniculum,options);span.style.minWidth="0.742em";advanceWidth=1.056;}span.height=texHeight;span.style.height=spanHeight+"em";return {span:span,advanceWidth:advanceWidth,// Calculate the actual line width.
  // This actually should depend on the chosen font -- e.g. \boldmath
  // should use the thicker surd symbols from e.g. KaTeX_Main-Bold, and
  // have thicker rules.
  ruleWidth:(options.fontMetrics().sqrtRuleThickness+extraViniculum)*sizeMultiplier};};// There are three kinds of delimiters, delimiters that stack when they become
  // too large
  var stackLargeDelimiters=["(","\\lparen",")","\\rparen","[","\\lbrack","]","\\rbrack","\\{","\\lbrace","\\}","\\rbrace","\\lfloor","\\rfloor","\u230A","\u230B","\\lceil","\\rceil","\u2308","\u2309","\\surd"];// delimiters that always stack
  var stackAlwaysDelimiters=["\\uparrow","\\downarrow","\\updownarrow","\\Uparrow","\\Downarrow","\\Updownarrow","|","\\|","\\vert","\\Vert","\\lvert","\\rvert","\\lVert","\\rVert","\\lgroup","\\rgroup","\u27EE","\u27EF","\\lmoustache","\\rmoustache","\u23B0","\u23B1"];// and delimiters that never stack
  var stackNeverDelimiters=["<",">","\\langle","\\rangle","/","\\backslash","\\lt","\\gt"];// Metrics of the different sizes. Found by looking at TeX's output of
  // $\bigl| // \Bigl| \biggl| \Biggl| \showlists$
  // Used to create stacked delimiters of appropriate sizes in makeSizedDelim.
  var sizeToMaxHeight=[0,1.2,1.8,2.4,3.0];/**
       * Used to create a delimiter of a specific size, where `size` is 1, 2, 3, or 4.
       */var makeSizedDelim=function makeSizedDelim(delim,size,options,mode,classes){// < and > turn into \langle and \rangle in delimiters
  if(delim==="<"||delim==="\\lt"||delim==="\u27E8"){delim="\\langle";}else if(delim===">"||delim==="\\gt"||delim==="\u27E9"){delim="\\rangle";}// Sized delimiters are never centered.
  if(utils.contains(stackLargeDelimiters,delim)||utils.contains(stackNeverDelimiters,delim)){return makeLargeDelim(delim,size,false,options,mode,classes);}else if(utils.contains(stackAlwaysDelimiters,delim)){return makeStackedDelim(delim,sizeToMaxHeight[size],false,options,mode,classes);}else{throw new src_ParseError("Illegal delimiter: '"+delim+"'");}};/**
       * There are three different sequences of delimiter sizes that the delimiters
       * follow depending on the kind of delimiter. This is used when creating custom
       * sized delimiters to decide whether to create a small, large, or stacked
       * delimiter.
       *
       * In real TeX, these sequences aren't explicitly defined, but are instead
       * defined inside the font metrics. Since there are only three sequences that
       * are possible for the delimiters that TeX defines, it is easier to just encode
       * them explicitly here.
       */ // Delimiters that never stack try small delimiters and large delimiters only
  var stackNeverDelimiterSequence=[{type:"small",style:src_Style.SCRIPTSCRIPT},{type:"small",style:src_Style.SCRIPT},{type:"small",style:src_Style.TEXT},{type:"large",size:1},{type:"large",size:2},{type:"large",size:3},{type:"large",size:4}];// Delimiters that always stack try the small delimiters first, then stack
  var stackAlwaysDelimiterSequence=[{type:"small",style:src_Style.SCRIPTSCRIPT},{type:"small",style:src_Style.SCRIPT},{type:"small",style:src_Style.TEXT},{type:"stack"}];// Delimiters that stack when large try the small and then large delimiters, and
  // stack afterwards
  var stackLargeDelimiterSequence=[{type:"small",style:src_Style.SCRIPTSCRIPT},{type:"small",style:src_Style.SCRIPT},{type:"small",style:src_Style.TEXT},{type:"large",size:1},{type:"large",size:2},{type:"large",size:3},{type:"large",size:4},{type:"stack"}];/**
       * Get the font used in a delimiter based on what kind of delimiter it is.
       * TODO(#963) Use more specific font family return type once that is introduced.
       */var delimTypeToFont=function delimTypeToFont(type){if(type.type==="small"){return "Main-Regular";}else if(type.type==="large"){return "Size"+type.size+"-Regular";}else if(type.type==="stack"){return "Size4-Regular";}else{throw new Error("Add support for delim type '"+type.type+"' here.");}};/**
       * Traverse a sequence of types of delimiters to decide what kind of delimiter
       * should be used to create a delimiter of the given height+depth.
       */var traverseSequence=function traverseSequence(delim,height,sequence,options){// Here, we choose the index we should start at in the sequences. In smaller
  // sizes (which correspond to larger numbers in style.size) we start earlier
  // in the sequence. Thus, scriptscript starts at index 3-3=0, script starts
  // at index 3-2=1, text starts at 3-1=2, and display starts at min(2,3-0)=2
  var start=Math.min(2,3-options.style.size);for(var i=start;i<sequence.length;i++){if(sequence[i].type==="stack"){// This is always the last delimiter, so we just break the loop now.
  break;}var metrics=getMetrics(delim,delimTypeToFont(sequence[i]),"math");var heightDepth=metrics.height+metrics.depth;// Small delimiters are scaled down versions of the same font, so we
  // account for the style change size.
  if(sequence[i].type==="small"){var newOptions=options.havingBaseStyle(sequence[i].style);heightDepth*=newOptions.sizeMultiplier;}// Check if the delimiter at this size works for the given height.
  if(heightDepth>height){return sequence[i];}}// If we reached the end of the sequence, return the last sequence element.
  return sequence[sequence.length-1];};/**
       * Make a delimiter of a given height+depth, with optional centering. Here, we
       * traverse the sequences, and create a delimiter that the sequence tells us to.
       */var makeCustomSizedDelim=function makeCustomSizedDelim(delim,height,center,options,mode,classes){if(delim==="<"||delim==="\\lt"||delim==="\u27E8"){delim="\\langle";}else if(delim===">"||delim==="\\gt"||delim==="\u27E9"){delim="\\rangle";}// Decide what sequence to use
  var sequence;if(utils.contains(stackNeverDelimiters,delim)){sequence=stackNeverDelimiterSequence;}else if(utils.contains(stackLargeDelimiters,delim)){sequence=stackLargeDelimiterSequence;}else{sequence=stackAlwaysDelimiterSequence;}// Look through the sequence
  var delimType=traverseSequence(delim,height,sequence,options);// Get the delimiter from font glyphs.
  // Depending on the sequence element we decided on, call the
  // appropriate function.
  if(delimType.type==="small"){return makeSmallDelim(delim,delimType.style,center,options,mode,classes);}else if(delimType.type==="large"){return makeLargeDelim(delim,delimType.size,center,options,mode,classes);}else/* if (delimType.type === "stack") */{return makeStackedDelim(delim,height,center,options,mode,classes);}};/**
       * Make a delimiter for use with `\left` and `\right`, given a height and depth
       * of an expression that the delimiters surround.
       */var makeLeftRightDelim=function makeLeftRightDelim(delim,height,depth,options,mode,classes){// We always center \left/\right delimiters, so the axis is always shifted
  var axisHeight=options.fontMetrics().axisHeight*options.sizeMultiplier;// Taken from TeX source, tex.web, function make_left_right
  var delimiterFactor=901;var delimiterExtend=5.0/options.fontMetrics().ptPerEm;var maxDistFromAxis=Math.max(height-axisHeight,depth+axisHeight);var totalHeight=Math.max(// In real TeX, calculations are done using integral values which are
  // 65536 per pt, or 655360 per em. So, the division here truncates in
  // TeX but doesn't here, producing different results. If we wanted to
  // exactly match TeX's calculation, we could do
  //   Math.floor(655360 * maxDistFromAxis / 500) *
  //    delimiterFactor / 655360
  // (To see the difference, compare
  //    x^{x^{\left(\rule{0.1em}{0.68em}\right)}}
  // in TeX and KaTeX)
  maxDistFromAxis/500*delimiterFactor,2*maxDistFromAxis-delimiterExtend);// Finally, we defer to `makeCustomSizedDelim` with our calculated total
  // height
  return makeCustomSizedDelim(delim,totalHeight,true,options,mode,classes);};/* harmony default export */var delimiter={sqrtImage:makeSqrtImage,sizedDelim:makeSizedDelim,sizeToMaxHeight:sizeToMaxHeight,customSizedDelim:makeCustomSizedDelim,leftRightDelim:makeLeftRightDelim};// Extra data needed for the delimiter handler down below
  var delimiterSizes={"\\bigl":{mclass:"mopen",size:1},"\\Bigl":{mclass:"mopen",size:2},"\\biggl":{mclass:"mopen",size:3},"\\Biggl":{mclass:"mopen",size:4},"\\bigr":{mclass:"mclose",size:1},"\\Bigr":{mclass:"mclose",size:2},"\\biggr":{mclass:"mclose",size:3},"\\Biggr":{mclass:"mclose",size:4},"\\bigm":{mclass:"mrel",size:1},"\\Bigm":{mclass:"mrel",size:2},"\\biggm":{mclass:"mrel",size:3},"\\Biggm":{mclass:"mrel",size:4},"\\big":{mclass:"mord",size:1},"\\Big":{mclass:"mord",size:2},"\\bigg":{mclass:"mord",size:3},"\\Bigg":{mclass:"mord",size:4}};var delimiters=["(","\\lparen",")","\\rparen","[","\\lbrack","]","\\rbrack","\\{","\\lbrace","\\}","\\rbrace","\\lfloor","\\rfloor","\u230A","\u230B","\\lceil","\\rceil","\u2308","\u2309","<",">","\\langle","\u27E8","\\rangle","\u27E9","\\lt","\\gt","\\lvert","\\rvert","\\lVert","\\rVert","\\lgroup","\\rgroup","\u27EE","\u27EF","\\lmoustache","\\rmoustache","\u23B0","\u23B1","/","\\backslash","|","\\vert","\\|","\\Vert","\\uparrow","\\Uparrow","\\downarrow","\\Downarrow","\\updownarrow","\\Updownarrow","."];// Delimiter functions
  function checkDelimiter(delim,context){var symDelim=checkSymbolNodeType(delim);if(symDelim&&utils.contains(delimiters,symDelim.text)){return symDelim;}else if(symDelim){throw new src_ParseError("Invalid delimiter '"+symDelim.text+"' after '"+context.funcName+"'",delim);}else{throw new src_ParseError("Invalid delimiter type '"+delim.type+"'",delim);}}defineFunction({type:"delimsizing",names:["\\bigl","\\Bigl","\\biggl","\\Biggl","\\bigr","\\Bigr","\\biggr","\\Biggr","\\bigm","\\Bigm","\\biggm","\\Biggm","\\big","\\Big","\\bigg","\\Bigg"],props:{numArgs:1,argTypes:["primitive"]},handler:function handler(context,args){var delim=checkDelimiter(args[0],context);return {type:"delimsizing",mode:context.parser.mode,size:delimiterSizes[context.funcName].size,mclass:delimiterSizes[context.funcName].mclass,delim:delim.text};},htmlBuilder:function htmlBuilder(group,options){if(group.delim==="."){// Empty delimiters still count as elements, even though they don't
  // show anything.
  return buildCommon.makeSpan([group.mclass]);}// Use delimiter.sizedDelim to generate the delimiter.
  return delimiter.sizedDelim(group.delim,group.size,options,group.mode,[group.mclass]);},mathmlBuilder:function mathmlBuilder(group){var children=[];if(group.delim!=="."){children.push(makeText(group.delim,group.mode));}var node=new mathMLTree.MathNode("mo",children);if(group.mclass==="mopen"||group.mclass==="mclose"){// Only some of the delimsizing functions act as fences, and they
  // return "mopen" or "mclose" mclass.
  node.setAttribute("fence","true");}else{// Explicitly disable fencing if it's not a fence, to override the
  // defaults.
  node.setAttribute("fence","false");}node.setAttribute("stretchy","true");node.setAttribute("minsize",delimiter.sizeToMaxHeight[group.size]+"em");node.setAttribute("maxsize",delimiter.sizeToMaxHeight[group.size]+"em");return node;}});function assertParsed(group){if(!group.body){throw new Error("Bug: The leftright ParseNode wasn't fully parsed.");}}defineFunction({type:"leftright-right",names:["\\right"],props:{numArgs:1,primitive:true},handler:function handler(context,args){// \left case below triggers parsing of \right in
  //   `const right = parser.parseFunction();`
  // uses this return value.
  var color=context.parser.gullet.macros.get("\\current@color");if(color&&typeof color!=="string"){throw new src_ParseError("\\current@color set to non-string in \\right");}return {type:"leftright-right",mode:context.parser.mode,delim:checkDelimiter(args[0],context).text,color:color// undefined if not set via \color
  };}});defineFunction({type:"leftright",names:["\\left"],props:{numArgs:1,primitive:true},handler:function handler(context,args){var delim=checkDelimiter(args[0],context);var parser=context.parser;// Parse out the implicit body
  ++parser.leftrightDepth;// parseExpression stops before '\\right'
  var body=parser.parseExpression(false);--parser.leftrightDepth;// Check the next token
  parser.expect("\\right",false);var right=assertNodeType(parser.parseFunction(),"leftright-right");return {type:"leftright",mode:parser.mode,body:body,left:delim.text,right:right.delim,rightColor:right.color};},htmlBuilder:function htmlBuilder(group,options){assertParsed(group);// Build the inner expression
  var inner=buildExpression(group.body,options,true,["mopen","mclose"]);var innerHeight=0;var innerDepth=0;var hadMiddle=false;// Calculate its height and depth
  for(var i=0;i<inner.length;i++){// Property `isMiddle` not defined on `span`. See comment in
  // "middle"'s htmlBuilder.
  // $FlowFixMe
  if(inner[i].isMiddle){hadMiddle=true;}else{innerHeight=Math.max(inner[i].height,innerHeight);innerDepth=Math.max(inner[i].depth,innerDepth);}}// The size of delimiters is the same, regardless of what style we are
  // in. Thus, to correctly calculate the size of delimiter we need around
  // a group, we scale down the inner size based on the size.
  innerHeight*=options.sizeMultiplier;innerDepth*=options.sizeMultiplier;var leftDelim;if(group.left==="."){// Empty delimiters in \left and \right make null delimiter spaces.
  leftDelim=makeNullDelimiter(options,["mopen"]);}else{// Otherwise, use leftRightDelim to generate the correct sized
  // delimiter.
  leftDelim=delimiter.leftRightDelim(group.left,innerHeight,innerDepth,options,group.mode,["mopen"]);}// Add it to the beginning of the expression
  inner.unshift(leftDelim);// Handle middle delimiters
  if(hadMiddle){for(var _i=1;_i<inner.length;_i++){var middleDelim=inner[_i];// Property `isMiddle` not defined on `span`. See comment in
  // "middle"'s htmlBuilder.
  // $FlowFixMe
  var isMiddle=middleDelim.isMiddle;if(isMiddle){// Apply the options that were active when \middle was called
  inner[_i]=delimiter.leftRightDelim(isMiddle.delim,innerHeight,innerDepth,isMiddle.options,group.mode,[]);}}}var rightDelim;// Same for the right delimiter, but using color specified by \color
  if(group.right==="."){rightDelim=makeNullDelimiter(options,["mclose"]);}else{var colorOptions=group.rightColor?options.withColor(group.rightColor):options;rightDelim=delimiter.leftRightDelim(group.right,innerHeight,innerDepth,colorOptions,group.mode,["mclose"]);}// Add it to the end of the expression.
  inner.push(rightDelim);return buildCommon.makeSpan(["minner"],inner,options);},mathmlBuilder:function mathmlBuilder(group,options){assertParsed(group);var inner=buildMathML_buildExpression(group.body,options);if(group.left!=="."){var leftNode=new mathMLTree.MathNode("mo",[makeText(group.left,group.mode)]);leftNode.setAttribute("fence","true");inner.unshift(leftNode);}if(group.right!=="."){var rightNode=new mathMLTree.MathNode("mo",[makeText(group.right,group.mode)]);rightNode.setAttribute("fence","true");if(group.rightColor){rightNode.setAttribute("mathcolor",group.rightColor);}inner.push(rightNode);}return makeRow(inner);}});defineFunction({type:"middle",names:["\\middle"],props:{numArgs:1,primitive:true},handler:function handler(context,args){var delim=checkDelimiter(args[0],context);if(!context.parser.leftrightDepth){throw new src_ParseError("\\middle without preceding \\left",delim);}return {type:"middle",mode:context.parser.mode,delim:delim.text};},htmlBuilder:function htmlBuilder(group,options){var middleDelim;if(group.delim==="."){middleDelim=makeNullDelimiter(options,[]);}else{middleDelim=delimiter.sizedDelim(group.delim,1,options,group.mode,[]);var isMiddle={delim:group.delim,options:options};// Property `isMiddle` not defined on `span`. It is only used in
  // this file above.
  // TODO: Fix this violation of the `span` type and possibly rename
  // things since `isMiddle` sounds like a boolean, but is a struct.
  // $FlowFixMe
  middleDelim.isMiddle=isMiddle;}return middleDelim;},mathmlBuilder:function mathmlBuilder(group,options){// A Firefox \middle will strech a character vertically only if it
  // is in the fence part of the operator dictionary at:
  // https://www.w3.org/TR/MathML3/appendixc.html.
  // So we need to avoid U+2223 and use plain "|" instead.
  var textNode=group.delim==="\\vert"||group.delim==="|"?makeText("|","text"):makeText(group.delim,group.mode);var middleNode=new mathMLTree.MathNode("mo",[textNode]);middleNode.setAttribute("fence","true");// MathML gives 5/18em spacing to each <mo> element.
  // \middle should get delimiter spacing instead.
  middleNode.setAttribute("lspace","0.05em");middleNode.setAttribute("rspace","0.05em");return middleNode;}});var enclose_htmlBuilder=function htmlBuilder(group,options){// \cancel, \bcancel, \xcancel, \sout, \fbox, \colorbox, \fcolorbox, \phase
  // Some groups can return document fragments.  Handle those by wrapping
  // them in a span.
  var inner=buildCommon.wrapFragment(buildGroup(group.body,options),options);var label=group.label.substr(1);var scale=options.sizeMultiplier;var img;var imgShift=0;// In the LaTeX cancel package, line geometry is slightly different
  // depending on whether the subject is wider than it is tall, or vice versa.
  // We don't know the width of a group, so as a proxy, we test if
  // the subject is a single character. This captures most of the
  // subjects that should get the "tall" treatment.
  var isSingleChar=utils.isCharacterBox(group.body);if(label==="sout"){img=buildCommon.makeSpan(["stretchy","sout"]);img.height=options.fontMetrics().defaultRuleThickness/scale;imgShift=-0.5*options.fontMetrics().xHeight;}else if(label==="phase"){// Set a couple of dimensions from the steinmetz package.
  var lineWeight=calculateSize({number:0.6,unit:"pt"},options);var clearance=calculateSize({number:0.35,unit:"ex"},options);// Prevent size changes like \Huge from affecting line thickness
  var newOptions=options.havingBaseSizing();scale=scale/newOptions.sizeMultiplier;var angleHeight=inner.height+inner.depth+lineWeight+clearance;// Reserve a left pad for the angle.
  inner.style.paddingLeft=angleHeight/2+lineWeight+"em";// Create an SVG
  var viewBoxHeight=Math.floor(1000*angleHeight*scale);var path=phasePath(viewBoxHeight);var svgNode=new SvgNode([new PathNode("phase",path)],{"width":"400em","height":viewBoxHeight/1000+"em","viewBox":"0 0 400000 "+viewBoxHeight,"preserveAspectRatio":"xMinYMin slice"});// Wrap it in a span with overflow: hidden.
  img=buildCommon.makeSvgSpan(["hide-tail"],[svgNode],options);img.style.height=angleHeight+"em";imgShift=inner.depth+lineWeight+clearance;}else{// Add horizontal padding
  if(/cancel/.test(label)){if(!isSingleChar){inner.classes.push("cancel-pad");}}else if(label==="angl"){inner.classes.push("anglpad");}else{inner.classes.push("boxpad");}// Add vertical padding
  var topPad=0;var bottomPad=0;var ruleThickness=0;// ref: cancel package: \advance\totalheight2\p@ % "+2"
  if(/box/.test(label)){ruleThickness=Math.max(options.fontMetrics().fboxrule,// default
  options.minRuleThickness// User override.
  );topPad=options.fontMetrics().fboxsep+(label==="colorbox"?0:ruleThickness);bottomPad=topPad;}else if(label==="angl"){ruleThickness=Math.max(options.fontMetrics().defaultRuleThickness,options.minRuleThickness);topPad=4*ruleThickness;// gap = 3 × line, plus the line itself.
  bottomPad=Math.max(0,0.25-inner.depth);}else{topPad=isSingleChar?0.2:0;bottomPad=topPad;}img=stretchy.encloseSpan(inner,label,topPad,bottomPad,options);if(/fbox|boxed|fcolorbox/.test(label)){img.style.borderStyle="solid";img.style.borderWidth=ruleThickness+"em";}else if(label==="angl"&&ruleThickness!==0.049){img.style.borderTopWidth=ruleThickness+"em";img.style.borderRightWidth=ruleThickness+"em";}imgShift=inner.depth+bottomPad;if(group.backgroundColor){img.style.backgroundColor=group.backgroundColor;if(group.borderColor){img.style.borderColor=group.borderColor;}}}var vlist;if(group.backgroundColor){vlist=buildCommon.makeVList({positionType:"individualShift",children:[// Put the color background behind inner;
  {type:"elem",elem:img,shift:imgShift},{type:"elem",elem:inner,shift:0}]},options);}else{var classes=/cancel|phase/.test(label)?["svg-align"]:[];vlist=buildCommon.makeVList({positionType:"individualShift",children:[// Write the \cancel stroke on top of inner.
  {type:"elem",elem:inner,shift:0},{type:"elem",elem:img,shift:imgShift,wrapperClasses:classes}]},options);}if(/cancel/.test(label)){// The cancel package documentation says that cancel lines add their height
  // to the expression, but tests show that isn't how it actually works.
  vlist.height=inner.height;vlist.depth=inner.depth;}if(/cancel/.test(label)&&!isSingleChar){// cancel does not create horiz space for its line extension.
  return buildCommon.makeSpan(["mord","cancel-lap"],[vlist],options);}else{return buildCommon.makeSpan(["mord"],[vlist],options);}};var enclose_mathmlBuilder=function mathmlBuilder(group,options){var fboxsep=0;var node=new mathMLTree.MathNode(group.label.indexOf("colorbox")>-1?"mpadded":"menclose",[buildMathML_buildGroup(group.body,options)]);switch(group.label){case"\\cancel":node.setAttribute("notation","updiagonalstrike");break;case"\\bcancel":node.setAttribute("notation","downdiagonalstrike");break;case"\\phase":node.setAttribute("notation","phasorangle");break;case"\\sout":node.setAttribute("notation","horizontalstrike");break;case"\\fbox":node.setAttribute("notation","box");break;case"\\angl":node.setAttribute("notation","actuarial");break;case"\\fcolorbox":case"\\colorbox":// <menclose> doesn't have a good notation option. So use <mpadded>
  // instead. Set some attributes that come included with <menclose>.
  fboxsep=options.fontMetrics().fboxsep*options.fontMetrics().ptPerEm;node.setAttribute("width","+"+2*fboxsep+"pt");node.setAttribute("height","+"+2*fboxsep+"pt");node.setAttribute("lspace",fboxsep+"pt");//
  node.setAttribute("voffset",fboxsep+"pt");if(group.label==="\\fcolorbox"){var thk=Math.max(options.fontMetrics().fboxrule,// default
  options.minRuleThickness// user override
  );node.setAttribute("style","border: "+thk+"em solid "+String(group.borderColor));}break;case"\\xcancel":node.setAttribute("notation","updiagonalstrike downdiagonalstrike");break;}if(group.backgroundColor){node.setAttribute("mathbackground",group.backgroundColor);}return node;};defineFunction({type:"enclose",names:["\\colorbox"],props:{numArgs:2,allowedInText:true,argTypes:["color","text"]},handler:function handler(_ref,args,optArgs){var parser=_ref.parser,funcName=_ref.funcName;var color=assertNodeType(args[0],"color-token").color;var body=args[1];return {type:"enclose",mode:parser.mode,label:funcName,backgroundColor:color,body:body};},htmlBuilder:enclose_htmlBuilder,mathmlBuilder:enclose_mathmlBuilder});defineFunction({type:"enclose",names:["\\fcolorbox"],props:{numArgs:3,allowedInText:true,argTypes:["color","color","text"]},handler:function handler(_ref2,args,optArgs){var parser=_ref2.parser,funcName=_ref2.funcName;var borderColor=assertNodeType(args[0],"color-token").color;var backgroundColor=assertNodeType(args[1],"color-token").color;var body=args[2];return {type:"enclose",mode:parser.mode,label:funcName,backgroundColor:backgroundColor,borderColor:borderColor,body:body};},htmlBuilder:enclose_htmlBuilder,mathmlBuilder:enclose_mathmlBuilder});defineFunction({type:"enclose",names:["\\fbox"],props:{numArgs:1,argTypes:["hbox"],allowedInText:true},handler:function handler(_ref3,args){var parser=_ref3.parser;return {type:"enclose",mode:parser.mode,label:"\\fbox",body:args[0]};}});defineFunction({type:"enclose",names:["\\cancel","\\bcancel","\\xcancel","\\sout","\\phase"],props:{numArgs:1},handler:function handler(_ref4,args){var parser=_ref4.parser,funcName=_ref4.funcName;var body=args[0];return {type:"enclose",mode:parser.mode,label:funcName,body:body};},htmlBuilder:enclose_htmlBuilder,mathmlBuilder:enclose_mathmlBuilder});defineFunction({type:"enclose",names:["\\angl"],props:{numArgs:1,argTypes:["hbox"],allowedInText:false},handler:function handler(_ref5,args){var parser=_ref5.parser;return {type:"enclose",mode:parser.mode,label:"\\angl",body:args[0]};}});/**
       * All registered environments.
       * `environments.js` exports this same dictionary again and makes it public.
       * `Parser.js` requires this dictionary via `environments.js`.
       */var _environments={};function defineEnvironment(_ref){var type=_ref.type,names=_ref.names,props=_ref.props,handler=_ref.handler,htmlBuilder=_ref.htmlBuilder,mathmlBuilder=_ref.mathmlBuilder;// Set default values of environments.
  var data={type:type,numArgs:props.numArgs||0,allowedInText:false,numOptionalArgs:0,handler:handler};for(var i=0;i<names.length;++i){// TODO: The value type of _environments should be a type union of all
  // possible `EnvSpec<>` possibilities instead of `EnvSpec<*>`, which is
  // an existential type.
  _environments[names[i]]=data;}if(htmlBuilder){_htmlGroupBuilders[type]=htmlBuilder;}if(mathmlBuilder){_mathmlGroupBuilders[type]=mathmlBuilder;}}// Helper functions
  function getHLines(parser){// Return an array. The array length = number of hlines.
  // Each element in the array tells if the line is dashed.
  var hlineInfo=[];parser.consumeSpaces();var nxt=parser.fetch().text;while(nxt==="\\hline"||nxt==="\\hdashline"){parser.consume();hlineInfo.push(nxt==="\\hdashline");parser.consumeSpaces();nxt=parser.fetch().text;}return hlineInfo;}var validateAmsEnvironmentContext=function validateAmsEnvironmentContext(context){var settings=context.parser.settings;if(!settings.displayMode){throw new src_ParseError("{"+context.envName+"} can be used only in"+" display mode.");}};/**
       * Parse the body of the environment, with rows delimited by \\ and
       * columns delimited by &, and create a nested list in row-major order
       * with one group per cell.  If given an optional argument style
       * ("text", "display", etc.), then each cell is cast into that style.
       */function parseArray(parser,_ref,style){var hskipBeforeAndAfter=_ref.hskipBeforeAndAfter,addJot=_ref.addJot,cols=_ref.cols,arraystretch=_ref.arraystretch,colSeparationType=_ref.colSeparationType,addEqnNum=_ref.addEqnNum,singleRow=_ref.singleRow,emptySingleRow=_ref.emptySingleRow,maxNumCols=_ref.maxNumCols,leqno=_ref.leqno;parser.gullet.beginGroup();if(!singleRow){// \cr is equivalent to \\ without the optional size argument (see below)
  // TODO: provide helpful error when \cr is used outside array environment
  parser.gullet.macros.set("\\cr","\\\\\\relax");}// Get current arraystretch if it's not set by the environment
  if(!arraystretch){var stretch=parser.gullet.expandMacroAsText("\\arraystretch");if(stretch==null){// Default \arraystretch from lttab.dtx
  arraystretch=1;}else{arraystretch=parseFloat(stretch);if(!arraystretch||arraystretch<0){throw new src_ParseError("Invalid \\arraystretch: "+stretch);}}}// Start group for first cell
  parser.gullet.beginGroup();var row=[];var body=[row];var rowGaps=[];var hLinesBeforeRow=[];// Test for \hline at the top of the array.
  hLinesBeforeRow.push(getHLines(parser));while(true){// eslint-disable-line no-constant-condition
  // Parse each cell in its own group (namespace)
  var cell=parser.parseExpression(false,singleRow?"\\end":"\\\\");parser.gullet.endGroup();parser.gullet.beginGroup();cell={type:"ordgroup",mode:parser.mode,body:cell};if(style){cell={type:"styling",mode:parser.mode,style:style,body:[cell]};}row.push(cell);var next=parser.fetch().text;if(next==="&"){if(maxNumCols&&row.length===maxNumCols){if(singleRow||colSeparationType){// {equation} or {split}
  throw new src_ParseError("Too many tab characters: &",parser.nextToken);}else{// {array} environment
  parser.settings.reportNonstrict("textEnv","Too few columns "+"specified in the {array} column argument.");}}parser.consume();}else if(next==="\\end"){// Arrays terminate newlines with `\crcr` which consumes a `\cr` if
  // the last line is empty.  However, AMS environments keep the
  // empty row if it's the only one.
  // NOTE: Currently, `cell` is the last item added into `row`.
  if(row.length===1&&cell.type==="styling"&&cell.body[0].body.length===0&&(body.length>1||!emptySingleRow)){body.pop();}if(hLinesBeforeRow.length<body.length+1){hLinesBeforeRow.push([]);}break;}else if(next==="\\\\"){parser.consume();var size=void 0;// \def\Let@{\let\\\math@cr}
  // \def\math@cr{...\math@cr@}
  // \def\math@cr@{\new@ifnextchar[\math@cr@@{\math@cr@@[\z@]}}
  // \def\math@cr@@[#1]{...\math@cr@@@...}
  // \def\math@cr@@@{\cr}
  if(parser.gullet.future().text!==" "){size=parser.parseSizeGroup(true);}rowGaps.push(size?size.value:null);// check for \hline(s) following the row separator
  hLinesBeforeRow.push(getHLines(parser));row=[];body.push(row);}else{throw new src_ParseError("Expected & or \\\\ or \\cr or \\end",parser.nextToken);}}// End cell group
  parser.gullet.endGroup();// End array group defining \cr
  parser.gullet.endGroup();return {type:"array",mode:parser.mode,addJot:addJot,arraystretch:arraystretch,body:body,cols:cols,rowGaps:rowGaps,hskipBeforeAndAfter:hskipBeforeAndAfter,hLinesBeforeRow:hLinesBeforeRow,colSeparationType:colSeparationType,addEqnNum:addEqnNum,leqno:leqno};}// Decides on a style for cells in an array according to whether the given
  // environment name starts with the letter 'd'.
  function dCellStyle(envName){if(envName.substr(0,1)==="d"){return "display";}else{return "text";}}var array_htmlBuilder=function htmlBuilder(group,options){var r;var c;var nr=group.body.length;var hLinesBeforeRow=group.hLinesBeforeRow;var nc=0;var body=new Array(nr);var hlines=[];var ruleThickness=Math.max(options.fontMetrics().arrayRuleWidth,options.minRuleThickness// User override.
  );// Horizontal spacing
  var pt=1/options.fontMetrics().ptPerEm;var arraycolsep=5*pt;// default value, i.e. \arraycolsep in article.cls
  if(group.colSeparationType&&group.colSeparationType==="small"){// We're in a {smallmatrix}. Default column space is \thickspace,
  // i.e. 5/18em = 0.2778em, per amsmath.dtx for {smallmatrix}.
  // But that needs adjustment because LaTeX applies \scriptstyle to the
  // entire array, including the colspace, but this function applies
  // \scriptstyle only inside each element.
  var localMultiplier=options.havingStyle(src_Style.SCRIPT).sizeMultiplier;arraycolsep=0.2778*(localMultiplier/options.sizeMultiplier);}// Vertical spacing
  var baselineskip=group.colSeparationType==="CD"?calculateSize({number:3,unit:"ex"},options):12*pt;// see size10.clo
  // Default \jot from ltmath.dtx
  // TODO(edemaine): allow overriding \jot via \setlength (#687)
  var jot=3*pt;var arrayskip=group.arraystretch*baselineskip;var arstrutHeight=0.7*arrayskip;// \strutbox in ltfsstrc.dtx and
  var arstrutDepth=0.3*arrayskip;// \@arstrutbox in lttab.dtx
  var totalHeight=0;// Set a position for \hline(s) at the top of the array, if any.
  function setHLinePos(hlinesInGap){for(var i=0;i<hlinesInGap.length;++i){if(i>0){totalHeight+=0.25;}hlines.push({pos:totalHeight,isDashed:hlinesInGap[i]});}}setHLinePos(hLinesBeforeRow[0]);for(r=0;r<group.body.length;++r){var inrow=group.body[r];var height=arstrutHeight;// \@array adds an \@arstrut
  var depth=arstrutDepth;// to each tow (via the template)
  if(nc<inrow.length){nc=inrow.length;}var outrow=new Array(inrow.length);for(c=0;c<inrow.length;++c){var elt=buildGroup(inrow[c],options);if(depth<elt.depth){depth=elt.depth;}if(height<elt.height){height=elt.height;}outrow[c]=elt;}var rowGap=group.rowGaps[r];var gap=0;if(rowGap){gap=calculateSize(rowGap,options);if(gap>0){// \@argarraycr
  gap+=arstrutDepth;if(depth<gap){depth=gap;// \@xargarraycr
  }gap=0;}}// In AMS multiline environments such as aligned and gathered, rows
  // correspond to lines that have additional \jot added to the
  // \baselineskip via \openup.
  if(group.addJot){depth+=jot;}outrow.height=height;outrow.depth=depth;totalHeight+=height;outrow.pos=totalHeight;totalHeight+=depth+gap;// \@yargarraycr
  body[r]=outrow;// Set a position for \hline(s), if any.
  setHLinePos(hLinesBeforeRow[r+1]);}var offset=totalHeight/2+options.fontMetrics().axisHeight;var colDescriptions=group.cols||[];var cols=[];var colSep;var colDescrNum;var eqnNumSpans=[];if(group.addEqnNum){// An environment with automatic equation numbers.
  // Create node(s) that will trigger CSS counter increment.
  for(r=0;r<nr;++r){var rw=body[r];var shift=rw.pos-offset;var eqnTag=buildCommon.makeSpan(["eqn-num"],[],options);eqnTag.depth=rw.depth;eqnTag.height=rw.height;eqnNumSpans.push({type:"elem",elem:eqnTag,shift:shift});}}for(c=0,colDescrNum=0;// Continue while either there are more columns or more column
  // descriptions, so trailing separators don't get lost.
  c<nc||colDescrNum<colDescriptions.length;++c,++colDescrNum){var colDescr=colDescriptions[colDescrNum]||{};var firstSeparator=true;while(colDescr.type==="separator"){// If there is more than one separator in a row, add a space
  // between them.
  if(!firstSeparator){colSep=buildCommon.makeSpan(["arraycolsep"],[]);colSep.style.width=options.fontMetrics().doubleRuleSep+"em";cols.push(colSep);}if(colDescr.separator==="|"||colDescr.separator===":"){var lineType=colDescr.separator==="|"?"solid":"dashed";var separator=buildCommon.makeSpan(["vertical-separator"],[],options);separator.style.height=totalHeight+"em";separator.style.borderRightWidth=ruleThickness+"em";separator.style.borderRightStyle=lineType;separator.style.margin="0 -"+ruleThickness/2+"em";separator.style.verticalAlign=-(totalHeight-offset)+"em";cols.push(separator);}else{throw new src_ParseError("Invalid separator type: "+colDescr.separator);}colDescrNum++;colDescr=colDescriptions[colDescrNum]||{};firstSeparator=false;}if(c>=nc){continue;}var sepwidth=void 0;if(c>0||group.hskipBeforeAndAfter){sepwidth=utils.deflt(colDescr.pregap,arraycolsep);if(sepwidth!==0){colSep=buildCommon.makeSpan(["arraycolsep"],[]);colSep.style.width=sepwidth+"em";cols.push(colSep);}}var col=[];for(r=0;r<nr;++r){var row=body[r];var elem=row[c];if(!elem){continue;}var _shift=row.pos-offset;elem.depth=row.depth;elem.height=row.height;col.push({type:"elem",elem:elem,shift:_shift});}col=buildCommon.makeVList({positionType:"individualShift",children:col},options);col=buildCommon.makeSpan(["col-align-"+(colDescr.align||"c")],[col]);cols.push(col);if(c<nc-1||group.hskipBeforeAndAfter){sepwidth=utils.deflt(colDescr.postgap,arraycolsep);if(sepwidth!==0){colSep=buildCommon.makeSpan(["arraycolsep"],[]);colSep.style.width=sepwidth+"em";cols.push(colSep);}}}body=buildCommon.makeSpan(["mtable"],cols);// Add \hline(s), if any.
  if(hlines.length>0){var line=buildCommon.makeLineSpan("hline",options,ruleThickness);var dashes=buildCommon.makeLineSpan("hdashline",options,ruleThickness);var vListElems=[{type:"elem",elem:body,shift:0}];while(hlines.length>0){var hline=hlines.pop();var lineShift=hline.pos-offset;if(hline.isDashed){vListElems.push({type:"elem",elem:dashes,shift:lineShift});}else{vListElems.push({type:"elem",elem:line,shift:lineShift});}}body=buildCommon.makeVList({positionType:"individualShift",children:vListElems},options);}if(!group.addEqnNum){return buildCommon.makeSpan(["mord"],[body],options);}else{var eqnNumCol=buildCommon.makeVList({positionType:"individualShift",children:eqnNumSpans},options);eqnNumCol=buildCommon.makeSpan(["tag"],[eqnNumCol],options);return buildCommon.makeFragment([body,eqnNumCol]);}};var alignMap={c:"center ",l:"left ",r:"right "};var array_mathmlBuilder=function mathmlBuilder(group,options){var tbl=[];var glue=new mathMLTree.MathNode("mtd",[],["mtr-glue"]);var tag=new mathMLTree.MathNode("mtd",[],["mml-eqn-num"]);for(var i=0;i<group.body.length;i++){var rw=group.body[i];var row=[];for(var j=0;j<rw.length;j++){row.push(new mathMLTree.MathNode("mtd",[buildMathML_buildGroup(rw[j],options)]));}if(group.addEqnNum){row.unshift(glue);row.push(glue);if(group.leqno){row.unshift(tag);}else{row.push(tag);}}tbl.push(new mathMLTree.MathNode("mtr",row));}var table=new mathMLTree.MathNode("mtable",tbl);// Set column alignment, row spacing, column spacing, and
  // array lines by setting attributes on the table element.
  // Set the row spacing. In MathML, we specify a gap distance.
  // We do not use rowGap[] because MathML automatically increases
  // cell height with the height/depth of the element content.
  // LaTeX \arraystretch multiplies the row baseline-to-baseline distance.
  // We simulate this by adding (arraystretch - 1)em to the gap. This
  // does a reasonable job of adjusting arrays containing 1 em tall content.
  // The 0.16 and 0.09 values are found emprically. They produce an array
  // similar to LaTeX and in which content does not interfere with \hines.
  var gap=group.arraystretch===0.5?0.1// {smallmatrix}, {subarray}
  :0.16+group.arraystretch-1+(group.addJot?0.09:0);table.setAttribute("rowspacing",gap.toFixed(4)+"em");// MathML table lines go only between cells.
  // To place a line on an edge we'll use <menclose>, if necessary.
  var menclose="";var align="";if(group.cols&&group.cols.length>0){// Find column alignment, column spacing, and  vertical lines.
  var cols=group.cols;var columnLines="";var prevTypeWasAlign=false;var iStart=0;var iEnd=cols.length;if(cols[0].type==="separator"){menclose+="top ";iStart=1;}if(cols[cols.length-1].type==="separator"){menclose+="bottom ";iEnd-=1;}for(var _i=iStart;_i<iEnd;_i++){if(cols[_i].type==="align"){align+=alignMap[cols[_i].align];if(prevTypeWasAlign){columnLines+="none ";}prevTypeWasAlign=true;}else if(cols[_i].type==="separator"){// MathML accepts only single lines between cells.
  // So we read only the first of consecutive separators.
  if(prevTypeWasAlign){columnLines+=cols[_i].separator==="|"?"solid ":"dashed ";prevTypeWasAlign=false;}}}table.setAttribute("columnalign",align.trim());if(/[sd]/.test(columnLines)){table.setAttribute("columnlines",columnLines.trim());}}// Set column spacing.
  if(group.colSeparationType==="align"){var _cols=group.cols||[];var spacing="";for(var _i2=1;_i2<_cols.length;_i2++){spacing+=_i2%2?"0em ":"1em ";}table.setAttribute("columnspacing",spacing.trim());}else if(group.colSeparationType==="alignat"||group.colSeparationType==="gather"){table.setAttribute("columnspacing","0em");}else if(group.colSeparationType==="small"){table.setAttribute("columnspacing","0.2778em");}else if(group.colSeparationType==="CD"){table.setAttribute("columnspacing","0.5em");}else{table.setAttribute("columnspacing","1em");}// Address \hline and \hdashline
  var rowLines="";var hlines=group.hLinesBeforeRow;menclose+=hlines[0].length>0?"left ":"";menclose+=hlines[hlines.length-1].length>0?"right ":"";for(var _i3=1;_i3<hlines.length-1;_i3++){rowLines+=hlines[_i3].length===0?"none "// MathML accepts only a single line between rows. Read one element.
  :hlines[_i3][0]?"dashed ":"solid ";}if(/[sd]/.test(rowLines)){table.setAttribute("rowlines",rowLines.trim());}if(menclose!==""){table=new mathMLTree.MathNode("menclose",[table]);table.setAttribute("notation",menclose.trim());}if(group.arraystretch&&group.arraystretch<1){// A small array. Wrap in scriptstyle so row gap is not too large.
  table=new mathMLTree.MathNode("mstyle",[table]);table.setAttribute("scriptlevel","1");}return table;};// Convenience function for align, align*, aligned, alignat, alignat*, alignedat.
  var alignedHandler=function alignedHandler(context,args){if(context.envName.indexOf("ed")===-1){validateAmsEnvironmentContext(context);}var cols=[];var separationType=context.envName.indexOf("at")>-1?"alignat":"align";var res=parseArray(context.parser,{cols:cols,addJot:true,addEqnNum:context.envName==="align"||context.envName==="alignat",emptySingleRow:true,colSeparationType:separationType,maxNumCols:context.envName==="split"?2:undefined,leqno:context.parser.settings.leqno},"display");// Determining number of columns.
  // 1. If the first argument is given, we use it as a number of columns,
  //    and makes sure that each row doesn't exceed that number.
  // 2. Otherwise, just count number of columns = maximum number
  //    of cells in each row ("aligned" mode -- isAligned will be true).
  //
  // At the same time, prepend empty group {} at beginning of every second
  // cell in each row (starting with second cell) so that operators become
  // binary.  This behavior is implemented in amsmath's \start@aligned.
  var numMaths;var numCols=0;var emptyGroup={type:"ordgroup",mode:context.mode,body:[]};if(args[0]&&args[0].type==="ordgroup"){var arg0="";for(var i=0;i<args[0].body.length;i++){var textord=assertNodeType(args[0].body[i],"textord");arg0+=textord.text;}numMaths=Number(arg0);numCols=numMaths*2;}var isAligned=!numCols;res.body.forEach(function(row){for(var _i4=1;_i4<row.length;_i4+=2){// Modify ordgroup node within styling node
  var styling=assertNodeType(row[_i4],"styling");var ordgroup=assertNodeType(styling.body[0],"ordgroup");ordgroup.body.unshift(emptyGroup);}if(!isAligned){// Case 1
  var curMaths=row.length/2;if(numMaths<curMaths){throw new src_ParseError("Too many math in a row: "+("expected "+numMaths+", but got "+curMaths),row[0]);}}else if(numCols<row.length){// Case 2
  numCols=row.length;}});// Adjusting alignment.
  // In aligned mode, we add one \qquad between columns;
  // otherwise we add nothing.
  for(var _i5=0;_i5<numCols;++_i5){var align="r";var pregap=0;if(_i5%2===1){align="l";}else if(_i5>0&&isAligned){// "aligned" mode.
  pregap=1;// add one \quad
  }cols[_i5]={type:"align",align:align,pregap:pregap,postgap:0};}res.colSeparationType=isAligned?"align":"alignat";return res;};// Arrays are part of LaTeX, defined in lttab.dtx so its documentation
  // is part of the source2e.pdf file of LaTeX2e source documentation.
  // {darray} is an {array} environment where cells are set in \displaystyle,
  // as defined in nccmath.sty.
  defineEnvironment({type:"array",names:["array","darray"],props:{numArgs:1},handler:function handler(context,args){// Since no types are specified above, the two possibilities are
  // - The argument is wrapped in {} or [], in which case Parser's
  //   parseGroup() returns an "ordgroup" wrapping some symbol node.
  // - The argument is a bare symbol node.
  var symNode=checkSymbolNodeType(args[0]);var colalign=symNode?[args[0]]:assertNodeType(args[0],"ordgroup").body;var cols=colalign.map(function(nde){var node=assertSymbolNodeType(nde);var ca=node.text;if("lcr".indexOf(ca)!==-1){return {type:"align",align:ca};}else if(ca==="|"){return {type:"separator",separator:"|"};}else if(ca===":"){return {type:"separator",separator:":"};}throw new src_ParseError("Unknown column alignment: "+ca,nde);});var res={cols:cols,hskipBeforeAndAfter:true,// \@preamble in lttab.dtx
  maxNumCols:cols.length};return parseArray(context.parser,res,dCellStyle(context.envName));},htmlBuilder:array_htmlBuilder,mathmlBuilder:array_mathmlBuilder});// The matrix environments of amsmath builds on the array environment
  // of LaTeX, which is discussed above.
  // The mathtools package adds starred versions of the same environments.
  // These have an optional argument to choose left|center|right justification.
  defineEnvironment({type:"array",names:["matrix","pmatrix","bmatrix","Bmatrix","vmatrix","Vmatrix","matrix*","pmatrix*","bmatrix*","Bmatrix*","vmatrix*","Vmatrix*"],props:{numArgs:0},handler:function handler(context){var delimiters={"matrix":null,"pmatrix":["(",")"],"bmatrix":["[","]"],"Bmatrix":["\\{","\\}"],"vmatrix":["|","|"],"Vmatrix":["\\Vert","\\Vert"]}[context.envName.replace("*","")];// \hskip -\arraycolsep in amsmath
  var colAlign="c";var payload={hskipBeforeAndAfter:false,cols:[{type:"align",align:colAlign}]};if(context.envName.charAt(context.envName.length-1)==="*"){// It's one of the mathtools starred functions.
  // Parse the optional alignment argument.
  var parser=context.parser;parser.consumeSpaces();if(parser.fetch().text==="["){parser.consume();parser.consumeSpaces();colAlign=parser.fetch().text;if("lcr".indexOf(colAlign)===-1){throw new src_ParseError("Expected l or c or r",parser.nextToken);}parser.consume();parser.consumeSpaces();parser.expect("]");parser.consume();payload.cols=[{type:"align",align:colAlign}];}}var res=parseArray(context.parser,payload,dCellStyle(context.envName));// Populate cols with the correct number of column alignment specs.
  var numCols=Math.max.apply(Math,[0].concat(res.body.map(function(row){return row.length;})));res.cols=new Array(numCols).fill({type:"align",align:colAlign});return delimiters?{type:"leftright",mode:context.mode,body:[res],left:delimiters[0],right:delimiters[1],rightColor:undefined// \right uninfluenced by \color in array
  }:res;},htmlBuilder:array_htmlBuilder,mathmlBuilder:array_mathmlBuilder});defineEnvironment({type:"array",names:["smallmatrix"],props:{numArgs:0},handler:function handler(context){var payload={arraystretch:0.5};var res=parseArray(context.parser,payload,"script");res.colSeparationType="small";return res;},htmlBuilder:array_htmlBuilder,mathmlBuilder:array_mathmlBuilder});defineEnvironment({type:"array",names:["subarray"],props:{numArgs:1},handler:function handler(context,args){// Parsing of {subarray} is similar to {array}
  var symNode=checkSymbolNodeType(args[0]);var colalign=symNode?[args[0]]:assertNodeType(args[0],"ordgroup").body;var cols=colalign.map(function(nde){var node=assertSymbolNodeType(nde);var ca=node.text;// {subarray} only recognizes "l" & "c"
  if("lc".indexOf(ca)!==-1){return {type:"align",align:ca};}throw new src_ParseError("Unknown column alignment: "+ca,nde);});if(cols.length>1){throw new src_ParseError("{subarray} can contain only one column");}var res={cols:cols,hskipBeforeAndAfter:false,arraystretch:0.5};res=parseArray(context.parser,res,"script");if(res.body.length>0&&res.body[0].length>1){throw new src_ParseError("{subarray} can contain only one column");}return res;},htmlBuilder:array_htmlBuilder,mathmlBuilder:array_mathmlBuilder});// A cases environment (in amsmath.sty) is almost equivalent to
  // \def\arraystretch{1.2}%
  // \left\{\begin{array}{@{}l@{\quad}l@{}} … \end{array}\right.
  // {dcases} is a {cases} environment where cells are set in \displaystyle,
  // as defined in mathtools.sty.
  // {rcases} is another mathtools environment. It's brace is on the right side.
  defineEnvironment({type:"array",names:["cases","dcases","rcases","drcases"],props:{numArgs:0},handler:function handler(context){var payload={arraystretch:1.2,cols:[{type:"align",align:"l",pregap:0,// TODO(kevinb) get the current style.
  // For now we use the metrics for TEXT style which is what we were
  // doing before.  Before attempting to get the current style we
  // should look at TeX's behavior especially for \over and matrices.
  postgap:1.0/* 1em quad */},{type:"align",align:"l",pregap:0,postgap:0}]};var res=parseArray(context.parser,payload,dCellStyle(context.envName));return {type:"leftright",mode:context.mode,body:[res],left:context.envName.indexOf("r")>-1?".":"\\{",right:context.envName.indexOf("r")>-1?"\\}":".",rightColor:undefined};},htmlBuilder:array_htmlBuilder,mathmlBuilder:array_mathmlBuilder});// In the align environment, one uses ampersands, &, to specify number of
  // columns in each row, and to locate spacing between each column.
  // align gets automatic numbering. align* and aligned do not.
  // The alignedat environment can be used in math mode.
  // Note that we assume \nomallineskiplimit to be zero,
  // so that \strut@ is the same as \strut.
  defineEnvironment({type:"array",names:["align","align*","aligned","split"],props:{numArgs:0},handler:alignedHandler,htmlBuilder:array_htmlBuilder,mathmlBuilder:array_mathmlBuilder});// A gathered environment is like an array environment with one centered
  // column, but where rows are considered lines so get \jot line spacing
  // and contents are set in \displaystyle.
  defineEnvironment({type:"array",names:["gathered","gather","gather*"],props:{numArgs:0},handler:function handler(context){if(utils.contains(["gather","gather*"],context.envName)){validateAmsEnvironmentContext(context);}var res={cols:[{type:"align",align:"c"}],addJot:true,colSeparationType:"gather",addEqnNum:context.envName==="gather",emptySingleRow:true,leqno:context.parser.settings.leqno};return parseArray(context.parser,res,"display");},htmlBuilder:array_htmlBuilder,mathmlBuilder:array_mathmlBuilder});// alignat environment is like an align environment, but one must explicitly
  // specify maximum number of columns in each row, and can adjust spacing between
  // each columns.
  defineEnvironment({type:"array",names:["alignat","alignat*","alignedat"],props:{numArgs:1},handler:alignedHandler,htmlBuilder:array_htmlBuilder,mathmlBuilder:array_mathmlBuilder});defineEnvironment({type:"array",names:["equation","equation*"],props:{numArgs:0},handler:function handler(context){validateAmsEnvironmentContext(context);var res={addEqnNum:context.envName==="equation",emptySingleRow:true,singleRow:true,maxNumCols:1,leqno:context.parser.settings.leqno};return parseArray(context.parser,res,"display");},htmlBuilder:array_htmlBuilder,mathmlBuilder:array_mathmlBuilder});defineEnvironment({type:"array",names:["CD"],props:{numArgs:0},handler:function handler(context){validateAmsEnvironmentContext(context);return parseCD(context.parser);},htmlBuilder:array_htmlBuilder,mathmlBuilder:array_mathmlBuilder});// Catch \hline outside array environment
  defineFunction({type:"text",// Doesn't matter what this is.
  names:["\\hline","\\hdashline"],props:{numArgs:0,allowedInText:true,allowedInMath:true},handler:function handler(context,args){throw new src_ParseError(context.funcName+" valid only within array environment");}});var environments=_environments;/* harmony default export */var src_environments=environments;// All environment definitions should be imported below
  // Environment delimiters. HTML/MathML rendering is defined in the corresponding
  // defineEnvironment definitions.
  defineFunction({type:"environment",names:["\\begin","\\end"],props:{numArgs:1,argTypes:["text"]},handler:function handler(_ref,args){var parser=_ref.parser,funcName=_ref.funcName;var nameGroup=args[0];if(nameGroup.type!=="ordgroup"){throw new src_ParseError("Invalid environment name",nameGroup);}var envName="";for(var i=0;i<nameGroup.body.length;++i){envName+=assertNodeType(nameGroup.body[i],"textord").text;}if(funcName==="\\begin"){// begin...end is similar to left...right
  if(!src_environments.hasOwnProperty(envName)){throw new src_ParseError("No such environment: "+envName,nameGroup);}// Build the environment object. Arguments and other information will
  // be made available to the begin and end methods using properties.
  var env=src_environments[envName];var _parser$parseArgument=parser.parseArguments("\\begin{"+envName+"}",env),_args=_parser$parseArgument.args,optArgs=_parser$parseArgument.optArgs;var context={mode:parser.mode,envName:envName,parser:parser};var result=env.handler(context,_args,optArgs);parser.expect("\\end",false);var endNameToken=parser.nextToken;var end=assertNodeType(parser.parseFunction(),"environment");if(end.name!==envName){throw new src_ParseError("Mismatch: \\begin{"+envName+"} matched by \\end{"+end.name+"}",endNameToken);}// $FlowFixMe, "environment" handler returns an environment ParseNode
  return result;}return {type:"environment",mode:parser.mode,name:envName,nameGroup:nameGroup};}});var mclass_makeSpan=buildCommon.makeSpan;function mclass_htmlBuilder(group,options){var elements=buildExpression(group.body,options,true);return mclass_makeSpan([group.mclass],elements,options);}function mclass_mathmlBuilder(group,options){var node;var inner=buildMathML_buildExpression(group.body,options);if(group.mclass==="minner"){return mathMLTree.newDocumentFragment(inner);}else if(group.mclass==="mord"){if(group.isCharacterBox){node=inner[0];node.type="mi";}else{node=new mathMLTree.MathNode("mi",inner);}}else{if(group.isCharacterBox){node=inner[0];node.type="mo";}else{node=new mathMLTree.MathNode("mo",inner);}// Set spacing based on what is the most likely adjacent atom type.
  // See TeXbook p170.
  if(group.mclass==="mbin"){node.attributes.lspace="0.22em";// medium space
  node.attributes.rspace="0.22em";}else if(group.mclass==="mpunct"){node.attributes.lspace="0em";node.attributes.rspace="0.17em";// thinspace
  }else if(group.mclass==="mopen"||group.mclass==="mclose"){node.attributes.lspace="0em";node.attributes.rspace="0em";}// MathML <mo> default space is 5/18 em, so <mrel> needs no action.
  // Ref: https://developer.mozilla.org/en-US/docs/Web/MathML/Element/mo
  }return node;}// Math class commands except \mathop
  defineFunction({type:"mclass",names:["\\mathord","\\mathbin","\\mathrel","\\mathopen","\\mathclose","\\mathpunct","\\mathinner"],props:{numArgs:1,primitive:true},handler:function handler(_ref,args){var parser=_ref.parser,funcName=_ref.funcName;var body=args[0];return {type:"mclass",mode:parser.mode,mclass:"m"+funcName.substr(5),// TODO(kevinb): don't prefix with 'm'
  body:ordargument(body),isCharacterBox:utils.isCharacterBox(body)};},htmlBuilder:mclass_htmlBuilder,mathmlBuilder:mclass_mathmlBuilder});var binrelClass=function binrelClass(arg){// \binrel@ spacing varies with (bin|rel|ord) of the atom in the argument.
  // (by rendering separately and with {}s before and after, and measuring
  // the change in spacing).  We'll do roughly the same by detecting the
  // atom type directly.
  var atom=arg.type==="ordgroup"&&arg.body.length?arg.body[0]:arg;if(atom.type==="atom"&&(atom.family==="bin"||atom.family==="rel")){return "m"+atom.family;}else{return "mord";}};// \@binrel{x}{y} renders like y but as mbin/mrel/mord if x is mbin/mrel/mord.
  // This is equivalent to \binrel@{x}\binrel@@{y} in AMSTeX.
  defineFunction({type:"mclass",names:["\\@binrel"],props:{numArgs:2},handler:function handler(_ref2,args){var parser=_ref2.parser;return {type:"mclass",mode:parser.mode,mclass:binrelClass(args[0]),body:ordargument(args[1]),isCharacterBox:utils.isCharacterBox(args[1])};}});// Build a relation or stacked op by placing one symbol on top of another
  defineFunction({type:"mclass",names:["\\stackrel","\\overset","\\underset"],props:{numArgs:2},handler:function handler(_ref3,args){var parser=_ref3.parser,funcName=_ref3.funcName;var baseArg=args[1];var shiftedArg=args[0];var mclass;if(funcName!=="\\stackrel"){// LaTeX applies \binrel spacing to \overset and \underset.
  mclass=binrelClass(baseArg);}else{mclass="mrel";// for \stackrel
  }var baseOp={type:"op",mode:baseArg.mode,limits:true,alwaysHandleSupSub:true,parentIsSupSub:false,symbol:false,suppressBaseShift:funcName!=="\\stackrel",body:ordargument(baseArg)};var supsub={type:"supsub",mode:shiftedArg.mode,base:baseOp,sup:funcName==="\\underset"?null:shiftedArg,sub:funcName==="\\underset"?shiftedArg:null};return {type:"mclass",mode:parser.mode,mclass:mclass,body:[supsub],isCharacterBox:utils.isCharacterBox(supsub)};},htmlBuilder:mclass_htmlBuilder,mathmlBuilder:mclass_mathmlBuilder});// TODO(kevinb): implement \\sl and \\sc
  var font_htmlBuilder=function htmlBuilder(group,options){var font=group.font;var newOptions=options.withFont(font);return buildGroup(group.body,newOptions);};var font_mathmlBuilder=function mathmlBuilder(group,options){var font=group.font;var newOptions=options.withFont(font);return buildMathML_buildGroup(group.body,newOptions);};var fontAliases={"\\Bbb":"\\mathbb","\\bold":"\\mathbf","\\frak":"\\mathfrak","\\bm":"\\boldsymbol"};defineFunction({type:"font",names:[// styles, except \boldsymbol defined below
  "\\mathrm","\\mathit","\\mathbf","\\mathnormal",// families
  "\\mathbb","\\mathcal","\\mathfrak","\\mathscr","\\mathsf","\\mathtt",// aliases, except \bm defined below
  "\\Bbb","\\bold","\\frak"],props:{numArgs:1,allowedInArgument:true},handler:function handler(_ref,args){var parser=_ref.parser,funcName=_ref.funcName;var body=normalizeArgument(args[0]);var func=funcName;if(func in fontAliases){func=fontAliases[func];}return {type:"font",mode:parser.mode,font:func.slice(1),body:body};},htmlBuilder:font_htmlBuilder,mathmlBuilder:font_mathmlBuilder});defineFunction({type:"mclass",names:["\\boldsymbol","\\bm"],props:{numArgs:1},handler:function handler(_ref2,args){var parser=_ref2.parser;var body=args[0];var isCharacterBox=utils.isCharacterBox(body);// amsbsy.sty's \boldsymbol uses \binrel spacing to inherit the
  // argument's bin|rel|ord status
  return {type:"mclass",mode:parser.mode,mclass:binrelClass(body),body:[{type:"font",mode:parser.mode,font:"boldsymbol",body:body}],isCharacterBox:isCharacterBox};}});// Old font changing functions
  defineFunction({type:"font",names:["\\rm","\\sf","\\tt","\\bf","\\it","\\cal"],props:{numArgs:0,allowedInText:true},handler:function handler(_ref3,args){var parser=_ref3.parser,funcName=_ref3.funcName,breakOnTokenText=_ref3.breakOnTokenText;var mode=parser.mode;var body=parser.parseExpression(true,breakOnTokenText);var style="math"+funcName.slice(1);return {type:"font",mode:mode,font:style,body:{type:"ordgroup",mode:parser.mode,body:body}};},htmlBuilder:font_htmlBuilder,mathmlBuilder:font_mathmlBuilder});var adjustStyle=function adjustStyle(size,originalStyle){// Figure out what style this fraction should be in based on the
  // function used
  var style=originalStyle;if(size==="display"){// Get display style as a default.
  // If incoming style is sub/sup, use style.text() to get correct size.
  style=style.id>=src_Style.SCRIPT.id?style.text():src_Style.DISPLAY;}else if(size==="text"&&style.size===src_Style.DISPLAY.size){// We're in a \tfrac but incoming style is displaystyle, so:
  style=src_Style.TEXT;}else if(size==="script"){style=src_Style.SCRIPT;}else if(size==="scriptscript"){style=src_Style.SCRIPTSCRIPT;}return style;};var genfrac_htmlBuilder=function htmlBuilder(group,options){// Fractions are handled in the TeXbook on pages 444-445, rules 15(a-e).
  var style=adjustStyle(group.size,options.style);var nstyle=style.fracNum();var dstyle=style.fracDen();var newOptions;newOptions=options.havingStyle(nstyle);var numerm=buildGroup(group.numer,newOptions,options);if(group.continued){// \cfrac inserts a \strut into the numerator.
  // Get \strut dimensions from TeXbook page 353.
  var hStrut=8.5/options.fontMetrics().ptPerEm;var dStrut=3.5/options.fontMetrics().ptPerEm;numerm.height=numerm.height<hStrut?hStrut:numerm.height;numerm.depth=numerm.depth<dStrut?dStrut:numerm.depth;}newOptions=options.havingStyle(dstyle);var denomm=buildGroup(group.denom,newOptions,options);var rule;var ruleWidth;var ruleSpacing;if(group.hasBarLine){if(group.barSize){ruleWidth=calculateSize(group.barSize,options);rule=buildCommon.makeLineSpan("frac-line",options,ruleWidth);}else{rule=buildCommon.makeLineSpan("frac-line",options);}ruleWidth=rule.height;ruleSpacing=rule.height;}else{rule=null;ruleWidth=0;ruleSpacing=options.fontMetrics().defaultRuleThickness;}// Rule 15b
  var numShift;var clearance;var denomShift;if(style.size===src_Style.DISPLAY.size||group.size==="display"){numShift=options.fontMetrics().num1;if(ruleWidth>0){clearance=3*ruleSpacing;}else{clearance=7*ruleSpacing;}denomShift=options.fontMetrics().denom1;}else{if(ruleWidth>0){numShift=options.fontMetrics().num2;clearance=ruleSpacing;}else{numShift=options.fontMetrics().num3;clearance=3*ruleSpacing;}denomShift=options.fontMetrics().denom2;}var frac;if(!rule){// Rule 15c
  var candidateClearance=numShift-numerm.depth-(denomm.height-denomShift);if(candidateClearance<clearance){numShift+=0.5*(clearance-candidateClearance);denomShift+=0.5*(clearance-candidateClearance);}frac=buildCommon.makeVList({positionType:"individualShift",children:[{type:"elem",elem:denomm,shift:denomShift},{type:"elem",elem:numerm,shift:-numShift}]},options);}else{// Rule 15d
  var axisHeight=options.fontMetrics().axisHeight;if(numShift-numerm.depth-(axisHeight+0.5*ruleWidth)<clearance){numShift+=clearance-(numShift-numerm.depth-(axisHeight+0.5*ruleWidth));}if(axisHeight-0.5*ruleWidth-(denomm.height-denomShift)<clearance){denomShift+=clearance-(axisHeight-0.5*ruleWidth-(denomm.height-denomShift));}var midShift=-(axisHeight-0.5*ruleWidth);frac=buildCommon.makeVList({positionType:"individualShift",children:[{type:"elem",elem:denomm,shift:denomShift},{type:"elem",elem:rule,shift:midShift},{type:"elem",elem:numerm,shift:-numShift}]},options);}// Since we manually change the style sometimes (with \dfrac or \tfrac),
  // account for the possible size change here.
  newOptions=options.havingStyle(style);frac.height*=newOptions.sizeMultiplier/options.sizeMultiplier;frac.depth*=newOptions.sizeMultiplier/options.sizeMultiplier;// Rule 15e
  var delimSize;if(style.size===src_Style.DISPLAY.size){delimSize=options.fontMetrics().delim1;}else if(style.size===src_Style.SCRIPTSCRIPT.size){delimSize=options.havingStyle(src_Style.SCRIPT).fontMetrics().delim2;}else{delimSize=options.fontMetrics().delim2;}var leftDelim;var rightDelim;if(group.leftDelim==null){leftDelim=makeNullDelimiter(options,["mopen"]);}else{leftDelim=delimiter.customSizedDelim(group.leftDelim,delimSize,true,options.havingStyle(style),group.mode,["mopen"]);}if(group.continued){rightDelim=buildCommon.makeSpan([]);// zero width for \cfrac
  }else if(group.rightDelim==null){rightDelim=makeNullDelimiter(options,["mclose"]);}else{rightDelim=delimiter.customSizedDelim(group.rightDelim,delimSize,true,options.havingStyle(style),group.mode,["mclose"]);}return buildCommon.makeSpan(["mord"].concat(newOptions.sizingClasses(options)),[leftDelim,buildCommon.makeSpan(["mfrac"],[frac]),rightDelim],options);};var genfrac_mathmlBuilder=function mathmlBuilder(group,options){var node=new mathMLTree.MathNode("mfrac",[buildMathML_buildGroup(group.numer,options),buildMathML_buildGroup(group.denom,options)]);if(!group.hasBarLine){node.setAttribute("linethickness","0px");}else if(group.barSize){var ruleWidth=calculateSize(group.barSize,options);node.setAttribute("linethickness",ruleWidth+"em");}var style=adjustStyle(group.size,options.style);if(style.size!==options.style.size){node=new mathMLTree.MathNode("mstyle",[node]);var isDisplay=style.size===src_Style.DISPLAY.size?"true":"false";node.setAttribute("displaystyle",isDisplay);node.setAttribute("scriptlevel","0");}if(group.leftDelim!=null||group.rightDelim!=null){var withDelims=[];if(group.leftDelim!=null){var leftOp=new mathMLTree.MathNode("mo",[new mathMLTree.TextNode(group.leftDelim.replace("\\",""))]);leftOp.setAttribute("fence","true");withDelims.push(leftOp);}withDelims.push(node);if(group.rightDelim!=null){var rightOp=new mathMLTree.MathNode("mo",[new mathMLTree.TextNode(group.rightDelim.replace("\\",""))]);rightOp.setAttribute("fence","true");withDelims.push(rightOp);}return makeRow(withDelims);}return node;};defineFunction({type:"genfrac",names:["\\dfrac","\\frac","\\tfrac","\\dbinom","\\binom","\\tbinom","\\\\atopfrac",// can’t be entered directly
  "\\\\bracefrac","\\\\brackfrac"// ditto
  ],props:{numArgs:2,allowedInArgument:true},handler:function handler(_ref,args){var parser=_ref.parser,funcName=_ref.funcName;var numer=args[0];var denom=args[1];var hasBarLine;var leftDelim=null;var rightDelim=null;var size="auto";switch(funcName){case"\\dfrac":case"\\frac":case"\\tfrac":hasBarLine=true;break;case"\\\\atopfrac":hasBarLine=false;break;case"\\dbinom":case"\\binom":case"\\tbinom":hasBarLine=false;leftDelim="(";rightDelim=")";break;case"\\\\bracefrac":hasBarLine=false;leftDelim="\\{";rightDelim="\\}";break;case"\\\\brackfrac":hasBarLine=false;leftDelim="[";rightDelim="]";break;default:throw new Error("Unrecognized genfrac command");}switch(funcName){case"\\dfrac":case"\\dbinom":size="display";break;case"\\tfrac":case"\\tbinom":size="text";break;}return {type:"genfrac",mode:parser.mode,continued:false,numer:numer,denom:denom,hasBarLine:hasBarLine,leftDelim:leftDelim,rightDelim:rightDelim,size:size,barSize:null};},htmlBuilder:genfrac_htmlBuilder,mathmlBuilder:genfrac_mathmlBuilder});defineFunction({type:"genfrac",names:["\\cfrac"],props:{numArgs:2},handler:function handler(_ref2,args){var parser=_ref2.parser,funcName=_ref2.funcName;var numer=args[0];var denom=args[1];return {type:"genfrac",mode:parser.mode,continued:true,numer:numer,denom:denom,hasBarLine:true,leftDelim:null,rightDelim:null,size:"display",barSize:null};}});// Infix generalized fractions -- these are not rendered directly, but replaced
  // immediately by one of the variants above.
  defineFunction({type:"infix",names:["\\over","\\choose","\\atop","\\brace","\\brack"],props:{numArgs:0,infix:true},handler:function handler(_ref3){var parser=_ref3.parser,funcName=_ref3.funcName,token=_ref3.token;var replaceWith;switch(funcName){case"\\over":replaceWith="\\frac";break;case"\\choose":replaceWith="\\binom";break;case"\\atop":replaceWith="\\\\atopfrac";break;case"\\brace":replaceWith="\\\\bracefrac";break;case"\\brack":replaceWith="\\\\brackfrac";break;default:throw new Error("Unrecognized infix genfrac command");}return {type:"infix",mode:parser.mode,replaceWith:replaceWith,token:token};}});var stylArray=["display","text","script","scriptscript"];var delimFromValue=function delimFromValue(delimString){var delim=null;if(delimString.length>0){delim=delimString;delim=delim==="."?null:delim;}return delim;};defineFunction({type:"genfrac",names:["\\genfrac"],props:{numArgs:6,allowedInArgument:true,argTypes:["math","math","size","text","math","math"]},handler:function handler(_ref4,args){var parser=_ref4.parser;var numer=args[4];var denom=args[5];// Look into the parse nodes to get the desired delimiters.
  var leftNode=normalizeArgument(args[0]);var leftDelim=leftNode.type==="atom"&&leftNode.family==="open"?delimFromValue(leftNode.text):null;var rightNode=normalizeArgument(args[1]);var rightDelim=rightNode.type==="atom"&&rightNode.family==="close"?delimFromValue(rightNode.text):null;var barNode=assertNodeType(args[2],"size");var hasBarLine;var barSize=null;if(barNode.isBlank){// \genfrac acts differently than \above.
  // \genfrac treats an empty size group as a signal to use a
  // standard bar size. \above would see size = 0 and omit the bar.
  hasBarLine=true;}else{barSize=barNode.value;hasBarLine=barSize.number>0;}// Find out if we want displaystyle, textstyle, etc.
  var size="auto";var styl=args[3];if(styl.type==="ordgroup"){if(styl.body.length>0){var textOrd=assertNodeType(styl.body[0],"textord");size=stylArray[Number(textOrd.text)];}}else{styl=assertNodeType(styl,"textord");size=stylArray[Number(styl.text)];}return {type:"genfrac",mode:parser.mode,numer:numer,denom:denom,continued:false,hasBarLine:hasBarLine,barSize:barSize,leftDelim:leftDelim,rightDelim:rightDelim,size:size};},htmlBuilder:genfrac_htmlBuilder,mathmlBuilder:genfrac_mathmlBuilder});// \above is an infix fraction that also defines a fraction bar size.
  defineFunction({type:"infix",names:["\\above"],props:{numArgs:1,argTypes:["size"],infix:true},handler:function handler(_ref5,args){var parser=_ref5.parser,funcName=_ref5.funcName,token=_ref5.token;return {type:"infix",mode:parser.mode,replaceWith:"\\\\abovefrac",size:assertNodeType(args[0],"size").value,token:token};}});defineFunction({type:"genfrac",names:["\\\\abovefrac"],props:{numArgs:3,argTypes:["math","size","math"]},handler:function handler(_ref6,args){var parser=_ref6.parser,funcName=_ref6.funcName;var numer=args[0];var barSize=assert(assertNodeType(args[1],"infix").size);var denom=args[2];var hasBarLine=barSize.number>0;return {type:"genfrac",mode:parser.mode,numer:numer,denom:denom,continued:false,hasBarLine:hasBarLine,barSize:barSize,leftDelim:null,rightDelim:null,size:"auto"};},htmlBuilder:genfrac_htmlBuilder,mathmlBuilder:genfrac_mathmlBuilder});// NOTE: Unlike most `htmlBuilder`s, this one handles not only "horizBrace", but
  // also "supsub" since an over/underbrace can affect super/subscripting.
  var horizBrace_htmlBuilder=function htmlBuilder(grp,options){var style=options.style;// Pull out the `ParseNode<"horizBrace">` if `grp` is a "supsub" node.
  var supSubGroup;var group;if(grp.type==="supsub"){// Ref: LaTeX source2e: }}}}\limits}
  // i.e. LaTeX treats the brace similar to an op and passes it
  // with \limits, so we need to assign supsub style.
  supSubGroup=grp.sup?buildGroup(grp.sup,options.havingStyle(style.sup()),options):buildGroup(grp.sub,options.havingStyle(style.sub()),options);group=assertNodeType(grp.base,"horizBrace");}else{group=assertNodeType(grp,"horizBrace");}// Build the base group
  var body=buildGroup(group.base,options.havingBaseStyle(src_Style.DISPLAY));// Create the stretchy element
  var braceBody=stretchy.svgSpan(group,options);// Generate the vlist, with the appropriate kerns        ┏━━━━━━━━┓
  // This first vlist contains the content and the brace:   equation
  var vlist;if(group.isOver){vlist=buildCommon.makeVList({positionType:"firstBaseline",children:[{type:"elem",elem:body},{type:"kern",size:0.1},{type:"elem",elem:braceBody}]},options);// $FlowFixMe: Replace this with passing "svg-align" into makeVList.
  vlist.children[0].children[0].children[1].classes.push("svg-align");}else{vlist=buildCommon.makeVList({positionType:"bottom",positionData:body.depth+0.1+braceBody.height,children:[{type:"elem",elem:braceBody},{type:"kern",size:0.1},{type:"elem",elem:body}]},options);// $FlowFixMe: Replace this with passing "svg-align" into makeVList.
  vlist.children[0].children[0].children[0].classes.push("svg-align");}if(supSubGroup){// To write the supsub, wrap the first vlist in another vlist:
  // They can't all go in the same vlist, because the note might be
  // wider than the equation. We want the equation to control the
  // brace width.
  //      note          long note           long note
  //   ┏━━━━━━━━┓   or    ┏━━━┓     not    ┏━━━━━━━━━┓
  //    equation           eqn                 eqn
  var vSpan=buildCommon.makeSpan(["mord",group.isOver?"mover":"munder"],[vlist],options);if(group.isOver){vlist=buildCommon.makeVList({positionType:"firstBaseline",children:[{type:"elem",elem:vSpan},{type:"kern",size:0.2},{type:"elem",elem:supSubGroup}]},options);}else{vlist=buildCommon.makeVList({positionType:"bottom",positionData:vSpan.depth+0.2+supSubGroup.height+supSubGroup.depth,children:[{type:"elem",elem:supSubGroup},{type:"kern",size:0.2},{type:"elem",elem:vSpan}]},options);}}return buildCommon.makeSpan(["mord",group.isOver?"mover":"munder"],[vlist],options);};var horizBrace_mathmlBuilder=function mathmlBuilder(group,options){var accentNode=stretchy.mathMLnode(group.label);return new mathMLTree.MathNode(group.isOver?"mover":"munder",[buildMathML_buildGroup(group.base,options),accentNode]);};// Horizontal stretchy braces
  defineFunction({type:"horizBrace",names:["\\overbrace","\\underbrace"],props:{numArgs:1},handler:function handler(_ref,args){var parser=_ref.parser,funcName=_ref.funcName;return {type:"horizBrace",mode:parser.mode,label:funcName,isOver:/^\\over/.test(funcName),base:args[0]};},htmlBuilder:horizBrace_htmlBuilder,mathmlBuilder:horizBrace_mathmlBuilder});defineFunction({type:"href",names:["\\href"],props:{numArgs:2,argTypes:["url","original"],allowedInText:true},handler:function handler(_ref,args){var parser=_ref.parser;var body=args[1];var href=assertNodeType(args[0],"url").url;if(!parser.settings.isTrusted({command:"\\href",url:href})){return parser.formatUnsupportedCmd("\\href");}return {type:"href",mode:parser.mode,href:href,body:ordargument(body)};},htmlBuilder:function htmlBuilder(group,options){var elements=buildExpression(group.body,options,false);return buildCommon.makeAnchor(group.href,[],elements,options);},mathmlBuilder:function mathmlBuilder(group,options){var math=buildExpressionRow(group.body,options);if(!(math instanceof MathNode)){math=new MathNode("mrow",[math]);}math.setAttribute("href",group.href);return math;}});defineFunction({type:"href",names:["\\url"],props:{numArgs:1,argTypes:["url"],allowedInText:true},handler:function handler(_ref2,args){var parser=_ref2.parser;var href=assertNodeType(args[0],"url").url;if(!parser.settings.isTrusted({command:"\\url",url:href})){return parser.formatUnsupportedCmd("\\url");}var chars=[];for(var i=0;i<href.length;i++){var c=href[i];if(c==="~"){c="\\textasciitilde";}chars.push({type:"textord",mode:"text",text:c});}var body={type:"text",mode:parser.mode,font:"\\texttt",body:chars};return {type:"href",mode:parser.mode,href:href,body:ordargument(body)};}});// \hbox is provided for compatibility with LaTeX \vcenter.
  // In LaTeX, \vcenter can act only on a box, as in
  // \vcenter{\hbox{$\frac{a+b}{\dfrac{c}{d}}$}}
  // This function by itself doesn't do anything but prevent a soft line break.
  defineFunction({type:"hbox",names:["\\hbox"],props:{numArgs:1,argTypes:["text"],allowedInText:true,primitive:true},handler:function handler(_ref,args){var parser=_ref.parser;return {type:"hbox",mode:parser.mode,body:ordargument(args[0])};},htmlBuilder:function htmlBuilder(group,options){var elements=buildExpression(group.body,options,false);return buildCommon.makeFragment(elements);},mathmlBuilder:function mathmlBuilder(group,options){return new mathMLTree.MathNode("mrow",buildMathML_buildExpression(group.body,options));}});defineFunction({type:"html",names:["\\htmlClass","\\htmlId","\\htmlStyle","\\htmlData"],props:{numArgs:2,argTypes:["raw","original"],allowedInText:true},handler:function handler(_ref,args){var parser=_ref.parser,funcName=_ref.funcName,token=_ref.token;var value=assertNodeType(args[0],"raw").string;var body=args[1];if(parser.settings.strict){parser.settings.reportNonstrict("htmlExtension","HTML extension is disabled on strict mode");}var trustContext;var attributes={};switch(funcName){case"\\htmlClass":attributes.class=value;trustContext={command:"\\htmlClass",class:value};break;case"\\htmlId":attributes.id=value;trustContext={command:"\\htmlId",id:value};break;case"\\htmlStyle":attributes.style=value;trustContext={command:"\\htmlStyle",style:value};break;case"\\htmlData":{var data=value.split(",");for(var i=0;i<data.length;i++){var keyVal=data[i].split("=");if(keyVal.length!==2){throw new src_ParseError("Error parsing key-value for \\htmlData");}attributes["data-"+keyVal[0].trim()]=keyVal[1].trim();}trustContext={command:"\\htmlData",attributes:attributes};break;}default:throw new Error("Unrecognized html command");}if(!parser.settings.isTrusted(trustContext)){return parser.formatUnsupportedCmd(funcName);}return {type:"html",mode:parser.mode,attributes:attributes,body:ordargument(body)};},htmlBuilder:function htmlBuilder(group,options){var elements=buildExpression(group.body,options,false);var classes=["enclosing"];if(group.attributes.class){classes.push.apply(classes,group.attributes.class.trim().split(/\s+/));}var span=buildCommon.makeSpan(classes,elements,options);for(var attr in group.attributes){if(attr!=="class"&&group.attributes.hasOwnProperty(attr)){span.setAttribute(attr,group.attributes[attr]);}}return span;},mathmlBuilder:function mathmlBuilder(group,options){return buildExpressionRow(group.body,options);}});defineFunction({type:"htmlmathml",names:["\\html@mathml"],props:{numArgs:2,allowedInText:true},handler:function handler(_ref,args){var parser=_ref.parser;return {type:"htmlmathml",mode:parser.mode,html:ordargument(args[0]),mathml:ordargument(args[1])};},htmlBuilder:function htmlBuilder(group,options){var elements=buildExpression(group.html,options,false);return buildCommon.makeFragment(elements);},mathmlBuilder:function mathmlBuilder(group,options){return buildExpressionRow(group.mathml,options);}});var sizeData=function sizeData(str){if(/^[-+]? *(\d+(\.\d*)?|\.\d+)$/.test(str)){// str is a number with no unit specified.
  // default unit is bp, per graphix package.
  return {number:+str,unit:"bp"};}else{var match=/([-+]?) *(\d+(?:\.\d*)?|\.\d+) *([a-z]{2})/.exec(str);if(!match){throw new src_ParseError("Invalid size: '"+str+"' in \\includegraphics");}var data={number:+(match[1]+match[2]),// sign + magnitude, cast to number
  unit:match[3]};if(!validUnit(data)){throw new src_ParseError("Invalid unit: '"+data.unit+"' in \\includegraphics.");}return data;}};defineFunction({type:"includegraphics",names:["\\includegraphics"],props:{numArgs:1,numOptionalArgs:1,argTypes:["raw","url"],allowedInText:false},handler:function handler(_ref,args,optArgs){var parser=_ref.parser;var width={number:0,unit:"em"};var height={number:0.9,unit:"em"};// sorta character sized.
  var totalheight={number:0,unit:"em"};var alt="";if(optArgs[0]){var attributeStr=assertNodeType(optArgs[0],"raw").string;// Parser.js does not parse key/value pairs. We get a string.
  var attributes=attributeStr.split(",");for(var i=0;i<attributes.length;i++){var keyVal=attributes[i].split("=");if(keyVal.length===2){var str=keyVal[1].trim();switch(keyVal[0].trim()){case"alt":alt=str;break;case"width":width=sizeData(str);break;case"height":height=sizeData(str);break;case"totalheight":totalheight=sizeData(str);break;default:throw new src_ParseError("Invalid key: '"+keyVal[0]+"' in \\includegraphics.");}}}}var src=assertNodeType(args[0],"url").url;if(alt===""){// No alt given. Use the file name. Strip away the path.
  alt=src;alt=alt.replace(/^.*[\\/]/,'');alt=alt.substring(0,alt.lastIndexOf('.'));}if(!parser.settings.isTrusted({command:"\\includegraphics",url:src})){return parser.formatUnsupportedCmd("\\includegraphics");}return {type:"includegraphics",mode:parser.mode,alt:alt,width:width,height:height,totalheight:totalheight,src:src};},htmlBuilder:function htmlBuilder(group,options){var height=calculateSize(group.height,options);var depth=0;if(group.totalheight.number>0){depth=calculateSize(group.totalheight,options)-height;depth=Number(depth.toFixed(2));}var width=0;if(group.width.number>0){width=calculateSize(group.width,options);}var style={height:height+depth+"em"};if(width>0){style.width=width+"em";}if(depth>0){style.verticalAlign=-depth+"em";}var node=new Img(group.src,group.alt,style);node.height=height;node.depth=depth;return node;},mathmlBuilder:function mathmlBuilder(group,options){var node=new mathMLTree.MathNode("mglyph",[]);node.setAttribute("alt",group.alt);var height=calculateSize(group.height,options);var depth=0;if(group.totalheight.number>0){depth=calculateSize(group.totalheight,options)-height;depth=depth.toFixed(2);node.setAttribute("valign","-"+depth+"em");}node.setAttribute("height",height+depth+"em");if(group.width.number>0){var width=calculateSize(group.width,options);node.setAttribute("width",width+"em");}node.setAttribute("src",group.src);return node;}});// Horizontal spacing commands
  // TODO: \hskip and \mskip should support plus and minus in lengths
  defineFunction({type:"kern",names:["\\kern","\\mkern","\\hskip","\\mskip"],props:{numArgs:1,argTypes:["size"],primitive:true,allowedInText:true},handler:function handler(_ref,args){var parser=_ref.parser,funcName=_ref.funcName;var size=assertNodeType(args[0],"size");if(parser.settings.strict){var mathFunction=funcName[1]==='m';// \mkern, \mskip
  var muUnit=size.value.unit==='mu';if(mathFunction){if(!muUnit){parser.settings.reportNonstrict("mathVsTextUnits","LaTeX's "+funcName+" supports only mu units, "+("not "+size.value.unit+" units"));}if(parser.mode!=="math"){parser.settings.reportNonstrict("mathVsTextUnits","LaTeX's "+funcName+" works only in math mode");}}else{// !mathFunction
  if(muUnit){parser.settings.reportNonstrict("mathVsTextUnits","LaTeX's "+funcName+" doesn't support mu units");}}}return {type:"kern",mode:parser.mode,dimension:size.value};},htmlBuilder:function htmlBuilder(group,options){return buildCommon.makeGlue(group.dimension,options);},mathmlBuilder:function mathmlBuilder(group,options){var dimension=calculateSize(group.dimension,options);return new mathMLTree.SpaceNode(dimension);}});// Horizontal overlap functions
  defineFunction({type:"lap",names:["\\mathllap","\\mathrlap","\\mathclap"],props:{numArgs:1,allowedInText:true},handler:function handler(_ref,args){var parser=_ref.parser,funcName=_ref.funcName;var body=args[0];return {type:"lap",mode:parser.mode,alignment:funcName.slice(5),body:body};},htmlBuilder:function htmlBuilder(group,options){// mathllap, mathrlap, mathclap
  var inner;if(group.alignment==="clap"){// ref: https://www.math.lsu.edu/~aperlis/publications/mathclap/
  inner=buildCommon.makeSpan([],[buildGroup(group.body,options)]);// wrap, since CSS will center a .clap > .inner > span
  inner=buildCommon.makeSpan(["inner"],[inner],options);}else{inner=buildCommon.makeSpan(["inner"],[buildGroup(group.body,options)]);}var fix=buildCommon.makeSpan(["fix"],[]);var node=buildCommon.makeSpan([group.alignment],[inner,fix],options);// At this point, we have correctly set horizontal alignment of the
  // two items involved in the lap.
  // Next, use a strut to set the height of the HTML bounding box.
  // Otherwise, a tall argument may be misplaced.
  // This code resolved issue #1153
  var strut=buildCommon.makeSpan(["strut"]);strut.style.height=node.height+node.depth+"em";strut.style.verticalAlign=-node.depth+"em";node.children.unshift(strut);// Next, prevent vertical misplacement when next to something tall.
  // This code resolves issue #1234
  node=buildCommon.makeSpan(["thinbox"],[node],options);return buildCommon.makeSpan(["mord","vbox"],[node],options);},mathmlBuilder:function mathmlBuilder(group,options){// mathllap, mathrlap, mathclap
  var node=new mathMLTree.MathNode("mpadded",[buildMathML_buildGroup(group.body,options)]);if(group.alignment!=="rlap"){var offset=group.alignment==="llap"?"-1":"-0.5";node.setAttribute("lspace",offset+"width");}node.setAttribute("width","0px");return node;}});// Switching from text mode back to math mode
  defineFunction({type:"styling",names:["\\(","$"],props:{numArgs:0,allowedInText:true,allowedInMath:false},handler:function handler(_ref,args){var funcName=_ref.funcName,parser=_ref.parser;var outerMode=parser.mode;parser.switchMode("math");var close=funcName==="\\("?"\\)":"$";var body=parser.parseExpression(false,close);parser.expect(close);parser.switchMode(outerMode);return {type:"styling",mode:parser.mode,style:"text",body:body};}});// Check for extra closing math delimiters
  defineFunction({type:"text",// Doesn't matter what this is.
  names:["\\)","\\]"],props:{numArgs:0,allowedInText:true,allowedInMath:false},handler:function handler(context,args){throw new src_ParseError("Mismatched "+context.funcName);}});var chooseMathStyle=function chooseMathStyle(group,options){switch(options.style.size){case src_Style.DISPLAY.size:return group.display;case src_Style.TEXT.size:return group.text;case src_Style.SCRIPT.size:return group.script;case src_Style.SCRIPTSCRIPT.size:return group.scriptscript;default:return group.text;}};defineFunction({type:"mathchoice",names:["\\mathchoice"],props:{numArgs:4,primitive:true},handler:function handler(_ref,args){var parser=_ref.parser;return {type:"mathchoice",mode:parser.mode,display:ordargument(args[0]),text:ordargument(args[1]),script:ordargument(args[2]),scriptscript:ordargument(args[3])};},htmlBuilder:function htmlBuilder(group,options){var body=chooseMathStyle(group,options);var elements=buildExpression(body,options,false);return buildCommon.makeFragment(elements);},mathmlBuilder:function mathmlBuilder(group,options){var body=chooseMathStyle(group,options);return buildExpressionRow(body,options);}});// For an operator with limits, assemble the base, sup, and sub into a span.
  var assembleSupSub=function assembleSupSub(base,supGroup,subGroup,options,style,slant,baseShift){base=buildCommon.makeSpan([],[base]);var subIsSingleCharacter=subGroup&&utils.isCharacterBox(subGroup);var sub;var sup;// We manually have to handle the superscripts and subscripts. This,
  // aside from the kern calculations, is copied from supsub.
  if(supGroup){var elem=buildGroup(supGroup,options.havingStyle(style.sup()),options);sup={elem:elem,kern:Math.max(options.fontMetrics().bigOpSpacing1,options.fontMetrics().bigOpSpacing3-elem.depth)};}if(subGroup){var _elem=buildGroup(subGroup,options.havingStyle(style.sub()),options);sub={elem:_elem,kern:Math.max(options.fontMetrics().bigOpSpacing2,options.fontMetrics().bigOpSpacing4-_elem.height)};}// Build the final group as a vlist of the possible subscript, base,
  // and possible superscript.
  var finalGroup;if(sup&&sub){var bottom=options.fontMetrics().bigOpSpacing5+sub.elem.height+sub.elem.depth+sub.kern+base.depth+baseShift;finalGroup=buildCommon.makeVList({positionType:"bottom",positionData:bottom,children:[{type:"kern",size:options.fontMetrics().bigOpSpacing5},{type:"elem",elem:sub.elem,marginLeft:-slant+"em"},{type:"kern",size:sub.kern},{type:"elem",elem:base},{type:"kern",size:sup.kern},{type:"elem",elem:sup.elem,marginLeft:slant+"em"},{type:"kern",size:options.fontMetrics().bigOpSpacing5}]},options);}else if(sub){var top=base.height-baseShift;// Shift the limits by the slant of the symbol. Note
  // that we are supposed to shift the limits by 1/2 of the slant,
  // but since we are centering the limits adding a full slant of
  // margin will shift by 1/2 that.
  finalGroup=buildCommon.makeVList({positionType:"top",positionData:top,children:[{type:"kern",size:options.fontMetrics().bigOpSpacing5},{type:"elem",elem:sub.elem,marginLeft:-slant+"em"},{type:"kern",size:sub.kern},{type:"elem",elem:base}]},options);}else if(sup){var _bottom=base.depth+baseShift;finalGroup=buildCommon.makeVList({positionType:"bottom",positionData:_bottom,children:[{type:"elem",elem:base},{type:"kern",size:sup.kern},{type:"elem",elem:sup.elem,marginLeft:slant+"em"},{type:"kern",size:options.fontMetrics().bigOpSpacing5}]},options);}else{// This case probably shouldn't occur (this would mean the
  // supsub was sending us a group with no superscript or
  // subscript) but be safe.
  return base;}var parts=[finalGroup];if(sub&&slant!==0&&!subIsSingleCharacter){// A negative margin-left was applied to the lower limit.
  // Avoid an overlap by placing a spacer on the left on the group.
  var spacer=buildCommon.makeSpan(["mspace"],[],options);spacer.style.marginRight=slant+"em";parts.unshift(spacer);}return buildCommon.makeSpan(["mop","op-limits"],parts,options);};// Limits, symbols
  // Most operators have a large successor symbol, but these don't.
  var noSuccessor=["\\smallint"];// NOTE: Unlike most `htmlBuilder`s, this one handles not only "op", but also
  // "supsub" since some of them (like \int) can affect super/subscripting.
  var op_htmlBuilder=function htmlBuilder(grp,options){// Operators are handled in the TeXbook pg. 443-444, rule 13(a).
  var supGroup;var subGroup;var hasLimits=false;var group;if(grp.type==="supsub"){// If we have limits, supsub will pass us its group to handle. Pull
  // out the superscript and subscript and set the group to the op in
  // its base.
  supGroup=grp.sup;subGroup=grp.sub;group=assertNodeType(grp.base,"op");hasLimits=true;}else{group=assertNodeType(grp,"op");}var style=options.style;var large=false;if(style.size===src_Style.DISPLAY.size&&group.symbol&&!utils.contains(noSuccessor,group.name)){// Most symbol operators get larger in displaystyle (rule 13)
  large=true;}var base;if(group.symbol){// If this is a symbol, create the symbol.
  var fontName=large?"Size2-Regular":"Size1-Regular";var stash="";if(group.name==="\\oiint"||group.name==="\\oiiint"){// No font glyphs yet, so use a glyph w/o the oval.
  // TODO: When font glyphs are available, delete this code.
  stash=group.name.substr(1);group.name=stash==="oiint"?"\\iint":"\\iiint";}base=buildCommon.makeSymbol(group.name,fontName,"math",options,["mop","op-symbol",large?"large-op":"small-op"]);if(stash.length>0){// We're in \oiint or \oiiint. Overlay the oval.
  // TODO: When font glyphs are available, delete this code.
  var italic=base.italic;var oval=buildCommon.staticSvg(stash+"Size"+(large?"2":"1"),options);base=buildCommon.makeVList({positionType:"individualShift",children:[{type:"elem",elem:base,shift:0},{type:"elem",elem:oval,shift:large?0.08:0}]},options);group.name="\\"+stash;base.classes.unshift("mop");// $FlowFixMe
  base.italic=italic;}}else if(group.body){// If this is a list, compose that list.
  var inner=buildExpression(group.body,options,true);if(inner.length===1&&inner[0]instanceof SymbolNode){base=inner[0];base.classes[0]="mop";// replace old mclass
  }else{base=buildCommon.makeSpan(["mop"],inner,options);}}else{// Otherwise, this is a text operator. Build the text from the
  // operator's name.
  var output=[];for(var i=1;i<group.name.length;i++){output.push(buildCommon.mathsym(group.name[i],group.mode,options));}base=buildCommon.makeSpan(["mop"],output,options);}// If content of op is a single symbol, shift it vertically.
  var baseShift=0;var slant=0;if((base instanceof SymbolNode||group.name==="\\oiint"||group.name==="\\oiiint")&&!group.suppressBaseShift){// We suppress the shift of the base of \overset and \underset. Otherwise,
  // shift the symbol so its center lies on the axis (rule 13). It
  // appears that our fonts have the centers of the symbols already
  // almost on the axis, so these numbers are very small. Note we
  // don't actually apply this here, but instead it is used either in
  // the vlist creation or separately when there are no limits.
  baseShift=(base.height-base.depth)/2-options.fontMetrics().axisHeight;// The slant of the symbol is just its italic correction.
  // $FlowFixMe
  slant=base.italic;}if(hasLimits){return assembleSupSub(base,supGroup,subGroup,options,style,slant,baseShift);}else{if(baseShift){base.style.position="relative";base.style.top=baseShift+"em";}return base;}};var op_mathmlBuilder=function mathmlBuilder(group,options){var node;if(group.symbol){// This is a symbol. Just add the symbol.
  node=new MathNode("mo",[makeText(group.name,group.mode)]);if(utils.contains(noSuccessor,group.name)){node.setAttribute("largeop","false");}}else if(group.body){// This is an operator with children. Add them.
  node=new MathNode("mo",buildMathML_buildExpression(group.body,options));}else{// This is a text operator. Add all of the characters from the
  // operator's name.
  node=new MathNode("mi",[new TextNode(group.name.slice(1))]);// Append an <mo>&ApplyFunction;</mo>.
  // ref: https://www.w3.org/TR/REC-MathML/chap3_2.html#sec3.2.4
  var operator=new MathNode("mo",[makeText("\u2061","text")]);if(group.parentIsSupSub){node=new MathNode("mrow",[node,operator]);}else{node=newDocumentFragment([node,operator]);}}return node;};var singleCharBigOps={"\u220F":"\\prod","\u2210":"\\coprod","\u2211":"\\sum","\u22C0":"\\bigwedge","\u22C1":"\\bigvee","\u22C2":"\\bigcap","\u22C3":"\\bigcup","\u2A00":"\\bigodot","\u2A01":"\\bigoplus","\u2A02":"\\bigotimes","\u2A04":"\\biguplus","\u2A06":"\\bigsqcup"};defineFunction({type:"op",names:["\\coprod","\\bigvee","\\bigwedge","\\biguplus","\\bigcap","\\bigcup","\\intop","\\prod","\\sum","\\bigotimes","\\bigoplus","\\bigodot","\\bigsqcup","\\smallint","\u220F","\u2210","\u2211","\u22C0","\u22C1","\u22C2","\u22C3","\u2A00","\u2A01","\u2A02","\u2A04","\u2A06"],props:{numArgs:0},handler:function handler(_ref,args){var parser=_ref.parser,funcName=_ref.funcName;var fName=funcName;if(fName.length===1){fName=singleCharBigOps[fName];}return {type:"op",mode:parser.mode,limits:true,parentIsSupSub:false,symbol:true,name:fName};},htmlBuilder:op_htmlBuilder,mathmlBuilder:op_mathmlBuilder});// Note: calling defineFunction with a type that's already been defined only
  // works because the same htmlBuilder and mathmlBuilder are being used.
  defineFunction({type:"op",names:["\\mathop"],props:{numArgs:1,primitive:true},handler:function handler(_ref2,args){var parser=_ref2.parser;var body=args[0];return {type:"op",mode:parser.mode,limits:false,parentIsSupSub:false,symbol:false,body:ordargument(body)};},htmlBuilder:op_htmlBuilder,mathmlBuilder:op_mathmlBuilder});// There are 2 flags for operators; whether they produce limits in
  // displaystyle, and whether they are symbols and should grow in
  // displaystyle. These four groups cover the four possible choices.
  var singleCharIntegrals={"\u222B":"\\int","\u222C":"\\iint","\u222D":"\\iiint","\u222E":"\\oint","\u222F":"\\oiint","\u2230":"\\oiiint"};// No limits, not symbols
  defineFunction({type:"op",names:["\\arcsin","\\arccos","\\arctan","\\arctg","\\arcctg","\\arg","\\ch","\\cos","\\cosec","\\cosh","\\cot","\\cotg","\\coth","\\csc","\\ctg","\\cth","\\deg","\\dim","\\exp","\\hom","\\ker","\\lg","\\ln","\\log","\\sec","\\sin","\\sinh","\\sh","\\tan","\\tanh","\\tg","\\th"],props:{numArgs:0},handler:function handler(_ref3){var parser=_ref3.parser,funcName=_ref3.funcName;return {type:"op",mode:parser.mode,limits:false,parentIsSupSub:false,symbol:false,name:funcName};},htmlBuilder:op_htmlBuilder,mathmlBuilder:op_mathmlBuilder});// Limits, not symbols
  defineFunction({type:"op",names:["\\det","\\gcd","\\inf","\\lim","\\max","\\min","\\Pr","\\sup"],props:{numArgs:0},handler:function handler(_ref4){var parser=_ref4.parser,funcName=_ref4.funcName;return {type:"op",mode:parser.mode,limits:true,parentIsSupSub:false,symbol:false,name:funcName};},htmlBuilder:op_htmlBuilder,mathmlBuilder:op_mathmlBuilder});// No limits, symbols
  defineFunction({type:"op",names:["\\int","\\iint","\\iiint","\\oint","\\oiint","\\oiiint","\u222B","\u222C","\u222D","\u222E","\u222F","\u2230"],props:{numArgs:0},handler:function handler(_ref5){var parser=_ref5.parser,funcName=_ref5.funcName;var fName=funcName;if(fName.length===1){fName=singleCharIntegrals[fName];}return {type:"op",mode:parser.mode,limits:false,parentIsSupSub:false,symbol:true,name:fName};},htmlBuilder:op_htmlBuilder,mathmlBuilder:op_mathmlBuilder});/**
       * All registered global/built-in macros.
       * `macros.js` exports this same dictionary again and makes it public.
       * `Parser.js` requires this dictionary via `macros.js`.
       */var _macros={};// This function might one day accept an additional argument and do more things.
  function defineMacro(name,body){_macros[name]=body;}// NOTE: Unlike most `htmlBuilder`s, this one handles not only
  // "operatorname", but also  "supsub" since \operatorname* can
  // affect super/subscripting.
  var operatorname_htmlBuilder=function htmlBuilder(grp,options){// Operators are handled in the TeXbook pg. 443-444, rule 13(a).
  var supGroup;var subGroup;var hasLimits=false;var group;if(grp.type==="supsub"){// If we have limits, supsub will pass us its group to handle. Pull
  // out the superscript and subscript and set the group to the op in
  // its base.
  supGroup=grp.sup;subGroup=grp.sub;group=assertNodeType(grp.base,"operatorname");hasLimits=true;}else{group=assertNodeType(grp,"operatorname");}var base;if(group.body.length>0){var body=group.body.map(function(child){// $FlowFixMe: Check if the node has a string `text` property.
  var childText=child.text;if(typeof childText==="string"){return {type:"textord",mode:child.mode,text:childText};}else{return child;}});// Consolidate function names into symbol characters.
  var expression=buildExpression(body,options.withFont("mathrm"),true);for(var i=0;i<expression.length;i++){var child=expression[i];if(child instanceof SymbolNode){// Per amsopn package,
  // change minus to hyphen and \ast to asterisk
  child.text=child.text.replace(/\u2212/,"-").replace(/\u2217/,"*");}}base=buildCommon.makeSpan(["mop"],expression,options);}else{base=buildCommon.makeSpan(["mop"],[],options);}if(hasLimits){return assembleSupSub(base,supGroup,subGroup,options,options.style,0,0);}else{return base;}};var operatorname_mathmlBuilder=function mathmlBuilder(group,options){// The steps taken here are similar to the html version.
  var expression=buildMathML_buildExpression(group.body,options.withFont("mathrm"));// Is expression a string or has it something like a fraction?
  var isAllString=true;// default
  for(var i=0;i<expression.length;i++){var node=expression[i];if(node instanceof mathMLTree.SpaceNode);else if(node instanceof mathMLTree.MathNode){switch(node.type){case"mi":case"mn":case"ms":case"mspace":case"mtext":break;// Do nothing yet.
  case"mo":{var child=node.children[0];if(node.children.length===1&&child instanceof mathMLTree.TextNode){child.text=child.text.replace(/\u2212/,"-").replace(/\u2217/,"*");}else{isAllString=false;}break;}default:isAllString=false;}}else{isAllString=false;}}if(isAllString){// Write a single TextNode instead of multiple nested tags.
  var word=expression.map(function(node){return node.toText();}).join("");expression=[new mathMLTree.TextNode(word)];}var identifier=new mathMLTree.MathNode("mi",expression);identifier.setAttribute("mathvariant","normal");// \u2061 is the same as &ApplyFunction;
  // ref: https://www.w3schools.com/charsets/ref_html_entities_a.asp
  var operator=new mathMLTree.MathNode("mo",[makeText("\u2061","text")]);if(group.parentIsSupSub){return new mathMLTree.MathNode("mrow",[identifier,operator]);}else{return mathMLTree.newDocumentFragment([identifier,operator]);}};// \operatorname
  // amsopn.dtx: \mathop{#1\kern\z@\operator@font#3}\newmcodes@
  defineFunction({type:"operatorname",names:["\\operatorname@","\\operatornamewithlimits"],props:{numArgs:1},handler:function handler(_ref,args){var parser=_ref.parser,funcName=_ref.funcName;var body=args[0];return {type:"operatorname",mode:parser.mode,body:ordargument(body),alwaysHandleSupSub:funcName==="\\operatornamewithlimits",limits:false,parentIsSupSub:false};},htmlBuilder:operatorname_htmlBuilder,mathmlBuilder:operatorname_mathmlBuilder});defineMacro("\\operatorname","\\@ifstar\\operatornamewithlimits\\operatorname@");defineFunctionBuilders({type:"ordgroup",htmlBuilder:function htmlBuilder(group,options){if(group.semisimple){return buildCommon.makeFragment(buildExpression(group.body,options,false));}return buildCommon.makeSpan(["mord"],buildExpression(group.body,options,true),options);},mathmlBuilder:function mathmlBuilder(group,options){return buildExpressionRow(group.body,options,true);}});defineFunction({type:"overline",names:["\\overline"],props:{numArgs:1},handler:function handler(_ref,args){var parser=_ref.parser;var body=args[0];return {type:"overline",mode:parser.mode,body:body};},htmlBuilder:function htmlBuilder(group,options){// Overlines are handled in the TeXbook pg 443, Rule 9.
  // Build the inner group in the cramped style.
  var innerGroup=buildGroup(group.body,options.havingCrampedStyle());// Create the line above the body
  var line=buildCommon.makeLineSpan("overline-line",options);// Generate the vlist, with the appropriate kerns
  var defaultRuleThickness=options.fontMetrics().defaultRuleThickness;var vlist=buildCommon.makeVList({positionType:"firstBaseline",children:[{type:"elem",elem:innerGroup},{type:"kern",size:3*defaultRuleThickness},{type:"elem",elem:line},{type:"kern",size:defaultRuleThickness}]},options);return buildCommon.makeSpan(["mord","overline"],[vlist],options);},mathmlBuilder:function mathmlBuilder(group,options){var operator=new mathMLTree.MathNode("mo",[new mathMLTree.TextNode("\u203E")]);operator.setAttribute("stretchy","true");var node=new mathMLTree.MathNode("mover",[buildMathML_buildGroup(group.body,options),operator]);node.setAttribute("accent","true");return node;}});defineFunction({type:"phantom",names:["\\phantom"],props:{numArgs:1,allowedInText:true},handler:function handler(_ref,args){var parser=_ref.parser;var body=args[0];return {type:"phantom",mode:parser.mode,body:ordargument(body)};},htmlBuilder:function htmlBuilder(group,options){var elements=buildExpression(group.body,options.withPhantom(),false);// \phantom isn't supposed to affect the elements it contains.
  // See "color" for more details.
  return buildCommon.makeFragment(elements);},mathmlBuilder:function mathmlBuilder(group,options){var inner=buildMathML_buildExpression(group.body,options);return new mathMLTree.MathNode("mphantom",inner);}});defineFunction({type:"hphantom",names:["\\hphantom"],props:{numArgs:1,allowedInText:true},handler:function handler(_ref2,args){var parser=_ref2.parser;var body=args[0];return {type:"hphantom",mode:parser.mode,body:body};},htmlBuilder:function htmlBuilder(group,options){var node=buildCommon.makeSpan([],[buildGroup(group.body,options.withPhantom())]);node.height=0;node.depth=0;if(node.children){for(var i=0;i<node.children.length;i++){node.children[i].height=0;node.children[i].depth=0;}}// See smash for comment re: use of makeVList
  node=buildCommon.makeVList({positionType:"firstBaseline",children:[{type:"elem",elem:node}]},options);// For spacing, TeX treats \smash as a math group (same spacing as ord).
  return buildCommon.makeSpan(["mord"],[node],options);},mathmlBuilder:function mathmlBuilder(group,options){var inner=buildMathML_buildExpression(ordargument(group.body),options);var phantom=new mathMLTree.MathNode("mphantom",inner);var node=new mathMLTree.MathNode("mpadded",[phantom]);node.setAttribute("height","0px");node.setAttribute("depth","0px");return node;}});defineFunction({type:"vphantom",names:["\\vphantom"],props:{numArgs:1,allowedInText:true},handler:function handler(_ref3,args){var parser=_ref3.parser;var body=args[0];return {type:"vphantom",mode:parser.mode,body:body};},htmlBuilder:function htmlBuilder(group,options){var inner=buildCommon.makeSpan(["inner"],[buildGroup(group.body,options.withPhantom())]);var fix=buildCommon.makeSpan(["fix"],[]);return buildCommon.makeSpan(["mord","rlap"],[inner,fix],options);},mathmlBuilder:function mathmlBuilder(group,options){var inner=buildMathML_buildExpression(ordargument(group.body),options);var phantom=new mathMLTree.MathNode("mphantom",inner);var node=new mathMLTree.MathNode("mpadded",[phantom]);node.setAttribute("width","0px");return node;}});// Box manipulation
  defineFunction({type:"raisebox",names:["\\raisebox"],props:{numArgs:2,argTypes:["size","hbox"],allowedInText:true},handler:function handler(_ref,args){var parser=_ref.parser;var amount=assertNodeType(args[0],"size").value;var body=args[1];return {type:"raisebox",mode:parser.mode,dy:amount,body:body};},htmlBuilder:function htmlBuilder(group,options){var body=buildGroup(group.body,options);var dy=calculateSize(group.dy,options);return buildCommon.makeVList({positionType:"shift",positionData:-dy,children:[{type:"elem",elem:body}]},options);},mathmlBuilder:function mathmlBuilder(group,options){var node=new mathMLTree.MathNode("mpadded",[buildMathML_buildGroup(group.body,options)]);var dy=group.dy.number+group.dy.unit;node.setAttribute("voffset",dy);return node;}});defineFunction({type:"rule",names:["\\rule"],props:{numArgs:2,numOptionalArgs:1,argTypes:["size","size","size"]},handler:function handler(_ref,args,optArgs){var parser=_ref.parser;var shift=optArgs[0];var width=assertNodeType(args[0],"size");var height=assertNodeType(args[1],"size");return {type:"rule",mode:parser.mode,shift:shift&&assertNodeType(shift,"size").value,width:width.value,height:height.value};},htmlBuilder:function htmlBuilder(group,options){// Make an empty span for the rule
  var rule=buildCommon.makeSpan(["mord","rule"],[],options);// Calculate the shift, width, and height of the rule, and account for units
  var width=calculateSize(group.width,options);var height=calculateSize(group.height,options);var shift=group.shift?calculateSize(group.shift,options):0;// Style the rule to the right size
  rule.style.borderRightWidth=width+"em";rule.style.borderTopWidth=height+"em";rule.style.bottom=shift+"em";// Record the height and width
  rule.width=width;rule.height=height+shift;rule.depth=-shift;// Font size is the number large enough that the browser will
  // reserve at least `absHeight` space above the baseline.
  // The 1.125 factor was empirically determined
  rule.maxFontSize=height*1.125*options.sizeMultiplier;return rule;},mathmlBuilder:function mathmlBuilder(group,options){var width=calculateSize(group.width,options);var height=calculateSize(group.height,options);var shift=group.shift?calculateSize(group.shift,options):0;var color=options.color&&options.getColor()||"black";var rule=new mathMLTree.MathNode("mspace");rule.setAttribute("mathbackground",color);rule.setAttribute("width",width+"em");rule.setAttribute("height",height+"em");var wrapper=new mathMLTree.MathNode("mpadded",[rule]);if(shift>=0){wrapper.setAttribute("height","+"+shift+"em");}else{wrapper.setAttribute("height",shift+"em");wrapper.setAttribute("depth","+"+-shift+"em");}wrapper.setAttribute("voffset",shift+"em");return wrapper;}});function sizingGroup(value,options,baseOptions){var inner=buildExpression(value,options,false);var multiplier=options.sizeMultiplier/baseOptions.sizeMultiplier;// Add size-resetting classes to the inner list and set maxFontSize
  // manually. Handle nested size changes.
  for(var i=0;i<inner.length;i++){var pos=inner[i].classes.indexOf("sizing");if(pos<0){Array.prototype.push.apply(inner[i].classes,options.sizingClasses(baseOptions));}else if(inner[i].classes[pos+1]==="reset-size"+options.size){// This is a nested size change: e.g., inner[i] is the "b" in
  // `\Huge a \small b`. Override the old size (the `reset-` class)
  // but not the new size.
  inner[i].classes[pos+1]="reset-size"+baseOptions.size;}inner[i].height*=multiplier;inner[i].depth*=multiplier;}return buildCommon.makeFragment(inner);}var sizeFuncs=["\\tiny","\\sixptsize","\\scriptsize","\\footnotesize","\\small","\\normalsize","\\large","\\Large","\\LARGE","\\huge","\\Huge"];var sizing_htmlBuilder=function htmlBuilder(group,options){// Handle sizing operators like \Huge. Real TeX doesn't actually allow
  // these functions inside of math expressions, so we do some special
  // handling.
  var newOptions=options.havingSize(group.size);return sizingGroup(group.body,newOptions,options);};defineFunction({type:"sizing",names:sizeFuncs,props:{numArgs:0,allowedInText:true},handler:function handler(_ref,args){var breakOnTokenText=_ref.breakOnTokenText,funcName=_ref.funcName,parser=_ref.parser;var body=parser.parseExpression(false,breakOnTokenText);return {type:"sizing",mode:parser.mode,// Figure out what size to use based on the list of functions above
  size:sizeFuncs.indexOf(funcName)+1,body:body};},htmlBuilder:sizing_htmlBuilder,mathmlBuilder:function mathmlBuilder(group,options){var newOptions=options.havingSize(group.size);var inner=buildMathML_buildExpression(group.body,newOptions);var node=new mathMLTree.MathNode("mstyle",inner);// TODO(emily): This doesn't produce the correct size for nested size
  // changes, because we don't keep state of what style we're currently
  // in, so we can't reset the size to normal before changing it.  Now
  // that we're passing an options parameter we should be able to fix
  // this.
  node.setAttribute("mathsize",newOptions.sizeMultiplier+"em");return node;}});// smash, with optional [tb], as in AMS
  defineFunction({type:"smash",names:["\\smash"],props:{numArgs:1,numOptionalArgs:1,allowedInText:true},handler:function handler(_ref,args,optArgs){var parser=_ref.parser;var smashHeight=false;var smashDepth=false;var tbArg=optArgs[0]&&assertNodeType(optArgs[0],"ordgroup");if(tbArg){// Optional [tb] argument is engaged.
  // ref: amsmath: \renewcommand{\smash}[1][tb]{%
  //               def\mb@t{\ht}\def\mb@b{\dp}\def\mb@tb{\ht\z@\z@\dp}%
  var letter="";for(var i=0;i<tbArg.body.length;++i){var node=tbArg.body[i];// $FlowFixMe: Not every node type has a `text` property.
  letter=node.text;if(letter==="t"){smashHeight=true;}else if(letter==="b"){smashDepth=true;}else{smashHeight=false;smashDepth=false;break;}}}else{smashHeight=true;smashDepth=true;}var body=args[0];return {type:"smash",mode:parser.mode,body:body,smashHeight:smashHeight,smashDepth:smashDepth};},htmlBuilder:function htmlBuilder(group,options){var node=buildCommon.makeSpan([],[buildGroup(group.body,options)]);if(!group.smashHeight&&!group.smashDepth){return node;}if(group.smashHeight){node.height=0;// In order to influence makeVList, we have to reset the children.
  if(node.children){for(var i=0;i<node.children.length;i++){node.children[i].height=0;}}}if(group.smashDepth){node.depth=0;if(node.children){for(var _i=0;_i<node.children.length;_i++){node.children[_i].depth=0;}}}// At this point, we've reset the TeX-like height and depth values.
  // But the span still has an HTML line height.
  // makeVList applies "display: table-cell", which prevents the browser
  // from acting on that line height. So we'll call makeVList now.
  var smashedNode=buildCommon.makeVList({positionType:"firstBaseline",children:[{type:"elem",elem:node}]},options);// For spacing, TeX treats \hphantom as a math group (same spacing as ord).
  return buildCommon.makeSpan(["mord"],[smashedNode],options);},mathmlBuilder:function mathmlBuilder(group,options){var node=new mathMLTree.MathNode("mpadded",[buildMathML_buildGroup(group.body,options)]);if(group.smashHeight){node.setAttribute("height","0px");}if(group.smashDepth){node.setAttribute("depth","0px");}return node;}});defineFunction({type:"sqrt",names:["\\sqrt"],props:{numArgs:1,numOptionalArgs:1},handler:function handler(_ref,args,optArgs){var parser=_ref.parser;var index=optArgs[0];var body=args[0];return {type:"sqrt",mode:parser.mode,body:body,index:index};},htmlBuilder:function htmlBuilder(group,options){// Square roots are handled in the TeXbook pg. 443, Rule 11.
  // First, we do the same steps as in overline to build the inner group
  // and line
  var inner=buildGroup(group.body,options.havingCrampedStyle());if(inner.height===0){// Render a small surd.
  inner.height=options.fontMetrics().xHeight;}// Some groups can return document fragments.  Handle those by wrapping
  // them in a span.
  inner=buildCommon.wrapFragment(inner,options);// Calculate the minimum size for the \surd delimiter
  var metrics=options.fontMetrics();var theta=metrics.defaultRuleThickness;var phi=theta;if(options.style.id<src_Style.TEXT.id){phi=options.fontMetrics().xHeight;}// Calculate the clearance between the body and line
  var lineClearance=theta+phi/4;var minDelimiterHeight=inner.height+inner.depth+lineClearance+theta;// Create a sqrt SVG of the required minimum size
  var _delimiter$sqrtImage=delimiter.sqrtImage(minDelimiterHeight,options),img=_delimiter$sqrtImage.span,ruleWidth=_delimiter$sqrtImage.ruleWidth,advanceWidth=_delimiter$sqrtImage.advanceWidth;var delimDepth=img.height-ruleWidth;// Adjust the clearance based on the delimiter size
  if(delimDepth>inner.height+inner.depth+lineClearance){lineClearance=(lineClearance+delimDepth-inner.height-inner.depth)/2;}// Shift the sqrt image
  var imgShift=img.height-inner.height-lineClearance-ruleWidth;inner.style.paddingLeft=advanceWidth+"em";// Overlay the image and the argument.
  var body=buildCommon.makeVList({positionType:"firstBaseline",children:[{type:"elem",elem:inner,wrapperClasses:["svg-align"]},{type:"kern",size:-(inner.height+imgShift)},{type:"elem",elem:img},{type:"kern",size:ruleWidth}]},options);if(!group.index){return buildCommon.makeSpan(["mord","sqrt"],[body],options);}else{// Handle the optional root index
  // The index is always in scriptscript style
  var newOptions=options.havingStyle(src_Style.SCRIPTSCRIPT);var rootm=buildGroup(group.index,newOptions,options);// The amount the index is shifted by. This is taken from the TeX
  // source, in the definition of `\r@@t`.
  var toShift=0.6*(body.height-body.depth);// Build a VList with the superscript shifted up correctly
  var rootVList=buildCommon.makeVList({positionType:"shift",positionData:-toShift,children:[{type:"elem",elem:rootm}]},options);// Add a class surrounding it so we can add on the appropriate
  // kerning
  var rootVListWrap=buildCommon.makeSpan(["root"],[rootVList]);return buildCommon.makeSpan(["mord","sqrt"],[rootVListWrap,body],options);}},mathmlBuilder:function mathmlBuilder(group,options){var body=group.body,index=group.index;return index?new mathMLTree.MathNode("mroot",[buildMathML_buildGroup(body,options),buildMathML_buildGroup(index,options)]):new mathMLTree.MathNode("msqrt",[buildMathML_buildGroup(body,options)]);}});var styling_styleMap={"display":src_Style.DISPLAY,"text":src_Style.TEXT,"script":src_Style.SCRIPT,"scriptscript":src_Style.SCRIPTSCRIPT};defineFunction({type:"styling",names:["\\displaystyle","\\textstyle","\\scriptstyle","\\scriptscriptstyle"],props:{numArgs:0,allowedInText:true,primitive:true},handler:function handler(_ref,args){var breakOnTokenText=_ref.breakOnTokenText,funcName=_ref.funcName,parser=_ref.parser;// parse out the implicit body
  var body=parser.parseExpression(true,breakOnTokenText);// TODO: Refactor to avoid duplicating styleMap in multiple places (e.g.
  // here and in buildHTML and de-dupe the enumeration of all the styles).
  // $FlowFixMe: The names above exactly match the styles.
  var style=funcName.slice(1,funcName.length-5);return {type:"styling",mode:parser.mode,// Figure out what style to use by pulling out the style from
  // the function name
  style:style,body:body};},htmlBuilder:function htmlBuilder(group,options){// Style changes are handled in the TeXbook on pg. 442, Rule 3.
  var newStyle=styling_styleMap[group.style];var newOptions=options.havingStyle(newStyle).withFont('');return sizingGroup(group.body,newOptions,options);},mathmlBuilder:function mathmlBuilder(group,options){// Figure out what style we're changing to.
  var newStyle=styling_styleMap[group.style];var newOptions=options.havingStyle(newStyle);var inner=buildMathML_buildExpression(group.body,newOptions);var node=new mathMLTree.MathNode("mstyle",inner);var styleAttributes={"display":["0","true"],"text":["0","false"],"script":["1","false"],"scriptscript":["2","false"]};var attr=styleAttributes[group.style];node.setAttribute("scriptlevel",attr[0]);node.setAttribute("displaystyle",attr[1]);return node;}});/**
       * Sometimes, groups perform special rules when they have superscripts or
       * subscripts attached to them. This function lets the `supsub` group know that
       * Sometimes, groups perform special rules when they have superscripts or
       * its inner element should handle the superscripts and subscripts instead of
       * handling them itself.
       */var htmlBuilderDelegate=function htmlBuilderDelegate(group,options){var base=group.base;if(!base){return null;}else if(base.type==="op"){// Operators handle supsubs differently when they have limits
  // (e.g. `\displaystyle\sum_2^3`)
  var delegate=base.limits&&(options.style.size===src_Style.DISPLAY.size||base.alwaysHandleSupSub);return delegate?op_htmlBuilder:null;}else if(base.type==="operatorname"){var _delegate=base.alwaysHandleSupSub&&(options.style.size===src_Style.DISPLAY.size||base.limits);return _delegate?operatorname_htmlBuilder:null;}else if(base.type==="accent"){return utils.isCharacterBox(base.base)?htmlBuilder:null;}else if(base.type==="horizBrace"){var isSup=!group.sub;return isSup===base.isOver?horizBrace_htmlBuilder:null;}else{return null;}};// Super scripts and subscripts, whose precise placement can depend on other
  // functions that precede them.
  defineFunctionBuilders({type:"supsub",htmlBuilder:function htmlBuilder(group,options){// Superscript and subscripts are handled in the TeXbook on page
  // 445-446, rules 18(a-f).
  // Here is where we defer to the inner group if it should handle
  // superscripts and subscripts itself.
  var builderDelegate=htmlBuilderDelegate(group,options);if(builderDelegate){return builderDelegate(group,options);}var valueBase=group.base,valueSup=group.sup,valueSub=group.sub;var base=buildGroup(valueBase,options);var supm;var subm;var metrics=options.fontMetrics();// Rule 18a
  var supShift=0;var subShift=0;var isCharacterBox=valueBase&&utils.isCharacterBox(valueBase);if(valueSup){var newOptions=options.havingStyle(options.style.sup());supm=buildGroup(valueSup,newOptions,options);if(!isCharacterBox){supShift=base.height-newOptions.fontMetrics().supDrop*newOptions.sizeMultiplier/options.sizeMultiplier;}}if(valueSub){var _newOptions=options.havingStyle(options.style.sub());subm=buildGroup(valueSub,_newOptions,options);if(!isCharacterBox){subShift=base.depth+_newOptions.fontMetrics().subDrop*_newOptions.sizeMultiplier/options.sizeMultiplier;}}// Rule 18c
  var minSupShift;if(options.style===src_Style.DISPLAY){minSupShift=metrics.sup1;}else if(options.style.cramped){minSupShift=metrics.sup3;}else{minSupShift=metrics.sup2;}// scriptspace is a font-size-independent size, so scale it
  // appropriately for use as the marginRight.
  var multiplier=options.sizeMultiplier;var marginRight=0.5/metrics.ptPerEm/multiplier+"em";var marginLeft=null;if(subm){// Subscripts shouldn't be shifted by the base's italic correction.
  // Account for that by shifting the subscript back the appropriate
  // amount. Note we only do this when the base is a single symbol.
  var isOiint=group.base&&group.base.type==="op"&&group.base.name&&(group.base.name==="\\oiint"||group.base.name==="\\oiiint");if(base instanceof SymbolNode||isOiint){// $FlowFixMe
  marginLeft=-base.italic+"em";}}var supsub;if(supm&&subm){supShift=Math.max(supShift,minSupShift,supm.depth+0.25*metrics.xHeight);subShift=Math.max(subShift,metrics.sub2);var ruleWidth=metrics.defaultRuleThickness;// Rule 18e
  var maxWidth=4*ruleWidth;if(supShift-supm.depth-(subm.height-subShift)<maxWidth){subShift=maxWidth-(supShift-supm.depth)+subm.height;var psi=0.8*metrics.xHeight-(supShift-supm.depth);if(psi>0){supShift+=psi;subShift-=psi;}}var vlistElem=[{type:"elem",elem:subm,shift:subShift,marginRight:marginRight,marginLeft:marginLeft},{type:"elem",elem:supm,shift:-supShift,marginRight:marginRight}];supsub=buildCommon.makeVList({positionType:"individualShift",children:vlistElem},options);}else if(subm){// Rule 18b
  subShift=Math.max(subShift,metrics.sub1,subm.height-0.8*metrics.xHeight);var _vlistElem=[{type:"elem",elem:subm,marginLeft:marginLeft,marginRight:marginRight}];supsub=buildCommon.makeVList({positionType:"shift",positionData:subShift,children:_vlistElem},options);}else if(supm){// Rule 18c, d
  supShift=Math.max(supShift,minSupShift,supm.depth+0.25*metrics.xHeight);supsub=buildCommon.makeVList({positionType:"shift",positionData:-supShift,children:[{type:"elem",elem:supm,marginRight:marginRight}]},options);}else{throw new Error("supsub must have either sup or sub.");}// Wrap the supsub vlist in a span.msupsub to reset text-align.
  var mclass=getTypeOfDomTree(base,"right")||"mord";return buildCommon.makeSpan([mclass],[base,buildCommon.makeSpan(["msupsub"],[supsub])],options);},mathmlBuilder:function mathmlBuilder(group,options){// Is the inner group a relevant horizonal brace?
  var isBrace=false;var isOver;var isSup;if(group.base&&group.base.type==="horizBrace"){isSup=!!group.sup;if(isSup===group.base.isOver){isBrace=true;isOver=group.base.isOver;}}if(group.base&&(group.base.type==="op"||group.base.type==="operatorname")){group.base.parentIsSupSub=true;}var children=[buildMathML_buildGroup(group.base,options)];if(group.sub){children.push(buildMathML_buildGroup(group.sub,options));}if(group.sup){children.push(buildMathML_buildGroup(group.sup,options));}var nodeType;if(isBrace){nodeType=isOver?"mover":"munder";}else if(!group.sub){var base=group.base;if(base&&base.type==="op"&&base.limits&&(options.style===src_Style.DISPLAY||base.alwaysHandleSupSub)){nodeType="mover";}else if(base&&base.type==="operatorname"&&base.alwaysHandleSupSub&&(base.limits||options.style===src_Style.DISPLAY)){nodeType="mover";}else{nodeType="msup";}}else if(!group.sup){var _base=group.base;if(_base&&_base.type==="op"&&_base.limits&&(options.style===src_Style.DISPLAY||_base.alwaysHandleSupSub)){nodeType="munder";}else if(_base&&_base.type==="operatorname"&&_base.alwaysHandleSupSub&&(_base.limits||options.style===src_Style.DISPLAY)){nodeType="munder";}else{nodeType="msub";}}else{var _base2=group.base;if(_base2&&_base2.type==="op"&&_base2.limits&&options.style===src_Style.DISPLAY){nodeType="munderover";}else if(_base2&&_base2.type==="operatorname"&&_base2.alwaysHandleSupSub&&(options.style===src_Style.DISPLAY||_base2.limits)){nodeType="munderover";}else{nodeType="msubsup";}}return new mathMLTree.MathNode(nodeType,children);}});// Operator ParseNodes created in Parser.js from symbol Groups in src/symbols.js.
  defineFunctionBuilders({type:"atom",htmlBuilder:function htmlBuilder(group,options){return buildCommon.mathsym(group.text,group.mode,options,["m"+group.family]);},mathmlBuilder:function mathmlBuilder(group,options){var node=new mathMLTree.MathNode("mo",[makeText(group.text,group.mode)]);if(group.family==="bin"){var variant=getVariant(group,options);if(variant==="bold-italic"){node.setAttribute("mathvariant",variant);}}else if(group.family==="punct"){node.setAttribute("separator","true");}else if(group.family==="open"||group.family==="close"){// Delims built here should not stretch vertically.
  // See delimsizing.js for stretchy delims.
  node.setAttribute("stretchy","false");}return node;}});// "mathord" and "textord" ParseNodes created in Parser.js from symbol Groups in
  // src/symbols.js.
  var defaultVariant={"mi":"italic","mn":"normal","mtext":"normal"};defineFunctionBuilders({type:"mathord",htmlBuilder:function htmlBuilder(group,options){return buildCommon.makeOrd(group,options,"mathord");},mathmlBuilder:function mathmlBuilder(group,options){var node=new mathMLTree.MathNode("mi",[makeText(group.text,group.mode,options)]);var variant=getVariant(group,options)||"italic";if(variant!==defaultVariant[node.type]){node.setAttribute("mathvariant",variant);}return node;}});defineFunctionBuilders({type:"textord",htmlBuilder:function htmlBuilder(group,options){return buildCommon.makeOrd(group,options,"textord");},mathmlBuilder:function mathmlBuilder(group,options){var text=makeText(group.text,group.mode,options);var variant=getVariant(group,options)||"normal";var node;if(group.mode==='text'){node=new mathMLTree.MathNode("mtext",[text]);}else if(/[0-9]/.test(group.text)){node=new mathMLTree.MathNode("mn",[text]);}else if(group.text==="\\prime"){node=new mathMLTree.MathNode("mo",[text]);}else{node=new mathMLTree.MathNode("mi",[text]);}if(variant!==defaultVariant[node.type]){node.setAttribute("mathvariant",variant);}return node;}});// A map of CSS-based spacing functions to their CSS class.
  var cssSpace={"\\nobreak":"nobreak","\\allowbreak":"allowbreak"};// A lookup table to determine whether a spacing function/symbol should be
  // treated like a regular space character.  If a symbol or command is a key
  // in this table, then it should be a regular space character.  Furthermore,
  // the associated value may have a `className` specifying an extra CSS class
  // to add to the created `span`.
  var regularSpace={" ":{},"\\ ":{},"~":{className:"nobreak"},"\\space":{},"\\nobreakspace":{className:"nobreak"}};// ParseNode<"spacing"> created in Parser.js from the "spacing" symbol Groups in
  // src/symbols.js.
  defineFunctionBuilders({type:"spacing",htmlBuilder:function htmlBuilder(group,options){if(regularSpace.hasOwnProperty(group.text)){var className=regularSpace[group.text].className||"";// Spaces are generated by adding an actual space. Each of these
  // things has an entry in the symbols table, so these will be turned
  // into appropriate outputs.
  if(group.mode==="text"){var ord=buildCommon.makeOrd(group,options,"textord");ord.classes.push(className);return ord;}else{return buildCommon.makeSpan(["mspace",className],[buildCommon.mathsym(group.text,group.mode,options)],options);}}else if(cssSpace.hasOwnProperty(group.text)){// Spaces based on just a CSS class.
  return buildCommon.makeSpan(["mspace",cssSpace[group.text]],[],options);}else{throw new src_ParseError("Unknown type of space \""+group.text+"\"");}},mathmlBuilder:function mathmlBuilder(group,options){var node;if(regularSpace.hasOwnProperty(group.text)){node=new mathMLTree.MathNode("mtext",[new mathMLTree.TextNode("\xA0")]);}else if(cssSpace.hasOwnProperty(group.text)){// CSS-based MathML spaces (\nobreak, \allowbreak) are ignored
  return new mathMLTree.MathNode("mspace");}else{throw new src_ParseError("Unknown type of space \""+group.text+"\"");}return node;}});var pad=function pad(){var padNode=new mathMLTree.MathNode("mtd",[]);padNode.setAttribute("width","50%");return padNode;};defineFunctionBuilders({type:"tag",mathmlBuilder:function mathmlBuilder(group,options){var table=new mathMLTree.MathNode("mtable",[new mathMLTree.MathNode("mtr",[pad(),new mathMLTree.MathNode("mtd",[buildExpressionRow(group.body,options)]),pad(),new mathMLTree.MathNode("mtd",[buildExpressionRow(group.tag,options)])])]);table.setAttribute("width","100%");return table;// TODO: Left-aligned tags.
  // Currently, the group and options passed here do not contain
  // enough info to set tag alignment. `leqno` is in Settings but it is
  // not passed to Options. On the HTML side, leqno is
  // set by a CSS class applied in buildTree.js. That would have worked
  // in MathML if browsers supported <mlabeledtr>. Since they don't, we
  // need to rewrite the way this function is called.
  }});// Non-mathy text, possibly in a font
  var textFontFamilies={"\\text":undefined,"\\textrm":"textrm","\\textsf":"textsf","\\texttt":"texttt","\\textnormal":"textrm"};var textFontWeights={"\\textbf":"textbf","\\textmd":"textmd"};var textFontShapes={"\\textit":"textit","\\textup":"textup"};var optionsWithFont=function optionsWithFont(group,options){var font=group.font;// Checks if the argument is a font family or a font style.
  if(!font){return options;}else if(textFontFamilies[font]){return options.withTextFontFamily(textFontFamilies[font]);}else if(textFontWeights[font]){return options.withTextFontWeight(textFontWeights[font]);}else{return options.withTextFontShape(textFontShapes[font]);}};defineFunction({type:"text",names:[// Font families
  "\\text","\\textrm","\\textsf","\\texttt","\\textnormal",// Font weights
  "\\textbf","\\textmd",// Font Shapes
  "\\textit","\\textup"],props:{numArgs:1,argTypes:["text"],allowedInArgument:true,allowedInText:true},handler:function handler(_ref,args){var parser=_ref.parser,funcName=_ref.funcName;var body=args[0];return {type:"text",mode:parser.mode,body:ordargument(body),font:funcName};},htmlBuilder:function htmlBuilder(group,options){var newOptions=optionsWithFont(group,options);var inner=buildExpression(group.body,newOptions,true);return buildCommon.makeSpan(["mord","text"],inner,newOptions);},mathmlBuilder:function mathmlBuilder(group,options){var newOptions=optionsWithFont(group,options);return buildExpressionRow(group.body,newOptions);}});defineFunction({type:"underline",names:["\\underline"],props:{numArgs:1,allowedInText:true},handler:function handler(_ref,args){var parser=_ref.parser;return {type:"underline",mode:parser.mode,body:args[0]};},htmlBuilder:function htmlBuilder(group,options){// Underlines are handled in the TeXbook pg 443, Rule 10.
  // Build the inner group.
  var innerGroup=buildGroup(group.body,options);// Create the line to go below the body
  var line=buildCommon.makeLineSpan("underline-line",options);// Generate the vlist, with the appropriate kerns
  var defaultRuleThickness=options.fontMetrics().defaultRuleThickness;var vlist=buildCommon.makeVList({positionType:"top",positionData:innerGroup.height,children:[{type:"kern",size:defaultRuleThickness},{type:"elem",elem:line},{type:"kern",size:3*defaultRuleThickness},{type:"elem",elem:innerGroup}]},options);return buildCommon.makeSpan(["mord","underline"],[vlist],options);},mathmlBuilder:function mathmlBuilder(group,options){var operator=new mathMLTree.MathNode("mo",[new mathMLTree.TextNode("\u203E")]);operator.setAttribute("stretchy","true");var node=new mathMLTree.MathNode("munder",[buildMathML_buildGroup(group.body,options),operator]);node.setAttribute("accentunder","true");return node;}});// \vcenter:  Vertically center the argument group on the math axis.
  defineFunction({type:"vcenter",names:["\\vcenter"],props:{numArgs:1,argTypes:["original"],// In LaTeX, \vcenter can act only on a box.
  allowedInText:false},handler:function handler(_ref,args){var parser=_ref.parser;return {type:"vcenter",mode:parser.mode,body:args[0]};},htmlBuilder:function htmlBuilder(group,options){var body=buildGroup(group.body,options);var axisHeight=options.fontMetrics().axisHeight;var dy=0.5*(body.height-axisHeight-(body.depth+axisHeight));return buildCommon.makeVList({positionType:"shift",positionData:dy,children:[{type:"elem",elem:body}]},options);},mathmlBuilder:function mathmlBuilder(group,options){// There is no way to do this in MathML.
  // Write a class as a breadcrumb in case some post-processor wants
  // to perform a vcenter adjustment.
  return new mathMLTree.MathNode("mpadded",[buildMathML_buildGroup(group.body,options)],["vcenter"]);}});defineFunction({type:"verb",names:["\\verb"],props:{numArgs:0,allowedInText:true},handler:function handler(context,args,optArgs){// \verb and \verb* are dealt with directly in Parser.js.
  // If we end up here, it's because of a failure to match the two delimiters
  // in the regex in Lexer.js.  LaTeX raises the following error when \verb is
  // terminated by end of line (or file).
  throw new src_ParseError("\\verb ended by end of line instead of matching delimiter");},htmlBuilder:function htmlBuilder(group,options){var text=makeVerb(group);var body=[];// \verb enters text mode and therefore is sized like \textstyle
  var newOptions=options.havingStyle(options.style.text());for(var i=0;i<text.length;i++){var c=text[i];if(c==='~'){c='\\textasciitilde';}body.push(buildCommon.makeSymbol(c,"Typewriter-Regular",group.mode,newOptions,["mord","texttt"]));}return buildCommon.makeSpan(["mord","text"].concat(newOptions.sizingClasses(options)),buildCommon.tryCombineChars(body),newOptions);},mathmlBuilder:function mathmlBuilder(group,options){var text=new mathMLTree.TextNode(makeVerb(group));var node=new mathMLTree.MathNode("mtext",[text]);node.setAttribute("mathvariant","monospace");return node;}});/**
       * Converts verb group into body string.
       *
       * \verb* replaces each space with an open box \u2423
       * \verb replaces each space with a no-break space \xA0
       */var makeVerb=function makeVerb(group){return group.body.replace(/ /g,group.star?"\u2423":'\xA0');};/** Include this to ensure that all functions are defined. */var functions=_functions;/* harmony default export */var src_functions=functions;// TODO(kevinb): have functions return an object and call defineFunction with
  /**
       * Lexing or parsing positional information for error reporting.
       * This object is immutable.
       */var SourceLocation=/*#__PURE__*/function(){// The + prefix indicates that these fields aren't writeable
  // Lexer holding the input string.
  // Start offset, zero-based inclusive.
  // End offset, zero-based exclusive.
  function SourceLocation(lexer,start,end){this.lexer=void 0;this.start=void 0;this.end=void 0;this.lexer=lexer;this.start=start;this.end=end;}/**
         * Merges two `SourceLocation`s from location providers, given they are
         * provided in order of appearance.
         * - Returns the first one's location if only the first is provided.
         * - Returns a merged range of the first and the last if both are provided
         *   and their lexers match.
         * - Otherwise, returns null.
         */SourceLocation.range=function range(first,second){if(!second){return first&&first.loc;}else if(!first||!first.loc||!second.loc||first.loc.lexer!==second.loc.lexer){return null;}else{return new SourceLocation(first.loc.lexer,first.loc.start,second.loc.end);}};return SourceLocation;}();/**
       * Interface required to break circular dependency between Token, Lexer, and
       * ParseError.
       */ /**
       * The resulting token returned from `lex`.
       *
       * It consists of the token text plus some position information.
       * The position information is essentially a range in an input string,
       * but instead of referencing the bare input string, we refer to the lexer.
       * That way it is possible to attach extra metadata to the input string,
       * like for example a file name or similar.
       *
       * The position information is optional, so it is OK to construct synthetic
       * tokens if appropriate. Not providing available position information may
       * lead to degraded error reporting, though.
       */var Token=/*#__PURE__*/function(){// don't expand the token
  // used in \noexpand
  function Token(text,// the text of this token
  loc){this.text=void 0;this.loc=void 0;this.noexpand=void 0;this.treatAsRelax=void 0;this.text=text;this.loc=loc;}/**
         * Given a pair of tokens (this and endToken), compute a `Token` encompassing
         * the whole input range enclosed by these two.
         */var _proto=Token.prototype;_proto.range=function range(endToken,// last token of the range, inclusive
  text// the text of the newly constructed token
  ){return new Token(text,SourceLocation.range(this,endToken));};return Token;}();/**
       * The Lexer class handles tokenizing the input in various ways. Since our
       * parser expects us to be able to backtrack, the lexer allows lexing from any
       * given starting point.
       *
       * Its main exposed function is the `lex` function, which takes a position to
       * lex from and a type of token to lex. It defers to the appropriate `_innerLex`
       * function.
       *
       * The various `_innerLex` functions perform the actual lexing of different
       * kinds.
       */ /* The following tokenRegex
   * - matches typical whitespace (but not NBSP etc.) using its first group
   * - does not match any control character \x00-\x1f except whitespace
   * - does not match a bare backslash
   * - matches any ASCII character except those just mentioned
   * - does not match the BMP private use area \uE000-\uF8FF
   * - does not match bare surrogate code units
   * - matches any BMP character except for those just described
   * - matches any valid Unicode surrogate pair
   * - matches a backslash followed by one or more whitespace characters
   * - matches a backslash followed by one or more letters then whitespace
   * - matches a backslash followed by any BMP character
   * Capturing groups:
   *   [1] regular whitespace
   *   [2] backslash followed by whitespace
   *   [3] anything else, which may include:
   *     [4] left character of \verb*
   *     [5] left character of \verb
   *     [6] backslash followed by word, excluding any trailing whitespace
   * Just because the Lexer matches something doesn't mean it's valid input:
   * If there is no matching function or symbol definition, the Parser will
   * still reject the input.
   */var spaceRegexString="[ \r\n\t]";var controlWordRegexString="\\\\[a-zA-Z@]+";var controlSymbolRegexString="\\\\[^\uD800-\uDFFF]";var controlWordWhitespaceRegexString="("+controlWordRegexString+")"+spaceRegexString+"*";var controlSpaceRegexString="\\\\(\n|[ \r\t]+\n?)[ \r\t]*";var combiningDiacriticalMarkString="[\u0300-\u036F]";var combiningDiacriticalMarksEndRegex=new RegExp(combiningDiacriticalMarkString+"+$");var tokenRegexString="("+spaceRegexString+"+)|"+(// whitespace
  controlSpaceRegexString+"|")+// \whitespace
  "([!-\\[\\]-\u2027\u202A-\uD7FF\uF900-\uFFFF]"+(// single codepoint
  combiningDiacriticalMarkString+"*")+// ...plus accents
  "|[\uD800-\uDBFF][\uDC00-\uDFFF]"+(// surrogate pair
  combiningDiacriticalMarkString+"*")+// ...plus accents
  "|\\\\verb\\*([^]).*?\\4"+// \verb*
  "|\\\\verb([^*a-zA-Z]).*?\\5"+(// \verb unstarred
  "|"+controlWordWhitespaceRegexString)+(// \macroName + spaces
  "|"+controlSymbolRegexString+")");// \\, \', etc.
  /** Main Lexer class */var Lexer=/*#__PURE__*/function(){// Category codes. The lexer only supports comment characters (14) for now.
  // MacroExpander additionally distinguishes active (13).
  function Lexer(input,settings){this.input=void 0;this.settings=void 0;this.tokenRegex=void 0;this.catcodes=void 0;// Separate accents from characters
  this.input=input;this.settings=settings;this.tokenRegex=new RegExp(tokenRegexString,'g');this.catcodes={"%":14,// comment character
  "~":13// active character
  };}var _proto=Lexer.prototype;_proto.setCatcode=function setCatcode(char,code){this.catcodes[char]=code;}/**
         * This function lexes a single token.
         */;_proto.lex=function lex(){var input=this.input;var pos=this.tokenRegex.lastIndex;if(pos===input.length){return new Token("EOF",new SourceLocation(this,pos,pos));}var match=this.tokenRegex.exec(input);if(match===null||match.index!==pos){throw new src_ParseError("Unexpected character: '"+input[pos]+"'",new Token(input[pos],new SourceLocation(this,pos,pos+1)));}var text=match[6]||match[3]||(match[2]?"\\ ":" ");if(this.catcodes[text]===14){// comment character
  var nlIndex=input.indexOf('\n',this.tokenRegex.lastIndex);if(nlIndex===-1){this.tokenRegex.lastIndex=input.length;// EOF
  this.settings.reportNonstrict("commentAtEnd","% comment has no terminating newline; LaTeX would "+"fail because of commenting the end of math mode (e.g. $)");}else{this.tokenRegex.lastIndex=nlIndex+1;}return this.lex();}return new Token(text,new SourceLocation(this,pos,this.tokenRegex.lastIndex));};return Lexer;}();/**
       * A `Namespace` refers to a space of nameable things like macros or lengths,
       * which can be `set` either globally or local to a nested group, using an
       * undo stack similar to how TeX implements this functionality.
       * Performance-wise, `get` and local `set` take constant time, while global
       * `set` takes time proportional to the depth of group nesting.
       */var Namespace=/*#__PURE__*/function(){/**
         * Both arguments are optional.  The first argument is an object of
         * built-in mappings which never change.  The second argument is an object
         * of initial (global-level) mappings, which will constantly change
         * according to any global/top-level `set`s done.
         */function Namespace(builtins,globalMacros){if(builtins===void 0){builtins={};}if(globalMacros===void 0){globalMacros={};}this.current=void 0;this.builtins=void 0;this.undefStack=void 0;this.current=globalMacros;this.builtins=builtins;this.undefStack=[];}/**
         * Start a new nested group, affecting future local `set`s.
         */var _proto=Namespace.prototype;_proto.beginGroup=function beginGroup(){this.undefStack.push({});}/**
         * End current nested group, restoring values before the group began.
         */;_proto.endGroup=function endGroup(){if(this.undefStack.length===0){throw new src_ParseError("Unbalanced namespace destruction: attempt "+"to pop global namespace; please report this as a bug");}var undefs=this.undefStack.pop();for(var undef in undefs){if(undefs.hasOwnProperty(undef)){if(undefs[undef]===undefined){delete this.current[undef];}else{this.current[undef]=undefs[undef];}}}}/**
         * Ends all currently nested groups (if any), restoring values before the
         * groups began.  Useful in case of an error in the middle of parsing.
         */;_proto.endGroups=function endGroups(){while(this.undefStack.length>0){this.endGroup();}}/**
         * Detect whether `name` has a definition.  Equivalent to
         * `get(name) != null`.
         */;_proto.has=function has(name){return this.current.hasOwnProperty(name)||this.builtins.hasOwnProperty(name);}/**
         * Get the current value of a name, or `undefined` if there is no value.
         *
         * Note: Do not use `if (namespace.get(...))` to detect whether a macro
         * is defined, as the definition may be the empty string which evaluates
         * to `false` in JavaScript.  Use `if (namespace.get(...) != null)` or
         * `if (namespace.has(...))`.
         */;_proto.get=function get(name){if(this.current.hasOwnProperty(name)){return this.current[name];}else{return this.builtins[name];}}/**
         * Set the current value of a name, and optionally set it globally too.
         * Local set() sets the current value and (when appropriate) adds an undo
         * operation to the undo stack.  Global set() may change the undo
         * operation at every level, so takes time linear in their number.
         */;_proto.set=function set(name,value,global){if(global===void 0){global=false;}if(global){// Global set is equivalent to setting in all groups.  Simulate this
  // by destroying any undos currently scheduled for this name,
  // and adding an undo with the *new* value (in case it later gets
  // locally reset within this environment).
  for(var i=0;i<this.undefStack.length;i++){delete this.undefStack[i][name];}if(this.undefStack.length>0){this.undefStack[this.undefStack.length-1][name]=value;}}else{// Undo this set at end of this group (possibly to `undefined`),
  // unless an undo is already in place, in which case that older
  // value is the correct one.
  var top=this.undefStack[this.undefStack.length-1];if(top&&!top.hasOwnProperty(name)){top[name]=this.current[name];}}this.current[name]=value;};return Namespace;}();/**
       * Predefined macros for KaTeX.
       * This can be used to define some commands in terms of others.
       */ // Export global macros object from defineMacro
  var macros=_macros;/* harmony default export */var src_macros=macros;//////////////////////////////////////////////////////////////////////
  // macro tools
  defineMacro("\\noexpand",function(context){// The expansion is the token itself; but that token is interpreted
  // as if its meaning were ‘\relax’ if it is a control sequence that
  // would ordinarily be expanded by TeX’s expansion rules.
  var t=context.popToken();if(context.isExpandable(t.text)){t.noexpand=true;t.treatAsRelax=true;}return {tokens:[t],numArgs:0};});defineMacro("\\expandafter",function(context){// TeX first reads the token that comes immediately after \expandafter,
  // without expanding it; let’s call this token t. Then TeX reads the
  // token that comes after t (and possibly more tokens, if that token
  // has an argument), replacing it by its expansion. Finally TeX puts
  // t back in front of that expansion.
  var t=context.popToken();context.expandOnce(true);// expand only an expandable token
  return {tokens:[t],numArgs:0};});// LaTeX's \@firstoftwo{#1}{#2} expands to #1, skipping #2
  // TeX source: \long\def\@firstoftwo#1#2{#1}
  defineMacro("\\@firstoftwo",function(context){var args=context.consumeArgs(2);return {tokens:args[0],numArgs:0};});// LaTeX's \@secondoftwo{#1}{#2} expands to #2, skipping #1
  // TeX source: \long\def\@secondoftwo#1#2{#2}
  defineMacro("\\@secondoftwo",function(context){var args=context.consumeArgs(2);return {tokens:args[1],numArgs:0};});// LaTeX's \@ifnextchar{#1}{#2}{#3} looks ahead to the next (unexpanded)
  // symbol that isn't a space, consuming any spaces but not consuming the
  // first nonspace character.  If that nonspace character matches #1, then
  // the macro expands to #2; otherwise, it expands to #3.
  defineMacro("\\@ifnextchar",function(context){var args=context.consumeArgs(3);// symbol, if, else
  context.consumeSpaces();var nextToken=context.future();if(args[0].length===1&&args[0][0].text===nextToken.text){return {tokens:args[1],numArgs:0};}else{return {tokens:args[2],numArgs:0};}});// LaTeX's \@ifstar{#1}{#2} looks ahead to the next (unexpanded) symbol.
  // If it is `*`, then it consumes the symbol, and the macro expands to #1;
  // otherwise, the macro expands to #2 (without consuming the symbol).
  // TeX source: \def\@ifstar#1{\@ifnextchar *{\@firstoftwo{#1}}}
  defineMacro("\\@ifstar","\\@ifnextchar *{\\@firstoftwo{#1}}");// LaTeX's \TextOrMath{#1}{#2} expands to #1 in text mode, #2 in math mode
  defineMacro("\\TextOrMath",function(context){var args=context.consumeArgs(2);if(context.mode==='text'){return {tokens:args[0],numArgs:0};}else{return {tokens:args[1],numArgs:0};}});// Lookup table for parsing numbers in base 8 through 16
  var digitToNumber={"0":0,"1":1,"2":2,"3":3,"4":4,"5":5,"6":6,"7":7,"8":8,"9":9,"a":10,"A":10,"b":11,"B":11,"c":12,"C":12,"d":13,"D":13,"e":14,"E":14,"f":15,"F":15};// TeX \char makes a literal character (catcode 12) using the following forms:
  // (see The TeXBook, p. 43)
  //   \char123  -- decimal
  //   \char'123 -- octal
  //   \char"123 -- hex
  //   \char`x   -- character that can be written (i.e. isn't active)
  //   \char`\x  -- character that cannot be written (e.g. %)
  // These all refer to characters from the font, so we turn them into special
  // calls to a function \@char dealt with in the Parser.
  defineMacro("\\char",function(context){var token=context.popToken();var base;var number='';if(token.text==="'"){base=8;token=context.popToken();}else if(token.text==='"'){base=16;token=context.popToken();}else if(token.text==="`"){token=context.popToken();if(token.text[0]==="\\"){number=token.text.charCodeAt(1);}else if(token.text==="EOF"){throw new src_ParseError("\\char` missing argument");}else{number=token.text.charCodeAt(0);}}else{base=10;}if(base){// Parse a number in the given base, starting with first `token`.
  number=digitToNumber[token.text];if(number==null||number>=base){throw new src_ParseError("Invalid base-"+base+" digit "+token.text);}var digit;while((digit=digitToNumber[context.future().text])!=null&&digit<base){number*=base;number+=digit;context.popToken();}}return "\\@char{"+number+"}";});// \newcommand{\macro}[args]{definition}
  // \renewcommand{\macro}[args]{definition}
  // TODO: Optional arguments: \newcommand{\macro}[args][default]{definition}
  var newcommand=function newcommand(context,existsOK,nonexistsOK){var arg=context.consumeArg().tokens;if(arg.length!==1){throw new src_ParseError("\\newcommand's first argument must be a macro name");}var name=arg[0].text;var exists=context.isDefined(name);if(exists&&!existsOK){throw new src_ParseError("\\newcommand{"+name+"} attempting to redefine "+(name+"; use \\renewcommand"));}if(!exists&&!nonexistsOK){throw new src_ParseError("\\renewcommand{"+name+"} when command "+name+" "+"does not yet exist; use \\newcommand");}var numArgs=0;arg=context.consumeArg().tokens;if(arg.length===1&&arg[0].text==="["){var argText='';var token=context.expandNextToken();while(token.text!=="]"&&token.text!=="EOF"){// TODO: Should properly expand arg, e.g., ignore {}s
  argText+=token.text;token=context.expandNextToken();}if(!argText.match(/^\s*[0-9]+\s*$/)){throw new src_ParseError("Invalid number of arguments: "+argText);}numArgs=parseInt(argText);arg=context.consumeArg().tokens;}// Final arg is the expansion of the macro
  context.macros.set(name,{tokens:arg,numArgs:numArgs});return '';};defineMacro("\\newcommand",function(context){return newcommand(context,false,true);});defineMacro("\\renewcommand",function(context){return newcommand(context,true,false);});defineMacro("\\providecommand",function(context){return newcommand(context,true,true);});// terminal (console) tools
  defineMacro("\\message",function(context){var arg=context.consumeArgs(1)[0];// eslint-disable-next-line no-console
  console.log(arg.reverse().map(function(token){return token.text;}).join(""));return '';});defineMacro("\\errmessage",function(context){var arg=context.consumeArgs(1)[0];// eslint-disable-next-line no-console
  console.error(arg.reverse().map(function(token){return token.text;}).join(""));return '';});defineMacro("\\show",function(context){var tok=context.popToken();var name=tok.text;// eslint-disable-next-line no-console
  console.log(tok,context.macros.get(name),src_functions[name],src_symbols.math[name],src_symbols.text[name]);return '';});//////////////////////////////////////////////////////////////////////
  // Grouping
  // \let\bgroup={ \let\egroup=}
  defineMacro("\\bgroup","{");defineMacro("\\egroup","}");// Symbols from latex.ltx:
  // \def~{\nobreakspace{}}
  // \def\lq{`}
  // \def\rq{'}
  // \def \aa {\r a}
  // \def \AA {\r A}
  defineMacro("~","\\nobreakspace");defineMacro("\\lq","`");defineMacro("\\rq","'");defineMacro("\\aa","\\r a");defineMacro("\\AA","\\r A");// Copyright (C) and registered (R) symbols. Use raw symbol in MathML.
  // \DeclareTextCommandDefault{\textcopyright}{\textcircled{c}}
  // \DeclareTextCommandDefault{\textregistered}{\textcircled{%
  //      \check@mathfonts\fontsize\sf@size\z@\math@fontsfalse\selectfont R}}
  // \DeclareRobustCommand{\copyright}{%
  //    \ifmmode{\nfss@text{\textcopyright}}\else\textcopyright\fi}
  defineMacro("\\textcopyright","\\html@mathml{\\textcircled{c}}{\\char`©}");defineMacro("\\copyright","\\TextOrMath{\\textcopyright}{\\text{\\textcopyright}}");defineMacro("\\textregistered","\\html@mathml{\\textcircled{\\scriptsize R}}{\\char`®}");// Characters omitted from Unicode range 1D400–1D7FF
  defineMacro("\u212C","\\mathscr{B}");// script
  defineMacro("\u2130","\\mathscr{E}");defineMacro("\u2131","\\mathscr{F}");defineMacro("\u210B","\\mathscr{H}");defineMacro("\u2110","\\mathscr{I}");defineMacro("\u2112","\\mathscr{L}");defineMacro("\u2133","\\mathscr{M}");defineMacro("\u211B","\\mathscr{R}");defineMacro("\u212D","\\mathfrak{C}");// Fraktur
  defineMacro("\u210C","\\mathfrak{H}");defineMacro("\u2128","\\mathfrak{Z}");// Define \Bbbk with a macro that works in both HTML and MathML.
  defineMacro("\\Bbbk","\\Bbb{k}");// Unicode middle dot
  // The KaTeX fonts do not contain U+00B7. Instead, \cdotp displays
  // the dot at U+22C5 and gives it punct spacing.
  defineMacro("\xB7","\\cdotp");// \llap and \rlap render their contents in text mode
  defineMacro("\\llap","\\mathllap{\\textrm{#1}}");defineMacro("\\rlap","\\mathrlap{\\textrm{#1}}");defineMacro("\\clap","\\mathclap{\\textrm{#1}}");// \mathstrut from the TeXbook, p 360
  defineMacro("\\mathstrut","\\vphantom{(}");// \underbar from TeXbook p 353
  defineMacro("\\underbar","\\underline{\\text{#1}}");// \not is defined by base/fontmath.ltx via
  // \DeclareMathSymbol{\not}{\mathrel}{symbols}{"36}
  // It's thus treated like a \mathrel, but defined by a symbol that has zero
  // width but extends to the right.  We use \rlap to get that spacing.
  // For MathML we write U+0338 here. buildMathML.js will then do the overlay.
  defineMacro("\\not",'\\html@mathml{\\mathrel{\\mathrlap\\@not}}{\\char"338}');// Negated symbols from base/fontmath.ltx:
  // \def\neq{\not=} \let\ne=\neq
  // \DeclareRobustCommand
  //   \notin{\mathrel{\m@th\mathpalette\c@ncel\in}}
  // \def\c@ncel#1#2{\m@th\ooalign{$\hfil#1\mkern1mu/\hfil$\crcr$#1#2$}}
  defineMacro("\\neq","\\html@mathml{\\mathrel{\\not=}}{\\mathrel{\\char`≠}}");defineMacro("\\ne","\\neq");defineMacro("\u2260","\\neq");defineMacro("\\notin","\\html@mathml{\\mathrel{{\\in}\\mathllap{/\\mskip1mu}}}"+"{\\mathrel{\\char`∉}}");defineMacro("\u2209","\\notin");// Unicode stacked relations
  defineMacro("\u2258","\\html@mathml{"+"\\mathrel{=\\kern{-1em}\\raisebox{0.4em}{$\\scriptsize\\frown$}}"+"}{\\mathrel{\\char`\u2258}}");defineMacro("\u2259","\\html@mathml{\\stackrel{\\tiny\\wedge}{=}}{\\mathrel{\\char`\u2258}}");defineMacro("\u225A","\\html@mathml{\\stackrel{\\tiny\\vee}{=}}{\\mathrel{\\char`\u225A}}");defineMacro("\u225B","\\html@mathml{\\stackrel{\\scriptsize\\star}{=}}"+"{\\mathrel{\\char`\u225B}}");defineMacro("\u225D","\\html@mathml{\\stackrel{\\tiny\\mathrm{def}}{=}}"+"{\\mathrel{\\char`\u225D}}");defineMacro("\u225E","\\html@mathml{\\stackrel{\\tiny\\mathrm{m}}{=}}"+"{\\mathrel{\\char`\u225E}}");defineMacro("\u225F","\\html@mathml{\\stackrel{\\tiny?}{=}}{\\mathrel{\\char`\u225F}}");// Misc Unicode
  defineMacro("\u27C2","\\perp");defineMacro("\u203C","\\mathclose{!\\mkern-0.8mu!}");defineMacro("\u220C","\\notni");defineMacro("\u231C","\\ulcorner");defineMacro("\u231D","\\urcorner");defineMacro("\u231E","\\llcorner");defineMacro("\u231F","\\lrcorner");defineMacro("\xA9","\\copyright");defineMacro("\xAE","\\textregistered");defineMacro("\uFE0F","\\textregistered");// The KaTeX fonts have corners at codepoints that don't match Unicode.
  // For MathML purposes, use the Unicode code point.
  defineMacro("\\ulcorner","\\html@mathml{\\@ulcorner}{\\mathop{\\char\"231c}}");defineMacro("\\urcorner","\\html@mathml{\\@urcorner}{\\mathop{\\char\"231d}}");defineMacro("\\llcorner","\\html@mathml{\\@llcorner}{\\mathop{\\char\"231e}}");defineMacro("\\lrcorner","\\html@mathml{\\@lrcorner}{\\mathop{\\char\"231f}}");//////////////////////////////////////////////////////////////////////
  // LaTeX_2ε
  // \vdots{\vbox{\baselineskip4\p@  \lineskiplimit\z@
  // \kern6\p@\hbox{.}\hbox{.}\hbox{.}}}
  // We'll call \varvdots, which gets a glyph from symbols.js.
  // The zero-width rule gets us an equivalent to the vertical 6pt kern.
  defineMacro("\\vdots","\\mathord{\\varvdots\\rule{0pt}{15pt}}");defineMacro("\u22EE","\\vdots");//////////////////////////////////////////////////////////////////////
  // amsmath.sty
  // http://mirrors.concertpass.com/tex-archive/macros/latex/required/amsmath/amsmath.pdf
  // Italic Greek capital letters.  AMS defines these with \DeclareMathSymbol,
  // but they are equivalent to \mathit{\Letter}.
  defineMacro("\\varGamma","\\mathit{\\Gamma}");defineMacro("\\varDelta","\\mathit{\\Delta}");defineMacro("\\varTheta","\\mathit{\\Theta}");defineMacro("\\varLambda","\\mathit{\\Lambda}");defineMacro("\\varXi","\\mathit{\\Xi}");defineMacro("\\varPi","\\mathit{\\Pi}");defineMacro("\\varSigma","\\mathit{\\Sigma}");defineMacro("\\varUpsilon","\\mathit{\\Upsilon}");defineMacro("\\varPhi","\\mathit{\\Phi}");defineMacro("\\varPsi","\\mathit{\\Psi}");defineMacro("\\varOmega","\\mathit{\\Omega}");//\newcommand{\substack}[1]{\subarray{c}#1\endsubarray}
  defineMacro("\\substack","\\begin{subarray}{c}#1\\end{subarray}");// \renewcommand{\colon}{\nobreak\mskip2mu\mathpunct{}\nonscript
  // \mkern-\thinmuskip{:}\mskip6muplus1mu\relax}
  defineMacro("\\colon","\\nobreak\\mskip2mu\\mathpunct{}"+"\\mathchoice{\\mkern-3mu}{\\mkern-3mu}{}{}{:}\\mskip6mu");// \newcommand{\boxed}[1]{\fbox{\m@th$\displaystyle#1$}}
  defineMacro("\\boxed","\\fbox{$\\displaystyle{#1}$}");// \def\iff{\DOTSB\;\Longleftrightarrow\;}
  // \def\implies{\DOTSB\;\Longrightarrow\;}
  // \def\impliedby{\DOTSB\;\Longleftarrow\;}
  defineMacro("\\iff","\\DOTSB\\;\\Longleftrightarrow\\;");defineMacro("\\implies","\\DOTSB\\;\\Longrightarrow\\;");defineMacro("\\impliedby","\\DOTSB\\;\\Longleftarrow\\;");// AMSMath's automatic \dots, based on \mdots@@ macro.
  var dotsByToken={',':'\\dotsc','\\not':'\\dotsb',// \keybin@ checks for the following:
  '+':'\\dotsb','=':'\\dotsb','<':'\\dotsb','>':'\\dotsb','-':'\\dotsb','*':'\\dotsb',':':'\\dotsb',// Symbols whose definition starts with \DOTSB:
  '\\DOTSB':'\\dotsb','\\coprod':'\\dotsb','\\bigvee':'\\dotsb','\\bigwedge':'\\dotsb','\\biguplus':'\\dotsb','\\bigcap':'\\dotsb','\\bigcup':'\\dotsb','\\prod':'\\dotsb','\\sum':'\\dotsb','\\bigotimes':'\\dotsb','\\bigoplus':'\\dotsb','\\bigodot':'\\dotsb','\\bigsqcup':'\\dotsb','\\And':'\\dotsb','\\longrightarrow':'\\dotsb','\\Longrightarrow':'\\dotsb','\\longleftarrow':'\\dotsb','\\Longleftarrow':'\\dotsb','\\longleftrightarrow':'\\dotsb','\\Longleftrightarrow':'\\dotsb','\\mapsto':'\\dotsb','\\longmapsto':'\\dotsb','\\hookrightarrow':'\\dotsb','\\doteq':'\\dotsb',// Symbols whose definition starts with \mathbin:
  '\\mathbin':'\\dotsb',// Symbols whose definition starts with \mathrel:
  '\\mathrel':'\\dotsb','\\relbar':'\\dotsb','\\Relbar':'\\dotsb','\\xrightarrow':'\\dotsb','\\xleftarrow':'\\dotsb',// Symbols whose definition starts with \DOTSI:
  '\\DOTSI':'\\dotsi','\\int':'\\dotsi','\\oint':'\\dotsi','\\iint':'\\dotsi','\\iiint':'\\dotsi','\\iiiint':'\\dotsi','\\idotsint':'\\dotsi',// Symbols whose definition starts with \DOTSX:
  '\\DOTSX':'\\dotsx'};defineMacro("\\dots",function(context){// TODO: If used in text mode, should expand to \textellipsis.
  // However, in KaTeX, \textellipsis and \ldots behave the same
  // (in text mode), and it's unlikely we'd see any of the math commands
  // that affect the behavior of \dots when in text mode.  So fine for now
  // (until we support \ifmmode ... \else ... \fi).
  var thedots='\\dotso';var next=context.expandAfterFuture().text;if(next in dotsByToken){thedots=dotsByToken[next];}else if(next.substr(0,4)==='\\not'){thedots='\\dotsb';}else if(next in src_symbols.math){if(utils.contains(['bin','rel'],src_symbols.math[next].group)){thedots='\\dotsb';}}return thedots;});var spaceAfterDots={// \rightdelim@ checks for the following:
  ')':true,']':true,'\\rbrack':true,'\\}':true,'\\rbrace':true,'\\rangle':true,'\\rceil':true,'\\rfloor':true,'\\rgroup':true,'\\rmoustache':true,'\\right':true,'\\bigr':true,'\\biggr':true,'\\Bigr':true,'\\Biggr':true,// \extra@ also tests for the following:
  '$':true,// \extrap@ checks for the following:
  ';':true,'.':true,',':true};defineMacro("\\dotso",function(context){var next=context.future().text;if(next in spaceAfterDots){return "\\ldots\\,";}else{return "\\ldots";}});defineMacro("\\dotsc",function(context){var next=context.future().text;// \dotsc uses \extra@ but not \extrap@, instead specially checking for
  // ';' and '.', but doesn't check for ','.
  if(next in spaceAfterDots&&next!==','){return "\\ldots\\,";}else{return "\\ldots";}});defineMacro("\\cdots",function(context){var next=context.future().text;if(next in spaceAfterDots){return "\\@cdots\\,";}else{return "\\@cdots";}});defineMacro("\\dotsb","\\cdots");defineMacro("\\dotsm","\\cdots");defineMacro("\\dotsi","\\!\\cdots");// amsmath doesn't actually define \dotsx, but \dots followed by a macro
  // starting with \DOTSX implies \dotso, and then \extra@ detects this case
  // and forces the added `\,`.
  defineMacro("\\dotsx","\\ldots\\,");// \let\DOTSI\relax
  // \let\DOTSB\relax
  // \let\DOTSX\relax
  defineMacro("\\DOTSI","\\relax");defineMacro("\\DOTSB","\\relax");defineMacro("\\DOTSX","\\relax");// Spacing, based on amsmath.sty's override of LaTeX defaults
  // \DeclareRobustCommand{\tmspace}[3]{%
  //   \ifmmode\mskip#1#2\else\kern#1#3\fi\relax}
  defineMacro("\\tmspace","\\TextOrMath{\\kern#1#3}{\\mskip#1#2}\\relax");// \renewcommand{\,}{\tmspace+\thinmuskip{.1667em}}
  // TODO: math mode should use \thinmuskip
  defineMacro("\\,","\\tmspace+{3mu}{.1667em}");// \let\thinspace\,
  defineMacro("\\thinspace","\\,");// \def\>{\mskip\medmuskip}
  // \renewcommand{\:}{\tmspace+\medmuskip{.2222em}}
  // TODO: \> and math mode of \: should use \medmuskip = 4mu plus 2mu minus 4mu
  defineMacro("\\>","\\mskip{4mu}");defineMacro("\\:","\\tmspace+{4mu}{.2222em}");// \let\medspace\:
  defineMacro("\\medspace","\\:");// \renewcommand{\;}{\tmspace+\thickmuskip{.2777em}}
  // TODO: math mode should use \thickmuskip = 5mu plus 5mu
  defineMacro("\\;","\\tmspace+{5mu}{.2777em}");// \let\thickspace\;
  defineMacro("\\thickspace","\\;");// \renewcommand{\!}{\tmspace-\thinmuskip{.1667em}}
  // TODO: math mode should use \thinmuskip
  defineMacro("\\!","\\tmspace-{3mu}{.1667em}");// \let\negthinspace\!
  defineMacro("\\negthinspace","\\!");// \newcommand{\negmedspace}{\tmspace-\medmuskip{.2222em}}
  // TODO: math mode should use \medmuskip
  defineMacro("\\negmedspace","\\tmspace-{4mu}{.2222em}");// \newcommand{\negthickspace}{\tmspace-\thickmuskip{.2777em}}
  // TODO: math mode should use \thickmuskip
  defineMacro("\\negthickspace","\\tmspace-{5mu}{.277em}");// \def\enspace{\kern.5em }
  defineMacro("\\enspace","\\kern.5em ");// \def\enskip{\hskip.5em\relax}
  defineMacro("\\enskip","\\hskip.5em\\relax");// \def\quad{\hskip1em\relax}
  defineMacro("\\quad","\\hskip1em\\relax");// \def\qquad{\hskip2em\relax}
  defineMacro("\\qquad","\\hskip2em\\relax");// \tag@in@display form of \tag
  defineMacro("\\tag","\\@ifstar\\tag@literal\\tag@paren");defineMacro("\\tag@paren","\\tag@literal{({#1})}");defineMacro("\\tag@literal",function(context){if(context.macros.get("\\df@tag")){throw new src_ParseError("Multiple \\tag");}return "\\gdef\\df@tag{\\text{#1}}";});// \renewcommand{\bmod}{\nonscript\mskip-\medmuskip\mkern5mu\mathbin
  //   {\operator@font mod}\penalty900
  //   \mkern5mu\nonscript\mskip-\medmuskip}
  // \newcommand{\pod}[1]{\allowbreak
  //   \if@display\mkern18mu\else\mkern8mu\fi(#1)}
  // \renewcommand{\pmod}[1]{\pod{{\operator@font mod}\mkern6mu#1}}
  // \newcommand{\mod}[1]{\allowbreak\if@display\mkern18mu
  //   \else\mkern12mu\fi{\operator@font mod}\,\,#1}
  // TODO: math mode should use \medmuskip = 4mu plus 2mu minus 4mu
  defineMacro("\\bmod","\\mathchoice{\\mskip1mu}{\\mskip1mu}{\\mskip5mu}{\\mskip5mu}"+"\\mathbin{\\rm mod}"+"\\mathchoice{\\mskip1mu}{\\mskip1mu}{\\mskip5mu}{\\mskip5mu}");defineMacro("\\pod","\\allowbreak"+"\\mathchoice{\\mkern18mu}{\\mkern8mu}{\\mkern8mu}{\\mkern8mu}(#1)");defineMacro("\\pmod","\\pod{{\\rm mod}\\mkern6mu#1}");defineMacro("\\mod","\\allowbreak"+"\\mathchoice{\\mkern18mu}{\\mkern12mu}{\\mkern12mu}{\\mkern12mu}"+"{\\rm mod}\\,\\,#1");// \pmb    --   A simulation of bold.
  // The version in ambsy.sty works by typesetting three copies of the argument
  // with small offsets. We use two copies. We omit the vertical offset because
  // of rendering problems that makeVList encounters in Safari.
  defineMacro("\\pmb","\\html@mathml{"+"\\@binrel{#1}{\\mathrlap{#1}\\kern0.5px#1}}"+"{\\mathbf{#1}}");//////////////////////////////////////////////////////////////////////
  // LaTeX source2e
  // \expandafter\let\expandafter\@normalcr
  //     \csname\expandafter\@gobble\string\\ \endcsname
  // \DeclareRobustCommand\newline{\@normalcr\relax}
  defineMacro("\\newline","\\\\\\relax");// \def\TeX{T\kern-.1667em\lower.5ex\hbox{E}\kern-.125emX\@}
  // TODO: Doesn't normally work in math mode because \@ fails.  KaTeX doesn't
  // support \@ yet, so that's omitted, and we add \text so that the result
  // doesn't look funny in math mode.
  defineMacro("\\TeX","\\textrm{\\html@mathml{"+"T\\kern-.1667em\\raisebox{-.5ex}{E}\\kern-.125emX"+"}{TeX}}");// \DeclareRobustCommand{\LaTeX}{L\kern-.36em%
  //         {\sbox\z@ T%
  //          \vbox to\ht\z@{\hbox{\check@mathfonts
  //                               \fontsize\sf@size\z@
  //                               \math@fontsfalse\selectfont
  //                               A}%
  //                         \vss}%
  //         }%
  //         \kern-.15em%
  //         \TeX}
  // This code aligns the top of the A with the T (from the perspective of TeX's
  // boxes, though visually the A appears to extend above slightly).
  // We compute the corresponding \raisebox when A is rendered in \normalsize
  // \scriptstyle, which has a scale factor of 0.7 (see Options.js).
  var latexRaiseA=fontMetricsData["Main-Regular"]["T".charCodeAt(0)][1]-0.7*fontMetricsData["Main-Regular"]["A".charCodeAt(0)][1]+"em";defineMacro("\\LaTeX","\\textrm{\\html@mathml{"+("L\\kern-.36em\\raisebox{"+latexRaiseA+"}{\\scriptstyle A}")+"\\kern-.15em\\TeX}{LaTeX}}");// New KaTeX logo based on tweaking LaTeX logo
  defineMacro("\\KaTeX","\\textrm{\\html@mathml{"+("K\\kern-.17em\\raisebox{"+latexRaiseA+"}{\\scriptstyle A}")+"\\kern-.15em\\TeX}{KaTeX}}");// \DeclareRobustCommand\hspace{\@ifstar\@hspacer\@hspace}
  // \def\@hspace#1{\hskip  #1\relax}
  // \def\@hspacer#1{\vrule \@width\z@\nobreak
  //                 \hskip #1\hskip \z@skip}
  defineMacro("\\hspace","\\@ifstar\\@hspacer\\@hspace");defineMacro("\\@hspace","\\hskip #1\\relax");defineMacro("\\@hspacer","\\rule{0pt}{0pt}\\hskip #1\\relax");//////////////////////////////////////////////////////////////////////
  // mathtools.sty
  //\providecommand\ordinarycolon{:}
  defineMacro("\\ordinarycolon",":");//\def\vcentcolon{\mathrel{\mathop\ordinarycolon}}
  //TODO(edemaine): Not yet centered. Fix via \raisebox or #726
  defineMacro("\\vcentcolon","\\mathrel{\\mathop\\ordinarycolon}");// \providecommand*\dblcolon{\vcentcolon\mathrel{\mkern-.9mu}\vcentcolon}
  defineMacro("\\dblcolon","\\html@mathml{"+"\\mathrel{\\vcentcolon\\mathrel{\\mkern-.9mu}\\vcentcolon}}"+"{\\mathop{\\char\"2237}}");// \providecommand*\coloneqq{\vcentcolon\mathrel{\mkern-1.2mu}=}
  defineMacro("\\coloneqq","\\html@mathml{"+"\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}=}}"+"{\\mathop{\\char\"2254}}");// ≔
  // \providecommand*\Coloneqq{\dblcolon\mathrel{\mkern-1.2mu}=}
  defineMacro("\\Coloneqq","\\html@mathml{"+"\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}=}}"+"{\\mathop{\\char\"2237\\char\"3d}}");// \providecommand*\coloneq{\vcentcolon\mathrel{\mkern-1.2mu}\mathrel{-}}
  defineMacro("\\coloneq","\\html@mathml{"+"\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\mathrel{-}}}"+"{\\mathop{\\char\"3a\\char\"2212}}");// \providecommand*\Coloneq{\dblcolon\mathrel{\mkern-1.2mu}\mathrel{-}}
  defineMacro("\\Coloneq","\\html@mathml{"+"\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\mathrel{-}}}"+"{\\mathop{\\char\"2237\\char\"2212}}");// \providecommand*\eqqcolon{=\mathrel{\mkern-1.2mu}\vcentcolon}
  defineMacro("\\eqqcolon","\\html@mathml{"+"\\mathrel{=\\mathrel{\\mkern-1.2mu}\\vcentcolon}}"+"{\\mathop{\\char\"2255}}");// ≕
  // \providecommand*\Eqqcolon{=\mathrel{\mkern-1.2mu}\dblcolon}
  defineMacro("\\Eqqcolon","\\html@mathml{"+"\\mathrel{=\\mathrel{\\mkern-1.2mu}\\dblcolon}}"+"{\\mathop{\\char\"3d\\char\"2237}}");// \providecommand*\eqcolon{\mathrel{-}\mathrel{\mkern-1.2mu}\vcentcolon}
  defineMacro("\\eqcolon","\\html@mathml{"+"\\mathrel{\\mathrel{-}\\mathrel{\\mkern-1.2mu}\\vcentcolon}}"+"{\\mathop{\\char\"2239}}");// \providecommand*\Eqcolon{\mathrel{-}\mathrel{\mkern-1.2mu}\dblcolon}
  defineMacro("\\Eqcolon","\\html@mathml{"+"\\mathrel{\\mathrel{-}\\mathrel{\\mkern-1.2mu}\\dblcolon}}"+"{\\mathop{\\char\"2212\\char\"2237}}");// \providecommand*\colonapprox{\vcentcolon\mathrel{\mkern-1.2mu}\approx}
  defineMacro("\\colonapprox","\\html@mathml{"+"\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\approx}}"+"{\\mathop{\\char\"3a\\char\"2248}}");// \providecommand*\Colonapprox{\dblcolon\mathrel{\mkern-1.2mu}\approx}
  defineMacro("\\Colonapprox","\\html@mathml{"+"\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\approx}}"+"{\\mathop{\\char\"2237\\char\"2248}}");// \providecommand*\colonsim{\vcentcolon\mathrel{\mkern-1.2mu}\sim}
  defineMacro("\\colonsim","\\html@mathml{"+"\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\sim}}"+"{\\mathop{\\char\"3a\\char\"223c}}");// \providecommand*\Colonsim{\dblcolon\mathrel{\mkern-1.2mu}\sim}
  defineMacro("\\Colonsim","\\html@mathml{"+"\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\sim}}"+"{\\mathop{\\char\"2237\\char\"223c}}");// Some Unicode characters are implemented with macros to mathtools functions.
  defineMacro("\u2237","\\dblcolon");// ::
  defineMacro("\u2239","\\eqcolon");// -:
  defineMacro("\u2254","\\coloneqq");// :=
  defineMacro("\u2255","\\eqqcolon");// =:
  defineMacro("\u2A74","\\Coloneqq");// ::=
  //////////////////////////////////////////////////////////////////////
  // colonequals.sty
  // Alternate names for mathtools's macros:
  defineMacro("\\ratio","\\vcentcolon");defineMacro("\\coloncolon","\\dblcolon");defineMacro("\\colonequals","\\coloneqq");defineMacro("\\coloncolonequals","\\Coloneqq");defineMacro("\\equalscolon","\\eqqcolon");defineMacro("\\equalscoloncolon","\\Eqqcolon");defineMacro("\\colonminus","\\coloneq");defineMacro("\\coloncolonminus","\\Coloneq");defineMacro("\\minuscolon","\\eqcolon");defineMacro("\\minuscoloncolon","\\Eqcolon");// \colonapprox name is same in mathtools and colonequals.
  defineMacro("\\coloncolonapprox","\\Colonapprox");// \colonsim name is same in mathtools and colonequals.
  defineMacro("\\coloncolonsim","\\Colonsim");// Additional macros, implemented by analogy with mathtools definitions:
  defineMacro("\\simcolon","\\mathrel{\\sim\\mathrel{\\mkern-1.2mu}\\vcentcolon}");defineMacro("\\simcoloncolon","\\mathrel{\\sim\\mathrel{\\mkern-1.2mu}\\dblcolon}");defineMacro("\\approxcolon","\\mathrel{\\approx\\mathrel{\\mkern-1.2mu}\\vcentcolon}");defineMacro("\\approxcoloncolon","\\mathrel{\\approx\\mathrel{\\mkern-1.2mu}\\dblcolon}");// Present in newtxmath, pxfonts and txfonts
  defineMacro("\\notni","\\html@mathml{\\not\\ni}{\\mathrel{\\char`\u220C}}");defineMacro("\\limsup","\\DOTSB\\operatorname*{lim\\,sup}");defineMacro("\\liminf","\\DOTSB\\operatorname*{lim\\,inf}");//////////////////////////////////////////////////////////////////////
  // From amsopn.sty
  defineMacro("\\injlim","\\DOTSB\\operatorname*{inj\\,lim}");defineMacro("\\projlim","\\DOTSB\\operatorname*{proj\\,lim}");defineMacro("\\varlimsup","\\DOTSB\\operatorname*{\\overline{lim}}");defineMacro("\\varliminf","\\DOTSB\\operatorname*{\\underline{lim}}");defineMacro("\\varinjlim","\\DOTSB\\operatorname*{\\underrightarrow{lim}}");defineMacro("\\varprojlim","\\DOTSB\\operatorname*{\\underleftarrow{lim}}");//////////////////////////////////////////////////////////////////////
  // MathML alternates for KaTeX glyphs in the Unicode private area
  defineMacro("\\gvertneqq","\\html@mathml{\\@gvertneqq}{\u2269}");defineMacro("\\lvertneqq","\\html@mathml{\\@lvertneqq}{\u2268}");defineMacro("\\ngeqq","\\html@mathml{\\@ngeqq}{\u2271}");defineMacro("\\ngeqslant","\\html@mathml{\\@ngeqslant}{\u2271}");defineMacro("\\nleqq","\\html@mathml{\\@nleqq}{\u2270}");defineMacro("\\nleqslant","\\html@mathml{\\@nleqslant}{\u2270}");defineMacro("\\nshortmid","\\html@mathml{\\@nshortmid}{∤}");defineMacro("\\nshortparallel","\\html@mathml{\\@nshortparallel}{∦}");defineMacro("\\nsubseteqq","\\html@mathml{\\@nsubseteqq}{\u2288}");defineMacro("\\nsupseteqq","\\html@mathml{\\@nsupseteqq}{\u2289}");defineMacro("\\varsubsetneq","\\html@mathml{\\@varsubsetneq}{⊊}");defineMacro("\\varsubsetneqq","\\html@mathml{\\@varsubsetneqq}{⫋}");defineMacro("\\varsupsetneq","\\html@mathml{\\@varsupsetneq}{⊋}");defineMacro("\\varsupsetneqq","\\html@mathml{\\@varsupsetneqq}{⫌}");defineMacro("\\imath","\\html@mathml{\\@imath}{\u0131}");defineMacro("\\jmath","\\html@mathml{\\@jmath}{\u0237}");//////////////////////////////////////////////////////////////////////
  // stmaryrd and semantic
  // The stmaryrd and semantic packages render the next four items by calling a
  // glyph. Those glyphs do not exist in the KaTeX fonts. Hence the macros.
  defineMacro("\\llbracket","\\html@mathml{"+"\\mathopen{[\\mkern-3.2mu[}}"+"{\\mathopen{\\char`\u27E6}}");defineMacro("\\rrbracket","\\html@mathml{"+"\\mathclose{]\\mkern-3.2mu]}}"+"{\\mathclose{\\char`\u27E7}}");defineMacro("\u27E6","\\llbracket");// blackboard bold [
  defineMacro("\u27E7","\\rrbracket");// blackboard bold ]
  defineMacro("\\lBrace","\\html@mathml{"+"\\mathopen{\\{\\mkern-3.2mu[}}"+"{\\mathopen{\\char`\u2983}}");defineMacro("\\rBrace","\\html@mathml{"+"\\mathclose{]\\mkern-3.2mu\\}}}"+"{\\mathclose{\\char`\u2984}}");defineMacro("\u2983","\\lBrace");// blackboard bold {
  defineMacro("\u2984","\\rBrace");// blackboard bold }
  // TODO: Create variable sized versions of the last two items. I believe that
  // will require new font glyphs.
  // The stmaryrd function `\minuso` provides a "Plimsoll" symbol that
  // superimposes the characters \circ and \mathminus. Used in chemistry.
  defineMacro("\\minuso","\\mathbin{\\html@mathml{"+"{\\mathrlap{\\mathchoice{\\kern{0.145em}}{\\kern{0.145em}}"+"{\\kern{0.1015em}}{\\kern{0.0725em}}\\circ}{-}}}"+"{\\char`⦵}}");defineMacro("⦵","\\minuso");//////////////////////////////////////////////////////////////////////
  // texvc.sty
  // The texvc package contains macros available in mediawiki pages.
  // We omit the functions deprecated at
  // https://en.wikipedia.org/wiki/Help:Displaying_a_formula#Deprecated_syntax
  // We also omit texvc's \O, which conflicts with \text{\O}
  defineMacro("\\darr","\\downarrow");defineMacro("\\dArr","\\Downarrow");defineMacro("\\Darr","\\Downarrow");defineMacro("\\lang","\\langle");defineMacro("\\rang","\\rangle");defineMacro("\\uarr","\\uparrow");defineMacro("\\uArr","\\Uparrow");defineMacro("\\Uarr","\\Uparrow");defineMacro("\\N","\\mathbb{N}");defineMacro("\\R","\\mathbb{R}");defineMacro("\\Z","\\mathbb{Z}");defineMacro("\\alef","\\aleph");defineMacro("\\alefsym","\\aleph");defineMacro("\\Alpha","\\mathrm{A}");defineMacro("\\Beta","\\mathrm{B}");defineMacro("\\bull","\\bullet");defineMacro("\\Chi","\\mathrm{X}");defineMacro("\\clubs","\\clubsuit");defineMacro("\\cnums","\\mathbb{C}");defineMacro("\\Complex","\\mathbb{C}");defineMacro("\\Dagger","\\ddagger");defineMacro("\\diamonds","\\diamondsuit");defineMacro("\\empty","\\emptyset");defineMacro("\\Epsilon","\\mathrm{E}");defineMacro("\\Eta","\\mathrm{H}");defineMacro("\\exist","\\exists");defineMacro("\\harr","\\leftrightarrow");defineMacro("\\hArr","\\Leftrightarrow");defineMacro("\\Harr","\\Leftrightarrow");defineMacro("\\hearts","\\heartsuit");defineMacro("\\image","\\Im");defineMacro("\\infin","\\infty");defineMacro("\\Iota","\\mathrm{I}");defineMacro("\\isin","\\in");defineMacro("\\Kappa","\\mathrm{K}");defineMacro("\\larr","\\leftarrow");defineMacro("\\lArr","\\Leftarrow");defineMacro("\\Larr","\\Leftarrow");defineMacro("\\lrarr","\\leftrightarrow");defineMacro("\\lrArr","\\Leftrightarrow");defineMacro("\\Lrarr","\\Leftrightarrow");defineMacro("\\Mu","\\mathrm{M}");defineMacro("\\natnums","\\mathbb{N}");defineMacro("\\Nu","\\mathrm{N}");defineMacro("\\Omicron","\\mathrm{O}");defineMacro("\\plusmn","\\pm");defineMacro("\\rarr","\\rightarrow");defineMacro("\\rArr","\\Rightarrow");defineMacro("\\Rarr","\\Rightarrow");defineMacro("\\real","\\Re");defineMacro("\\reals","\\mathbb{R}");defineMacro("\\Reals","\\mathbb{R}");defineMacro("\\Rho","\\mathrm{P}");defineMacro("\\sdot","\\cdot");defineMacro("\\sect","\\S");defineMacro("\\spades","\\spadesuit");defineMacro("\\sub","\\subset");defineMacro("\\sube","\\subseteq");defineMacro("\\supe","\\supseteq");defineMacro("\\Tau","\\mathrm{T}");defineMacro("\\thetasym","\\vartheta");// TODO: defineMacro("\\varcoppa", "\\\mbox{\\coppa}");
  defineMacro("\\weierp","\\wp");defineMacro("\\Zeta","\\mathrm{Z}");//////////////////////////////////////////////////////////////////////
  // statmath.sty
  // https://ctan.math.illinois.edu/macros/latex/contrib/statmath/statmath.pdf
  defineMacro("\\argmin","\\DOTSB\\operatorname*{arg\\,min}");defineMacro("\\argmax","\\DOTSB\\operatorname*{arg\\,max}");defineMacro("\\plim","\\DOTSB\\mathop{\\operatorname{plim}}\\limits");//////////////////////////////////////////////////////////////////////
  // braket.sty
  // http://ctan.math.washington.edu/tex-archive/macros/latex/contrib/braket/braket.pdf
  defineMacro("\\bra","\\mathinner{\\langle{#1}|}");defineMacro("\\ket","\\mathinner{|{#1}\\rangle}");defineMacro("\\braket","\\mathinner{\\langle{#1}\\rangle}");defineMacro("\\Bra","\\left\\langle#1\\right|");defineMacro("\\Ket","\\left|#1\\right\\rangle");//////////////////////////////////////////////////////////////////////
  // actuarialangle.dtx
  defineMacro("\\angln","{\\angl n}");// Custom Khan Academy colors, should be moved to an optional package
  defineMacro("\\blue","\\textcolor{##6495ed}{#1}");defineMacro("\\orange","\\textcolor{##ffa500}{#1}");defineMacro("\\pink","\\textcolor{##ff00af}{#1}");defineMacro("\\red","\\textcolor{##df0030}{#1}");defineMacro("\\green","\\textcolor{##28ae7b}{#1}");defineMacro("\\gray","\\textcolor{gray}{#1}");defineMacro("\\purple","\\textcolor{##9d38bd}{#1}");defineMacro("\\blueA","\\textcolor{##ccfaff}{#1}");defineMacro("\\blueB","\\textcolor{##80f6ff}{#1}");defineMacro("\\blueC","\\textcolor{##63d9ea}{#1}");defineMacro("\\blueD","\\textcolor{##11accd}{#1}");defineMacro("\\blueE","\\textcolor{##0c7f99}{#1}");defineMacro("\\tealA","\\textcolor{##94fff5}{#1}");defineMacro("\\tealB","\\textcolor{##26edd5}{#1}");defineMacro("\\tealC","\\textcolor{##01d1c1}{#1}");defineMacro("\\tealD","\\textcolor{##01a995}{#1}");defineMacro("\\tealE","\\textcolor{##208170}{#1}");defineMacro("\\greenA","\\textcolor{##b6ffb0}{#1}");defineMacro("\\greenB","\\textcolor{##8af281}{#1}");defineMacro("\\greenC","\\textcolor{##74cf70}{#1}");defineMacro("\\greenD","\\textcolor{##1fab54}{#1}");defineMacro("\\greenE","\\textcolor{##0d923f}{#1}");defineMacro("\\goldA","\\textcolor{##ffd0a9}{#1}");defineMacro("\\goldB","\\textcolor{##ffbb71}{#1}");defineMacro("\\goldC","\\textcolor{##ff9c39}{#1}");defineMacro("\\goldD","\\textcolor{##e07d10}{#1}");defineMacro("\\goldE","\\textcolor{##a75a05}{#1}");defineMacro("\\redA","\\textcolor{##fca9a9}{#1}");defineMacro("\\redB","\\textcolor{##ff8482}{#1}");defineMacro("\\redC","\\textcolor{##f9685d}{#1}");defineMacro("\\redD","\\textcolor{##e84d39}{#1}");defineMacro("\\redE","\\textcolor{##bc2612}{#1}");defineMacro("\\maroonA","\\textcolor{##ffbde0}{#1}");defineMacro("\\maroonB","\\textcolor{##ff92c6}{#1}");defineMacro("\\maroonC","\\textcolor{##ed5fa6}{#1}");defineMacro("\\maroonD","\\textcolor{##ca337c}{#1}");defineMacro("\\maroonE","\\textcolor{##9e034e}{#1}");defineMacro("\\purpleA","\\textcolor{##ddd7ff}{#1}");defineMacro("\\purpleB","\\textcolor{##c6b9fc}{#1}");defineMacro("\\purpleC","\\textcolor{##aa87ff}{#1}");defineMacro("\\purpleD","\\textcolor{##7854ab}{#1}");defineMacro("\\purpleE","\\textcolor{##543b78}{#1}");defineMacro("\\mintA","\\textcolor{##f5f9e8}{#1}");defineMacro("\\mintB","\\textcolor{##edf2df}{#1}");defineMacro("\\mintC","\\textcolor{##e0e5cc}{#1}");defineMacro("\\grayA","\\textcolor{##f6f7f7}{#1}");defineMacro("\\grayB","\\textcolor{##f0f1f2}{#1}");defineMacro("\\grayC","\\textcolor{##e3e5e6}{#1}");defineMacro("\\grayD","\\textcolor{##d6d8da}{#1}");defineMacro("\\grayE","\\textcolor{##babec2}{#1}");defineMacro("\\grayF","\\textcolor{##888d93}{#1}");defineMacro("\\grayG","\\textcolor{##626569}{#1}");defineMacro("\\grayH","\\textcolor{##3b3e40}{#1}");defineMacro("\\grayI","\\textcolor{##21242c}{#1}");defineMacro("\\kaBlue","\\textcolor{##314453}{#1}");defineMacro("\\kaGreen","\\textcolor{##71B307}{#1}");/**
       * This file contains the “gullet” where macros are expanded
       * until only non-macro tokens remain.
       */ // List of commands that act like macros but aren't defined as a macro,
  // function, or symbol.  Used in `isDefined`.
  var implicitCommands={"\\relax":true,// MacroExpander.js
  "^":true,// Parser.js
  "_":true,// Parser.js
  "\\limits":true,// Parser.js
  "\\nolimits":true// Parser.js
  };var MacroExpander=/*#__PURE__*/function(){function MacroExpander(input,settings,mode){this.settings=void 0;this.expansionCount=void 0;this.lexer=void 0;this.macros=void 0;this.stack=void 0;this.mode=void 0;this.settings=settings;this.expansionCount=0;this.feed(input);// Make new global namespace
  this.macros=new Namespace(src_macros,settings.macros);this.mode=mode;this.stack=[];// contains tokens in REVERSE order
  }/**
         * Feed a new input string to the same MacroExpander
         * (with existing macros etc.).
         */var _proto=MacroExpander.prototype;_proto.feed=function feed(input){this.lexer=new Lexer(input,this.settings);}/**
         * Switches between "text" and "math" modes.
         */;_proto.switchMode=function switchMode(newMode){this.mode=newMode;}/**
         * Start a new group nesting within all namespaces.
         */;_proto.beginGroup=function beginGroup(){this.macros.beginGroup();}/**
         * End current group nesting within all namespaces.
         */;_proto.endGroup=function endGroup(){this.macros.endGroup();}/**
         * Ends all currently nested groups (if any), restoring values before the
         * groups began.  Useful in case of an error in the middle of parsing.
         */;_proto.endGroups=function endGroups(){this.macros.endGroups();}/**
         * Returns the topmost token on the stack, without expanding it.
         * Similar in behavior to TeX's `\futurelet`.
         */;_proto.future=function future(){if(this.stack.length===0){this.pushToken(this.lexer.lex());}return this.stack[this.stack.length-1];}/**
         * Remove and return the next unexpanded token.
         */;_proto.popToken=function popToken(){this.future();// ensure non-empty stack
  return this.stack.pop();}/**
         * Add a given token to the token stack.  In particular, this get be used
         * to put back a token returned from one of the other methods.
         */;_proto.pushToken=function pushToken(token){this.stack.push(token);}/**
         * Append an array of tokens to the token stack.
         */;_proto.pushTokens=function pushTokens(tokens){var _this$stack;(_this$stack=this.stack).push.apply(_this$stack,tokens);}/**
         * Find an macro argument without expanding tokens and append the array of
         * tokens to the token stack. Uses Token as a container for the result.
         */;_proto.scanArgument=function scanArgument(isOptional){var start;var end;var tokens;if(isOptional){this.consumeSpaces();// \@ifnextchar gobbles any space following it
  if(this.future().text!=="["){return null;}start=this.popToken();// don't include [ in tokens
  var _this$consumeArg=this.consumeArg(["]"]);tokens=_this$consumeArg.tokens;end=_this$consumeArg.end;}else{var _this$consumeArg2=this.consumeArg();tokens=_this$consumeArg2.tokens;start=_this$consumeArg2.start;end=_this$consumeArg2.end;}// indicate the end of an argument
  this.pushToken(new Token("EOF",end.loc));this.pushTokens(tokens);return start.range(end,"");}/**
         * Consume all following space tokens, without expansion.
         */;_proto.consumeSpaces=function consumeSpaces(){for(;;){var token=this.future();if(token.text===" "){this.stack.pop();}else{break;}}}/**
         * Consume an argument from the token stream, and return the resulting array
         * of tokens and start/end token.
         */;_proto.consumeArg=function consumeArg(delims){// The argument for a delimited parameter is the shortest (possibly
  // empty) sequence of tokens with properly nested {...} groups that is
  // followed ... by this particular list of non-parameter tokens.
  // The argument for an undelimited parameter is the next nonblank
  // token, unless that token is ‘{’, when the argument will be the
  // entire {...} group that follows.
  var tokens=[];var isDelimited=delims&&delims.length>0;if(!isDelimited){// Ignore spaces between arguments.  As the TeXbook says:
  // "After you have said ‘\def\row#1#2{...}’, you are allowed to
  //  put spaces between the arguments (e.g., ‘\row x n’), because
  //  TeX doesn’t use single spaces as undelimited arguments."
  this.consumeSpaces();}var start=this.future();var tok;var depth=0;var match=0;do{tok=this.popToken();tokens.push(tok);if(tok.text==="{"){++depth;}else if(tok.text==="}"){--depth;if(depth===-1){throw new src_ParseError("Extra }",tok);}}else if(tok.text==="EOF"){throw new src_ParseError("Unexpected end of input in a macro argument"+", expected '"+(delims&&isDelimited?delims[match]:"}")+"'",tok);}if(delims&&isDelimited){if((depth===0||depth===1&&delims[match]==="{")&&tok.text===delims[match]){++match;if(match===delims.length){// don't include delims in tokens
  tokens.splice(-match,match);break;}}else{match=0;}}}while(depth!==0||isDelimited);// If the argument found ... has the form ‘{<nested tokens>}’,
  // ... the outermost braces enclosing the argument are removed
  if(start.text==="{"&&tokens[tokens.length-1].text==="}"){tokens.pop();tokens.shift();}tokens.reverse();// to fit in with stack order
  return {tokens:tokens,start:start,end:tok};}/**
         * Consume the specified number of (delimited) arguments from the token
         * stream and return the resulting array of arguments.
         */;_proto.consumeArgs=function consumeArgs(numArgs,delimiters){if(delimiters){if(delimiters.length!==numArgs+1){throw new src_ParseError("The length of delimiters doesn't match the number of args!");}var delims=delimiters[0];for(var i=0;i<delims.length;i++){var tok=this.popToken();if(delims[i]!==tok.text){throw new src_ParseError("Use of the macro doesn't match its definition",tok);}}}var args=[];for(var _i=0;_i<numArgs;_i++){args.push(this.consumeArg(delimiters&&delimiters[_i+1]).tokens);}return args;}/**
         * Expand the next token only once if possible.
         *
         * If the token is expanded, the resulting tokens will be pushed onto
         * the stack in reverse order and will be returned as an array,
         * also in reverse order.
         *
         * If not, the next token will be returned without removing it
         * from the stack.  This case can be detected by a `Token` return value
         * instead of an `Array` return value.
         *
         * In either case, the next token will be on the top of the stack,
         * or the stack will be empty.
         *
         * Used to implement `expandAfterFuture` and `expandNextToken`.
         *
         * If expandableOnly, only expandable tokens are expanded and
         * an undefined control sequence results in an error.
         */;_proto.expandOnce=function expandOnce(expandableOnly){var topToken=this.popToken();var name=topToken.text;var expansion=!topToken.noexpand?this._getExpansion(name):null;if(expansion==null||expandableOnly&&expansion.unexpandable){if(expandableOnly&&expansion==null&&name[0]==="\\"&&!this.isDefined(name)){throw new src_ParseError("Undefined control sequence: "+name);}this.pushToken(topToken);return topToken;}this.expansionCount++;if(this.expansionCount>this.settings.maxExpand){throw new src_ParseError("Too many expansions: infinite loop or "+"need to increase maxExpand setting");}var tokens=expansion.tokens;var args=this.consumeArgs(expansion.numArgs,expansion.delimiters);if(expansion.numArgs){// paste arguments in place of the placeholders
  tokens=tokens.slice();// make a shallow copy
  for(var i=tokens.length-1;i>=0;--i){var tok=tokens[i];if(tok.text==="#"){if(i===0){throw new src_ParseError("Incomplete placeholder at end of macro body",tok);}tok=tokens[--i];// next token on stack
  if(tok.text==="#"){// ## → #
  tokens.splice(i+1,1);// drop first #
  }else if(/^[1-9]$/.test(tok.text)){var _tokens;// replace the placeholder with the indicated argument
  (_tokens=tokens).splice.apply(_tokens,[i,2].concat(args[+tok.text-1]));}else{throw new src_ParseError("Not a valid argument number",tok);}}}}// Concatenate expansion onto top of stack.
  this.pushTokens(tokens);return tokens;}/**
         * Expand the next token only once (if possible), and return the resulting
         * top token on the stack (without removing anything from the stack).
         * Similar in behavior to TeX's `\expandafter\futurelet`.
         * Equivalent to expandOnce() followed by future().
         */;_proto.expandAfterFuture=function expandAfterFuture(){this.expandOnce();return this.future();}/**
         * Recursively expand first token, then return first non-expandable token.
         */;_proto.expandNextToken=function expandNextToken(){for(;;){var expanded=this.expandOnce();// expandOnce returns Token if and only if it's fully expanded.
  if(expanded instanceof Token){// \relax stops the expansion, but shouldn't get returned (a
  // null return value couldn't get implemented as a function).
  // the token after \noexpand is interpreted as if its meaning
  // were ‘\relax’
  if(expanded.text==="\\relax"||expanded.treatAsRelax){this.stack.pop();}else{return this.stack.pop();// === expanded
  }}}// Flow unable to figure out that this pathway is impossible.
  // https://github.com/facebook/flow/issues/4808
  throw new Error();// eslint-disable-line no-unreachable
  }/**
         * Fully expand the given macro name and return the resulting list of
         * tokens, or return `undefined` if no such macro is defined.
         */;_proto.expandMacro=function expandMacro(name){return this.macros.has(name)?this.expandTokens([new Token(name)]):undefined;}/**
         * Fully expand the given token stream and return the resulting list of tokens
         */;_proto.expandTokens=function expandTokens(tokens){var output=[];var oldStackLength=this.stack.length;this.pushTokens(tokens);while(this.stack.length>oldStackLength){var expanded=this.expandOnce(true);// expand only expandable tokens
  // expandOnce returns Token if and only if it's fully expanded.
  if(expanded instanceof Token){if(expanded.treatAsRelax){// the expansion of \noexpand is the token itself
  expanded.noexpand=false;expanded.treatAsRelax=false;}output.push(this.stack.pop());}}return output;}/**
         * Fully expand the given macro name and return the result as a string,
         * or return `undefined` if no such macro is defined.
         */;_proto.expandMacroAsText=function expandMacroAsText(name){var tokens=this.expandMacro(name);if(tokens){return tokens.map(function(token){return token.text;}).join("");}else{return tokens;}}/**
         * Returns the expanded macro as a reversed array of tokens and a macro
         * argument count.  Or returns `null` if no such macro.
         */;_proto._getExpansion=function _getExpansion(name){var definition=this.macros.get(name);if(definition==null){// mainly checking for undefined here
  return definition;}// If a single character has an associated catcode other than 13
  // (active character), then don't expand it.
  if(name.length===1){var catcode=this.lexer.catcodes[name];if(catcode!=null&&catcode!==13){return;}}var expansion=typeof definition==="function"?definition(this):definition;if(typeof expansion==="string"){var numArgs=0;if(expansion.indexOf("#")!==-1){var stripped=expansion.replace(/##/g,"");while(stripped.indexOf("#"+(numArgs+1))!==-1){++numArgs;}}var bodyLexer=new Lexer(expansion,this.settings);var tokens=[];var tok=bodyLexer.lex();while(tok.text!=="EOF"){tokens.push(tok);tok=bodyLexer.lex();}tokens.reverse();// to fit in with stack using push and pop
  var expanded={tokens:tokens,numArgs:numArgs};return expanded;}return expansion;}/**
         * Determine whether a command is currently "defined" (has some
         * functionality), meaning that it's a macro (in the current group),
         * a function, a symbol, or one of the special commands listed in
         * `implicitCommands`.
         */;_proto.isDefined=function isDefined(name){return this.macros.has(name)||src_functions.hasOwnProperty(name)||src_symbols.math.hasOwnProperty(name)||src_symbols.text.hasOwnProperty(name)||implicitCommands.hasOwnProperty(name);}/**
         * Determine whether a command is expandable.
         */;_proto.isExpandable=function isExpandable(name){var macro=this.macros.get(name);return macro!=null?typeof macro==="string"||typeof macro==="function"||!macro.unexpandable:src_functions.hasOwnProperty(name)&&!src_functions[name].primitive;};return MacroExpander;}();/* eslint no-constant-condition:0 */ // Pre-evaluate both modules as unicodeSymbols require String.normalize()
  var unicodeAccents={"́":{"text":"\\'","math":"\\acute"},"̀":{"text":"\\`","math":"\\grave"},"̈":{"text":"\\\"","math":"\\ddot"},"̃":{"text":"\\~","math":"\\tilde"},"̄":{"text":"\\=","math":"\\bar"},"̆":{"text":"\\u","math":"\\breve"},"̌":{"text":"\\v","math":"\\check"},"̂":{"text":"\\^","math":"\\hat"},"̇":{"text":"\\.","math":"\\dot"},"̊":{"text":"\\r","math":"\\mathring"},"̋":{"text":"\\H"},"̧":{"text":"\\c"}};var unicodeSymbols={"á":"á","à":"à","ä":"ä","ǟ":"ǟ","ã":"ã","ā":"ā","ă":"ă","ắ":"ắ","ằ":"ằ","ẵ":"ẵ","ǎ":"ǎ","â":"â","ấ":"ấ","ầ":"ầ","ẫ":"ẫ","ȧ":"ȧ","ǡ":"ǡ","å":"å","ǻ":"ǻ","ḃ":"ḃ","ć":"ć","ḉ":"ḉ","č":"č","ĉ":"ĉ","ċ":"ċ","ç":"ç","ď":"ď","ḋ":"ḋ","ḑ":"ḑ","é":"é","è":"è","ë":"ë","ẽ":"ẽ","ē":"ē","ḗ":"ḗ","ḕ":"ḕ","ĕ":"ĕ","ḝ":"ḝ","ě":"ě","ê":"ê","ế":"ế","ề":"ề","ễ":"ễ","ė":"ė","ȩ":"ȩ","ḟ":"ḟ","ǵ":"ǵ","ḡ":"ḡ","ğ":"ğ","ǧ":"ǧ","ĝ":"ĝ","ġ":"ġ","ģ":"ģ","ḧ":"ḧ","ȟ":"ȟ","ĥ":"ĥ","ḣ":"ḣ","ḩ":"ḩ","í":"í","ì":"ì","ï":"ï","ḯ":"ḯ","ĩ":"ĩ","ī":"ī","ĭ":"ĭ","ǐ":"ǐ","î":"î","ǰ":"ǰ","ĵ":"ĵ","ḱ":"ḱ","ǩ":"ǩ","ķ":"ķ","ĺ":"ĺ","ľ":"ľ","ļ":"ļ","ḿ":"ḿ","ṁ":"ṁ","ń":"ń","ǹ":"ǹ","ñ":"ñ","ň":"ň","ṅ":"ṅ","ņ":"ņ","ó":"ó","ò":"ò","ö":"ö","ȫ":"ȫ","õ":"õ","ṍ":"ṍ","ṏ":"ṏ","ȭ":"ȭ","ō":"ō","ṓ":"ṓ","ṑ":"ṑ","ŏ":"ŏ","ǒ":"ǒ","ô":"ô","ố":"ố","ồ":"ồ","ỗ":"ỗ","ȯ":"ȯ","ȱ":"ȱ","ő":"ő","ṕ":"ṕ","ṗ":"ṗ","ŕ":"ŕ","ř":"ř","ṙ":"ṙ","ŗ":"ŗ","ś":"ś","ṥ":"ṥ","š":"š","ṧ":"ṧ","ŝ":"ŝ","ṡ":"ṡ","ş":"ş","ẗ":"ẗ","ť":"ť","ṫ":"ṫ","ţ":"ţ","ú":"ú","ù":"ù","ü":"ü","ǘ":"ǘ","ǜ":"ǜ","ǖ":"ǖ","ǚ":"ǚ","ũ":"ũ","ṹ":"ṹ","ū":"ū","ṻ":"ṻ","ŭ":"ŭ","ǔ":"ǔ","û":"û","ů":"ů","ű":"ű","ṽ":"ṽ","ẃ":"ẃ","ẁ":"ẁ","ẅ":"ẅ","ŵ":"ŵ","ẇ":"ẇ","ẘ":"ẘ","ẍ":"ẍ","ẋ":"ẋ","ý":"ý","ỳ":"ỳ","ÿ":"ÿ","ỹ":"ỹ","ȳ":"ȳ","ŷ":"ŷ","ẏ":"ẏ","ẙ":"ẙ","ź":"ź","ž":"ž","ẑ":"ẑ","ż":"ż","Á":"Á","À":"À","Ä":"Ä","Ǟ":"Ǟ","Ã":"Ã","Ā":"Ā","Ă":"Ă","Ắ":"Ắ","Ằ":"Ằ","Ẵ":"Ẵ","Ǎ":"Ǎ","Â":"Â","Ấ":"Ấ","Ầ":"Ầ","Ẫ":"Ẫ","Ȧ":"Ȧ","Ǡ":"Ǡ","Å":"Å","Ǻ":"Ǻ","Ḃ":"Ḃ","Ć":"Ć","Ḉ":"Ḉ","Č":"Č","Ĉ":"Ĉ","Ċ":"Ċ","Ç":"Ç","Ď":"Ď","Ḋ":"Ḋ","Ḑ":"Ḑ","É":"É","È":"È","Ë":"Ë","Ẽ":"Ẽ","Ē":"Ē","Ḗ":"Ḗ","Ḕ":"Ḕ","Ĕ":"Ĕ","Ḝ":"Ḝ","Ě":"Ě","Ê":"Ê","Ế":"Ế","Ề":"Ề","Ễ":"Ễ","Ė":"Ė","Ȩ":"Ȩ","Ḟ":"Ḟ","Ǵ":"Ǵ","Ḡ":"Ḡ","Ğ":"Ğ","Ǧ":"Ǧ","Ĝ":"Ĝ","Ġ":"Ġ","Ģ":"Ģ","Ḧ":"Ḧ","Ȟ":"Ȟ","Ĥ":"Ĥ","Ḣ":"Ḣ","Ḩ":"Ḩ","Í":"Í","Ì":"Ì","Ï":"Ï","Ḯ":"Ḯ","Ĩ":"Ĩ","Ī":"Ī","Ĭ":"Ĭ","Ǐ":"Ǐ","Î":"Î","İ":"İ","Ĵ":"Ĵ","Ḱ":"Ḱ","Ǩ":"Ǩ","Ķ":"Ķ","Ĺ":"Ĺ","Ľ":"Ľ","Ļ":"Ļ","Ḿ":"Ḿ","Ṁ":"Ṁ","Ń":"Ń","Ǹ":"Ǹ","Ñ":"Ñ","Ň":"Ň","Ṅ":"Ṅ","Ņ":"Ņ","Ó":"Ó","Ò":"Ò","Ö":"Ö","Ȫ":"Ȫ","Õ":"Õ","Ṍ":"Ṍ","Ṏ":"Ṏ","Ȭ":"Ȭ","Ō":"Ō","Ṓ":"Ṓ","Ṑ":"Ṑ","Ŏ":"Ŏ","Ǒ":"Ǒ","Ô":"Ô","Ố":"Ố","Ồ":"Ồ","Ỗ":"Ỗ","Ȯ":"Ȯ","Ȱ":"Ȱ","Ő":"Ő","Ṕ":"Ṕ","Ṗ":"Ṗ","Ŕ":"Ŕ","Ř":"Ř","Ṙ":"Ṙ","Ŗ":"Ŗ","Ś":"Ś","Ṥ":"Ṥ","Š":"Š","Ṧ":"Ṧ","Ŝ":"Ŝ","Ṡ":"Ṡ","Ş":"Ş","Ť":"Ť","Ṫ":"Ṫ","Ţ":"Ţ","Ú":"Ú","Ù":"Ù","Ü":"Ü","Ǘ":"Ǘ","Ǜ":"Ǜ","Ǖ":"Ǖ","Ǚ":"Ǚ","Ũ":"Ũ","Ṹ":"Ṹ","Ū":"Ū","Ṻ":"Ṻ","Ŭ":"Ŭ","Ǔ":"Ǔ","Û":"Û","Ů":"Ů","Ű":"Ű","Ṽ":"Ṽ","Ẃ":"Ẃ","Ẁ":"Ẁ","Ẅ":"Ẅ","Ŵ":"Ŵ","Ẇ":"Ẇ","Ẍ":"Ẍ","Ẋ":"Ẋ","Ý":"Ý","Ỳ":"Ỳ","Ÿ":"Ÿ","Ỹ":"Ỹ","Ȳ":"Ȳ","Ŷ":"Ŷ","Ẏ":"Ẏ","Ź":"Ź","Ž":"Ž","Ẑ":"Ẑ","Ż":"Ż","ά":"ά","ὰ":"ὰ","ᾱ":"ᾱ","ᾰ":"ᾰ","έ":"έ","ὲ":"ὲ","ή":"ή","ὴ":"ὴ","ί":"ί","ὶ":"ὶ","ϊ":"ϊ","ΐ":"ΐ","ῒ":"ῒ","ῑ":"ῑ","ῐ":"ῐ","ό":"ό","ὸ":"ὸ","ύ":"ύ","ὺ":"ὺ","ϋ":"ϋ","ΰ":"ΰ","ῢ":"ῢ","ῡ":"ῡ","ῠ":"ῠ","ώ":"ώ","ὼ":"ὼ","Ύ":"Ύ","Ὺ":"Ὺ","Ϋ":"Ϋ","Ῡ":"Ῡ","Ῠ":"Ῠ","Ώ":"Ώ","Ὼ":"Ὼ"};/**
       * This file contains the parser used to parse out a TeX expression from the
       * input. Since TeX isn't context-free, standard parsers don't work particularly
       * well.
       *
       * The strategy of this parser is as such:
       *
       * The main functions (the `.parse...` ones) take a position in the current
       * parse string to parse tokens from. The lexer (found in Lexer.js, stored at
       * this.gullet.lexer) also supports pulling out tokens at arbitrary places. When
       * individual tokens are needed at a position, the lexer is called to pull out a
       * token, which is then used.
       *
       * The parser has a property called "mode" indicating the mode that
       * the parser is currently in. Currently it has to be one of "math" or
       * "text", which denotes whether the current environment is a math-y
       * one or a text-y one (e.g. inside \text). Currently, this serves to
       * limit the functions which can be used in text mode.
       *
       * The main functions then return an object which contains the useful data that
       * was parsed at its given point, and a new position at the end of the parsed
       * data. The main functions can call each other and continue the parsing by
       * using the returned position as a new starting point.
       *
       * There are also extra `.handle...` functions, which pull out some reused
       * functionality into self-contained functions.
       *
       * The functions return ParseNodes.
       */var Parser=/*#__PURE__*/function(){function Parser(input,settings){this.mode=void 0;this.gullet=void 0;this.settings=void 0;this.leftrightDepth=void 0;this.nextToken=void 0;// Start in math mode
  this.mode="math";// Create a new macro expander (gullet) and (indirectly via that) also a
  // new lexer (mouth) for this parser (stomach, in the language of TeX)
  this.gullet=new MacroExpander(input,settings,this.mode);// Store the settings for use in parsing
  this.settings=settings;// Count leftright depth (for \middle errors)
  this.leftrightDepth=0;}/**
         * Checks a result to make sure it has the right type, and throws an
         * appropriate error otherwise.
         */var _proto=Parser.prototype;_proto.expect=function expect(text,consume){if(consume===void 0){consume=true;}if(this.fetch().text!==text){throw new src_ParseError("Expected '"+text+"', got '"+this.fetch().text+"'",this.fetch());}if(consume){this.consume();}}/**
         * Discards the current lookahead token, considering it consumed.
         */;_proto.consume=function consume(){this.nextToken=null;}/**
         * Return the current lookahead token, or if there isn't one (at the
         * beginning, or if the previous lookahead token was consume()d),
         * fetch the next token as the new lookahead token and return it.
         */;_proto.fetch=function fetch(){if(this.nextToken==null){this.nextToken=this.gullet.expandNextToken();}return this.nextToken;}/**
         * Switches between "text" and "math" modes.
         */;_proto.switchMode=function switchMode(newMode){this.mode=newMode;this.gullet.switchMode(newMode);}/**
         * Main parsing function, which parses an entire input.
         */;_proto.parse=function parse(){if(!this.settings.globalGroup){// Create a group namespace for the math expression.
  // (LaTeX creates a new group for every $...$, $$...$$, \[...\].)
  this.gullet.beginGroup();}// Use old \color behavior (same as LaTeX's \textcolor) if requested.
  // We do this within the group for the math expression, so it doesn't
  // pollute settings.macros.
  if(this.settings.colorIsTextColor){this.gullet.macros.set("\\color","\\textcolor");}try{// Try to parse the input
  var parse=this.parseExpression(false);// If we succeeded, make sure there's an EOF at the end
  this.expect("EOF");// End the group namespace for the expression
  if(!this.settings.globalGroup){this.gullet.endGroup();}return parse;// Close any leftover groups in case of a parse error.
  }finally{this.gullet.endGroups();}};/**
         * Parses an "expression", which is a list of atoms.
         *
         * `breakOnInfix`: Should the parsing stop when we hit infix nodes? This
         *                 happens when functions have higher precendence han infix
         *                 nodes in implicit parses.
         *
         * `breakOnTokenText`: The text of the token that the expression should end
         *                     with, or `null` if something else should end the
         *                     expression.
         */_proto.parseExpression=function parseExpression(breakOnInfix,breakOnTokenText){var body=[];// Keep adding atoms to the body until we can't parse any more atoms (either
  // we reached the end, a }, or a \right)
  while(true){// Ignore spaces in math mode
  if(this.mode==="math"){this.consumeSpaces();}var lex=this.fetch();if(Parser.endOfExpression.indexOf(lex.text)!==-1){break;}if(breakOnTokenText&&lex.text===breakOnTokenText){break;}if(breakOnInfix&&src_functions[lex.text]&&src_functions[lex.text].infix){break;}var atom=this.parseAtom(breakOnTokenText);if(!atom){break;}else if(atom.type==="internal"){continue;}body.push(atom);}if(this.mode==="text"){this.formLigatures(body);}return this.handleInfixNodes(body);}/**
         * Rewrites infix operators such as \over with corresponding commands such
         * as \frac.
         *
         * There can only be one infix operator per group.  If there's more than one
         * then the expression is ambiguous.  This can be resolved by adding {}.
         */;_proto.handleInfixNodes=function handleInfixNodes(body){var overIndex=-1;var funcName;for(var i=0;i<body.length;i++){if(body[i].type==="infix"){if(overIndex!==-1){throw new src_ParseError("only one infix operator per group",body[i].token);}overIndex=i;funcName=body[i].replaceWith;}}if(overIndex!==-1&&funcName){var numerNode;var denomNode;var numerBody=body.slice(0,overIndex);var denomBody=body.slice(overIndex+1);if(numerBody.length===1&&numerBody[0].type==="ordgroup"){numerNode=numerBody[0];}else{numerNode={type:"ordgroup",mode:this.mode,body:numerBody};}if(denomBody.length===1&&denomBody[0].type==="ordgroup"){denomNode=denomBody[0];}else{denomNode={type:"ordgroup",mode:this.mode,body:denomBody};}var node;if(funcName==="\\\\abovefrac"){node=this.callFunction(funcName,[numerNode,body[overIndex],denomNode],[]);}else{node=this.callFunction(funcName,[numerNode,denomNode],[]);}return [node];}else{return body;}}/**
         * Handle a subscript or superscript with nice errors.
         */;_proto.handleSupSubscript=function handleSupSubscript(name// For error reporting.
  ){var symbolToken=this.fetch();var symbol=symbolToken.text;this.consume();this.consumeSpaces();// ignore spaces before sup/subscript argument
  var group=this.parseGroup(name);if(!group){throw new src_ParseError("Expected group after '"+symbol+"'",symbolToken);}return group;}/**
         * Converts the textual input of an unsupported command into a text node
         * contained within a color node whose color is determined by errorColor
         */;_proto.formatUnsupportedCmd=function formatUnsupportedCmd(text){var textordArray=[];for(var i=0;i<text.length;i++){textordArray.push({type:"textord",mode:"text",text:text[i]});}var textNode={type:"text",mode:this.mode,body:textordArray};var colorNode={type:"color",mode:this.mode,color:this.settings.errorColor,body:[textNode]};return colorNode;}/**
         * Parses a group with optional super/subscripts.
         */;_proto.parseAtom=function parseAtom(breakOnTokenText){// The body of an atom is an implicit group, so that things like
  // \left(x\right)^2 work correctly.
  var base=this.parseGroup("atom",breakOnTokenText);// In text mode, we don't have superscripts or subscripts
  if(this.mode==="text"){return base;}// Note that base may be empty (i.e. null) at this point.
  var superscript;var subscript;while(true){// Guaranteed in math mode, so eat any spaces first.
  this.consumeSpaces();// Lex the first token
  var lex=this.fetch();if(lex.text==="\\limits"||lex.text==="\\nolimits"){// We got a limit control
  if(base&&base.type==="op"){var limits=lex.text==="\\limits";base.limits=limits;base.alwaysHandleSupSub=true;}else if(base&&base.type==="operatorname"){if(base.alwaysHandleSupSub){base.limits=lex.text==="\\limits";}}else{throw new src_ParseError("Limit controls must follow a math operator",lex);}this.consume();}else if(lex.text==="^"){// We got a superscript start
  if(superscript){throw new src_ParseError("Double superscript",lex);}superscript=this.handleSupSubscript("superscript");}else if(lex.text==="_"){// We got a subscript start
  if(subscript){throw new src_ParseError("Double subscript",lex);}subscript=this.handleSupSubscript("subscript");}else if(lex.text==="'"){// We got a prime
  if(superscript){throw new src_ParseError("Double superscript",lex);}var prime={type:"textord",mode:this.mode,text:"\\prime"};// Many primes can be grouped together, so we handle this here
  var primes=[prime];this.consume();// Keep lexing tokens until we get something that's not a prime
  while(this.fetch().text==="'"){// For each one, add another prime to the list
  primes.push(prime);this.consume();}// If there's a superscript following the primes, combine that
  // superscript in with the primes.
  if(this.fetch().text==="^"){primes.push(this.handleSupSubscript("superscript"));}// Put everything into an ordgroup as the superscript
  superscript={type:"ordgroup",mode:this.mode,body:primes};}else{// If it wasn't ^, _, or ', stop parsing super/subscripts
  break;}}// Base must be set if superscript or subscript are set per logic above,
  // but need to check here for type check to pass.
  if(superscript||subscript){// If we got either a superscript or subscript, create a supsub
  return {type:"supsub",mode:this.mode,base:base,sup:superscript,sub:subscript};}else{// Otherwise return the original body
  return base;}}/**
         * Parses an entire function, including its base and all of its arguments.
         */;_proto.parseFunction=function parseFunction(breakOnTokenText,name// For determining its context
  ){var token=this.fetch();var func=token.text;var funcData=src_functions[func];if(!funcData){return null;}this.consume();// consume command token
  if(name&&name!=="atom"&&!funcData.allowedInArgument){throw new src_ParseError("Got function '"+func+"' with no arguments"+(name?" as "+name:""),token);}else if(this.mode==="text"&&!funcData.allowedInText){throw new src_ParseError("Can't use function '"+func+"' in text mode",token);}else if(this.mode==="math"&&funcData.allowedInMath===false){throw new src_ParseError("Can't use function '"+func+"' in math mode",token);}var _this$parseArguments=this.parseArguments(func,funcData),args=_this$parseArguments.args,optArgs=_this$parseArguments.optArgs;return this.callFunction(func,args,optArgs,token,breakOnTokenText);}/**
         * Call a function handler with a suitable context and arguments.
         */;_proto.callFunction=function callFunction(name,args,optArgs,token,breakOnTokenText){var context={funcName:name,parser:this,token:token,breakOnTokenText:breakOnTokenText};var func=src_functions[name];if(func&&func.handler){return func.handler(context,args,optArgs);}else{throw new src_ParseError("No function handler for "+name);}}/**
         * Parses the arguments of a function or environment
         */;_proto.parseArguments=function parseArguments(func,// Should look like "\name" or "\begin{name}".
  funcData){var totalArgs=funcData.numArgs+funcData.numOptionalArgs;if(totalArgs===0){return {args:[],optArgs:[]};}var args=[];var optArgs=[];for(var i=0;i<totalArgs;i++){var argType=funcData.argTypes&&funcData.argTypes[i];var isOptional=i<funcData.numOptionalArgs;if(funcData.primitive&&argType==null||funcData.type==="sqrt"&&i===1&&optArgs[0]==null){argType="primitive";}var arg=this.parseGroupOfType("argument to '"+func+"'",argType,isOptional);if(isOptional){optArgs.push(arg);}else if(arg!=null){args.push(arg);}else{// should be unreachable
  throw new src_ParseError("Null argument, please report this as a bug");}}return {args:args,optArgs:optArgs};}/**
         * Parses a group when the mode is changing.
         */;_proto.parseGroupOfType=function parseGroupOfType(name,type,optional){switch(type){case"color":return this.parseColorGroup(optional);case"size":return this.parseSizeGroup(optional);case"url":return this.parseUrlGroup(optional);case"math":case"text":return this.parseArgumentGroup(optional,type);case"hbox":{// hbox argument type wraps the argument in the equivalent of
  // \hbox, which is like \text but switching to \textstyle size.
  var group=this.parseArgumentGroup(optional,"text");return group!=null?{type:"styling",mode:group.mode,body:[group],style:"text"// simulate \textstyle
  }:null;}case"raw":{var token=this.parseStringGroup("raw",optional);return token!=null?{type:"raw",mode:"text",string:token.text}:null;}case"primitive":{if(optional){throw new src_ParseError("A primitive argument cannot be optional");}var _group=this.parseGroup(name);if(_group==null){throw new src_ParseError("Expected group as "+name,this.fetch());}return _group;}case"original":case null:case undefined:return this.parseArgumentGroup(optional);default:throw new src_ParseError("Unknown group type as "+name,this.fetch());}}/**
         * Discard any space tokens, fetching the next non-space token.
         */;_proto.consumeSpaces=function consumeSpaces(){while(this.fetch().text===" "){this.consume();}}/**
         * Parses a group, essentially returning the string formed by the
         * brace-enclosed tokens plus some position information.
         */;_proto.parseStringGroup=function parseStringGroup(modeName,// Used to describe the mode in error messages.
  optional){var argToken=this.gullet.scanArgument(optional);if(argToken==null){return null;}var str="";var nextToken;while((nextToken=this.fetch()).text!=="EOF"){str+=nextToken.text;this.consume();}this.consume();// consume the end of the argument
  argToken.text=str;return argToken;}/**
         * Parses a regex-delimited group: the largest sequence of tokens
         * whose concatenated strings match `regex`. Returns the string
         * formed by the tokens plus some position information.
         */;_proto.parseRegexGroup=function parseRegexGroup(regex,modeName// Used to describe the mode in error messages.
  ){var firstToken=this.fetch();var lastToken=firstToken;var str="";var nextToken;while((nextToken=this.fetch()).text!=="EOF"&&regex.test(str+nextToken.text)){lastToken=nextToken;str+=lastToken.text;this.consume();}if(str===""){throw new src_ParseError("Invalid "+modeName+": '"+firstToken.text+"'",firstToken);}return firstToken.range(lastToken,str);}/**
         * Parses a color description.
         */;_proto.parseColorGroup=function parseColorGroup(optional){var res=this.parseStringGroup("color",optional);if(res==null){return null;}var match=/^(#[a-f0-9]{3}|#?[a-f0-9]{6}|[a-z]+)$/i.exec(res.text);if(!match){throw new src_ParseError("Invalid color: '"+res.text+"'",res);}var color=match[0];if(/^[0-9a-f]{6}$/i.test(color)){// We allow a 6-digit HTML color spec without a leading "#".
  // This follows the xcolor package's HTML color model.
  // Predefined color names are all missed by this RegEx pattern.
  color="#"+color;}return {type:"color-token",mode:this.mode,color:color};}/**
         * Parses a size specification, consisting of magnitude and unit.
         */;_proto.parseSizeGroup=function parseSizeGroup(optional){var res;var isBlank=false;// don't expand before parseStringGroup
  this.gullet.consumeSpaces();if(!optional&&this.gullet.future().text!=="{"){res=this.parseRegexGroup(/^[-+]? *(?:$|\d+|\d+\.\d*|\.\d*) *[a-z]{0,2} *$/,"size");}else{res=this.parseStringGroup("size",optional);}if(!res){return null;}if(!optional&&res.text.length===0){// Because we've tested for what is !optional, this block won't
  // affect \kern, \hspace, etc. It will capture the mandatory arguments
  // to \genfrac and \above.
  res.text="0pt";// Enable \above{}
  isBlank=true;// This is here specifically for \genfrac
  }var match=/([-+]?) *(\d+(?:\.\d*)?|\.\d+) *([a-z]{2})/.exec(res.text);if(!match){throw new src_ParseError("Invalid size: '"+res.text+"'",res);}var data={number:+(match[1]+match[2]),// sign + magnitude, cast to number
  unit:match[3]};if(!validUnit(data)){throw new src_ParseError("Invalid unit: '"+data.unit+"'",res);}return {type:"size",mode:this.mode,value:data,isBlank:isBlank};}/**
         * Parses an URL, checking escaped letters and allowed protocols,
         * and setting the catcode of % as an active character (as in \hyperref).
         */;_proto.parseUrlGroup=function parseUrlGroup(optional){this.gullet.lexer.setCatcode("%",13);// active character
  this.gullet.lexer.setCatcode("~",12);// other character
  var res=this.parseStringGroup("url",optional);this.gullet.lexer.setCatcode("%",14);// comment character
  this.gullet.lexer.setCatcode("~",13);// active character
  if(res==null){return null;}// hyperref package allows backslashes alone in href, but doesn't
  // generate valid links in such cases; we interpret this as
  // "undefined" behaviour, and keep them as-is. Some browser will
  // replace backslashes with forward slashes.
  var url=res.text.replace(/\\([#$%&~_^{}])/g,'$1');return {type:"url",mode:this.mode,url:url};}/**
         * Parses an argument with the mode specified.
         */;_proto.parseArgumentGroup=function parseArgumentGroup(optional,mode){var argToken=this.gullet.scanArgument(optional);if(argToken==null){return null;}var outerMode=this.mode;if(mode){// Switch to specified mode
  this.switchMode(mode);}this.gullet.beginGroup();var expression=this.parseExpression(false,"EOF");// TODO: find an alternative way to denote the end
  this.expect("EOF");// expect the end of the argument
  this.gullet.endGroup();var result={type:"ordgroup",mode:this.mode,loc:argToken.loc,body:expression};if(mode){// Switch mode back
  this.switchMode(outerMode);}return result;}/**
         * Parses an ordinary group, which is either a single nucleus (like "x")
         * or an expression in braces (like "{x+y}") or an implicit group, a group
         * that starts at the current position, and ends right before a higher explicit
         * group ends, or at EOF.
         */;_proto.parseGroup=function parseGroup(name,// For error reporting.
  breakOnTokenText){var firstToken=this.fetch();var text=firstToken.text;var result;// Try to parse an open brace or \begingroup
  if(text==="{"||text==="\\begingroup"){this.consume();var groupEnd=text==="{"?"}":"\\endgroup";this.gullet.beginGroup();// If we get a brace, parse an expression
  var expression=this.parseExpression(false,groupEnd);var lastToken=this.fetch();this.expect(groupEnd);// Check that we got a matching closing brace
  this.gullet.endGroup();result={type:"ordgroup",mode:this.mode,loc:SourceLocation.range(firstToken,lastToken),body:expression,// A group formed by \begingroup...\endgroup is a semi-simple group
  // which doesn't affect spacing in math mode, i.e., is transparent.
  // https://tex.stackexchange.com/questions/1930/when-should-one-
  // use-begingroup-instead-of-bgroup
  semisimple:text==="\\begingroup"||undefined};}else{// If there exists a function with this name, parse the function.
  // Otherwise, just return a nucleus
  result=this.parseFunction(breakOnTokenText,name)||this.parseSymbol();if(result==null&&text[0]==="\\"&&!implicitCommands.hasOwnProperty(text)){if(this.settings.throwOnError){throw new src_ParseError("Undefined control sequence: "+text,firstToken);}result=this.formatUnsupportedCmd(text);this.consume();}}return result;}/**
         * Form ligature-like combinations of characters for text mode.
         * This includes inputs like "--", "---", "``" and "''".
         * The result will simply replace multiple textord nodes with a single
         * character in each value by a single textord node having multiple
         * characters in its value.  The representation is still ASCII source.
         * The group will be modified in place.
         */;_proto.formLigatures=function formLigatures(group){var n=group.length-1;for(var i=0;i<n;++i){var a=group[i];// $FlowFixMe: Not every node type has a `text` property.
  var v=a.text;if(v==="-"&&group[i+1].text==="-"){if(i+1<n&&group[i+2].text==="-"){group.splice(i,3,{type:"textord",mode:"text",loc:SourceLocation.range(a,group[i+2]),text:"---"});n-=2;}else{group.splice(i,2,{type:"textord",mode:"text",loc:SourceLocation.range(a,group[i+1]),text:"--"});n-=1;}}if((v==="'"||v==="`")&&group[i+1].text===v){group.splice(i,2,{type:"textord",mode:"text",loc:SourceLocation.range(a,group[i+1]),text:v+v});n-=1;}}}/**
         * Parse a single symbol out of the string. Here, we handle single character
         * symbols and special functions like \verb.
         */;_proto.parseSymbol=function parseSymbol(){var nucleus=this.fetch();var text=nucleus.text;if(/^\\verb[^a-zA-Z]/.test(text)){this.consume();var arg=text.slice(5);var star=arg.charAt(0)==="*";if(star){arg=arg.slice(1);}// Lexer's tokenRegex is constructed to always have matching
  // first/last characters.
  if(arg.length<2||arg.charAt(0)!==arg.slice(-1)){throw new src_ParseError("\\verb assertion failed --\n                    please report what input caused this bug");}arg=arg.slice(1,-1);// remove first and last char
  return {type:"verb",mode:"text",body:arg,star:star};}// At this point, we should have a symbol, possibly with accents.
  // First expand any accented base symbol according to unicodeSymbols.
  if(unicodeSymbols.hasOwnProperty(text[0])&&!src_symbols[this.mode][text[0]]){// This behavior is not strict (XeTeX-compatible) in math mode.
  if(this.settings.strict&&this.mode==="math"){this.settings.reportNonstrict("unicodeTextInMathMode","Accented Unicode text character \""+text[0]+"\" used in "+"math mode",nucleus);}text=unicodeSymbols[text[0]]+text.substr(1);}// Strip off any combining characters
  var match=combiningDiacriticalMarksEndRegex.exec(text);if(match){text=text.substring(0,match.index);if(text==='i'){text="\u0131";// dotless i, in math and text mode
  }else if(text==='j'){text="\u0237";// dotless j, in math and text mode
  }}// Recognize base symbol
  var symbol;if(src_symbols[this.mode][text]){if(this.settings.strict&&this.mode==='math'&&extraLatin.indexOf(text)>=0){this.settings.reportNonstrict("unicodeTextInMathMode","Latin-1/Unicode text character \""+text[0]+"\" used in "+"math mode",nucleus);}var group=src_symbols[this.mode][text].group;var loc=SourceLocation.range(nucleus);var s;if(ATOMS.hasOwnProperty(group)){// $FlowFixMe
  var family=group;s={type:"atom",mode:this.mode,family:family,loc:loc,text:text};}else{// $FlowFixMe
  s={type:group,mode:this.mode,loc:loc,text:text};}// $FlowFixMe
  symbol=s;}else if(text.charCodeAt(0)>=0x80){// no symbol for e.g. ^
  if(this.settings.strict){if(!supportedCodepoint(text.charCodeAt(0))){this.settings.reportNonstrict("unknownSymbol","Unrecognized Unicode character \""+text[0]+"\""+(" ("+text.charCodeAt(0)+")"),nucleus);}else if(this.mode==="math"){this.settings.reportNonstrict("unicodeTextInMathMode","Unicode text character \""+text[0]+"\" used in math mode",nucleus);}}// All nonmathematical Unicode characters are rendered as if they
  // are in text mode (wrapped in \text) because that's what it
  // takes to render them in LaTeX.  Setting `mode: this.mode` is
  // another natural choice (the user requested math mode), but
  // this makes it more difficult for getCharacterMetrics() to
  // distinguish Unicode characters without metrics and those for
  // which we want to simulate the letter M.
  symbol={type:"textord",mode:"text",loc:SourceLocation.range(nucleus),text:text};}else{return null;// EOF, ^, _, {, }, etc.
  }this.consume();// Transform combining characters into accents
  if(match){for(var i=0;i<match[0].length;i++){var accent=match[0][i];if(!unicodeAccents[accent]){throw new src_ParseError("Unknown accent ' "+accent+"'",nucleus);}var command=unicodeAccents[accent][this.mode]||unicodeAccents[accent].text;if(!command){throw new src_ParseError("Accent "+accent+" unsupported in "+this.mode+" mode",nucleus);}symbol={type:"accent",mode:this.mode,loc:SourceLocation.range(nucleus),label:command,isStretchy:false,isShifty:true,// $FlowFixMe
  base:symbol};}}// $FlowFixMe
  return symbol;};return Parser;}();Parser.endOfExpression=["}","\\endgroup","\\end","\\right","&"];/**
       * Provides a single function for parsing an expression using a Parser
       * TODO(emily): Remove this
       */ /**
       * Parses an expression using a Parser, then returns the parsed result.
       */var parseTree=function parseTree(toParse,settings){if(!(typeof toParse==='string'||toParse instanceof String)){throw new TypeError('KaTeX can only parse string typed expression');}var parser=new Parser(toParse,settings);// Blank out any \df@tag to avoid spurious "Duplicate \tag" errors
  delete parser.gullet.macros.current["\\df@tag"];var tree=parser.parse();// Prevent a color definition from persisting between calls to katex.render().
  delete parser.gullet.macros.current["\\current@color"];delete parser.gullet.macros.current["\\color"];// If the input used \tag, it will set the \df@tag macro to the tag.
  // In this case, we separately parse the tag and wrap the tree.
  if(parser.gullet.macros.get("\\df@tag")){if(!settings.displayMode){throw new src_ParseError("\\tag works only in display equations");}parser.gullet.feed("\\df@tag");tree=[{type:"tag",mode:"text",body:tree,tag:parser.parse()}];}return tree;};/* harmony default export */var src_parseTree=parseTree;/* eslint no-console:0 */ /**
       * This is the main entry point for KaTeX. Here, we expose functions for
       * rendering expressions either to DOM nodes or to markup strings.
       *
       * We also expose the ParseError class to check if errors thrown from KaTeX are
       * errors in the expression, or errors in javascript handling.
       */ /**
       * Parse and build an expression, and place that expression in the DOM node
       * given.
       */var render=function render(expression,baseNode,options){baseNode.textContent="";var node=renderToDomTree(expression,options).toNode();baseNode.appendChild(node);};// KaTeX's styles don't work properly in quirks mode. Print out an error, and
  // disable rendering.
  if(typeof document!=="undefined"){if(document.compatMode!=="CSS1Compat"){typeof console!=="undefined"&&console.warn("Warning: KaTeX doesn't work in quirks mode. Make sure your "+"website has a suitable doctype.");render=function render(){throw new src_ParseError("KaTeX doesn't work in quirks mode.");};}}/**
       * Parse and build an expression, and return the markup for that.
       */var renderToString=function renderToString(expression,options){var markup=renderToDomTree(expression,options).toMarkup();return markup;};/**
       * Parse an expression and return the parse tree.
       */var generateParseTree=function generateParseTree(expression,options){var settings=new Settings(options);return src_parseTree(expression,settings);};/**
       * If the given error is a KaTeX ParseError and options.throwOnError is false,
       * renders the invalid LaTeX as a span with hover title giving the KaTeX
       * error message.  Otherwise, simply throws the error.
       */var renderError=function renderError(error,expression,options){if(options.throwOnError||!(error instanceof src_ParseError)){throw error;}var node=buildCommon.makeSpan(["katex-error"],[new SymbolNode(expression)]);node.setAttribute("title",error.toString());node.setAttribute("style","color:"+options.errorColor);return node;};/**
       * Generates and returns the katex build tree. This is used for advanced
       * use cases (like rendering to custom output).
       */var renderToDomTree=function renderToDomTree(expression,options){var settings=new Settings(options);try{var tree=src_parseTree(expression,settings);return buildTree(tree,expression,settings);}catch(error){return renderError(error,expression,settings);}};/**
       * Generates and returns the katex build tree, with just HTML (no MathML).
       * This is used for advanced use cases (like rendering to custom output).
       */var renderToHTMLTree=function renderToHTMLTree(expression,options){var settings=new Settings(options);try{var tree=src_parseTree(expression,settings);return buildHTMLTree(tree,expression,settings);}catch(error){return renderError(error,expression,settings);}};/* harmony default export */var katex={/**
         * Current KaTeX version
         */version:"0.13.16",/**
         * Renders the given LaTeX into an HTML+MathML combination, and adds
         * it as a child to the specified DOM node.
         */render:render,/**
         * Renders the given LaTeX into an HTML+MathML combination string,
         * for sending to the client.
         */renderToString:renderToString,/**
         * KaTeX error, usually during parsing.
         */ParseError:src_ParseError,/**
         * Parses the given LaTeX into KaTeX's internal parse tree structure,
         * without rendering to HTML or MathML.
         *
         * NOTE: This method is not currently recommended for public use.
         * The internal tree representation is unstable and is very likely
         * to change. Use at your own risk.
         */__parse:generateParseTree,/**
         * Renders the given LaTeX into an HTML+MathML internal DOM tree
         * representation, without flattening that representation to a string.
         *
         * NOTE: This method is not currently recommended for public use.
         * The internal tree representation is unstable and is very likely
         * to change. Use at your own risk.
         */__renderToDomTree:renderToDomTree,/**
         * Renders the given LaTeX into an HTML internal DOM tree representation,
         * without MathML and without flattening that representation to a string.
         *
         * NOTE: This method is not currently recommended for public use.
         * The internal tree representation is unstable and is very likely
         * to change. Use at your own risk.
         */__renderToHTMLTree:renderToHTMLTree,/**
         * extends internal font metrics object with a new object
         * each key in the new object represents a font name
         */__setFontMetrics:setFontMetrics,/**
         * adds a new symbol to builtin symbols table
         */__defineSymbol:defineSymbol,/**
         * adds a new macro to builtin macro list
         */__defineMacro:defineMacro,/**
         * Expose the dom tree node types, which can be useful for type checking nodes.
         *
         * NOTE: This method is not currently recommended for public use.
         * The internal tree representation is unstable and is very likely
         * to change. Use at your own risk.
         */__domTree:{Span:Span,Anchor:Anchor,SymbolNode:SymbolNode,SvgNode:SvgNode,PathNode:PathNode,LineNode:LineNode}};/**
       * This is the webpack entry point for KaTeX. As ECMAScript, flow[1] and jest[2]
       * doesn't support CSS modules natively, a separate entry point is used and
       * it is not flowtyped.
       *
       * [1] https://gist.github.com/lambdahands/d19e0da96285b749f0ef
       * [2] https://facebook.github.io/jest/docs/en/webpack.html
       */return katex;});}()();

  function earcut(data, holeIndices, dim) {
    dim = dim || 2;
    var hasHoles = holeIndices && holeIndices.length,
        outerLen = hasHoles ? holeIndices[0] * dim : data.length,
        outerNode = linkedList(data, 0, outerLen, dim, true),
        triangles = [];
    if (!outerNode || outerNode.next === outerNode.prev) return triangles;
    var minX, minY, maxX, maxY, x, y, invSize;
    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim); // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox

    if (data.length > 80 * dim) {
      minX = maxX = data[0];
      minY = maxY = data[1];

      for (var i = dim; i < outerLen; i += dim) {
        x = data[i];
        y = data[i + 1];
        if (x < minX) minX = x;
        if (y < minY) minY = y;
        if (x > maxX) maxX = x;
        if (y > maxY) maxY = y;
      } // minX, minY and invSize are later used to transform coords into integers for z-order calculation


      invSize = Math.max(maxX - minX, maxY - minY);
      invSize = invSize !== 0 ? 1 / invSize : 0;
    }

    earcutLinked(outerNode, triangles, dim, minX, minY, invSize);
    return triangles;
  } // create a circular doubly linked list from polygon points in the specified winding order


  function linkedList(data, start, end, dim, clockwise) {
    var i, last;

    if (clockwise === signedArea(data, start, end, dim) > 0) {
      for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);
    } else {
      for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);
    }

    if (last && equals(last, last.next)) {
      removeNode(last);
      last = last.next;
    }

    return last;
  } // eliminate colinear or duplicate points


  function filterPoints(start, end) {
    if (!start) return start;
    if (!end) end = start;
    var p = start,
        again;

    do {
      again = false;

      if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {
        removeNode(p);
        p = end = p.prev;
        if (p === p.next) break;
        again = true;
      } else {
        p = p.next;
      }
    } while (again || p !== end);

    return end;
  } // main ear slicing loop which triangulates a polygon (given as a linked list)


  function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
    if (!ear) return; // interlink polygon nodes in z-order

    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);
    var stop = ear,
        prev,
        next; // iterate through ears, slicing them one by one

    while (ear.prev !== ear.next) {
      prev = ear.prev;
      next = ear.next;

      if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {
        // cut off the triangle
        triangles.push(prev.i / dim);
        triangles.push(ear.i / dim);
        triangles.push(next.i / dim);
        removeNode(ear); // skipping the next vertex leads to less sliver triangles

        ear = next.next;
        stop = next.next;
        continue;
      }

      ear = next; // if we looped through the whole remaining polygon and can't find any more ears

      if (ear === stop) {
        // try filtering points and slicing again
        if (!pass) {
          earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1); // if this didn't work, try curing all small self-intersections locally
        } else if (pass === 1) {
          ear = cureLocalIntersections(filterPoints(ear), triangles, dim);
          earcutLinked(ear, triangles, dim, minX, minY, invSize, 2); // as a last resort, try splitting the remaining polygon into two
        } else if (pass === 2) {
          splitEarcut(ear, triangles, dim, minX, minY, invSize);
        }

        break;
      }
    }
  } // check whether a polygon node forms a valid ear with adjacent nodes


  function isEar(ear) {
    var a = ear.prev,
        b = ear,
        c = ear.next;
    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear
    // now make sure we don't have other points inside the potential ear

    var p = ear.next.next;

    while (p !== ear.prev) {
      if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
      p = p.next;
    }

    return true;
  }

  function isEarHashed(ear, minX, minY, invSize) {
    var a = ear.prev,
        b = ear,
        c = ear.next;
    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear
    // triangle bbox; min & max are calculated like this for speed

    var minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x,
        minTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y,
        maxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x,
        maxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y; // z-order range for the current triangle bbox;

    var minZ = zOrder(minTX, minTY, minX, minY, invSize),
        maxZ = zOrder(maxTX, maxTY, minX, minY, invSize);
    var p = ear.prevZ,
        n = ear.nextZ; // look for points inside the triangle in both directions

    while (p && p.z >= minZ && n && n.z <= maxZ) {
      if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
      p = p.prevZ;
      if (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;
      n = n.nextZ;
    } // look for remaining points in decreasing z-order


    while (p && p.z >= minZ) {
      if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
      p = p.prevZ;
    } // look for remaining points in increasing z-order


    while (n && n.z <= maxZ) {
      if (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;
      n = n.nextZ;
    }

    return true;
  } // go through all polygon nodes and cure small local self-intersections


  function cureLocalIntersections(start, triangles, dim) {
    var p = start;

    do {
      var a = p.prev,
          b = p.next.next;

      if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {
        triangles.push(a.i / dim);
        triangles.push(p.i / dim);
        triangles.push(b.i / dim); // remove two nodes involved

        removeNode(p);
        removeNode(p.next);
        p = start = b;
      }

      p = p.next;
    } while (p !== start);

    return filterPoints(p);
  } // try splitting polygon into two and triangulate them independently


  function splitEarcut(start, triangles, dim, minX, minY, invSize) {
    // look for a valid diagonal that divides the polygon into two
    var a = start;

    do {
      var b = a.next.next;

      while (b !== a.prev) {
        if (a.i !== b.i && isValidDiagonal(a, b)) {
          // split the polygon in two by the diagonal
          var c = splitPolygon(a, b); // filter colinear points around the cuts

          a = filterPoints(a, a.next);
          c = filterPoints(c, c.next); // run earcut on each half

          earcutLinked(a, triangles, dim, minX, minY, invSize);
          earcutLinked(c, triangles, dim, minX, minY, invSize);
          return;
        }

        b = b.next;
      }

      a = a.next;
    } while (a !== start);
  } // link every hole into the outer loop, producing a single-ring polygon without holes


  function eliminateHoles(data, holeIndices, outerNode, dim) {
    var queue = [],
        i,
        len,
        start,
        end,
        list;

    for (i = 0, len = holeIndices.length; i < len; i++) {
      start = holeIndices[i] * dim;
      end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
      list = linkedList(data, start, end, dim, false);
      if (list === list.next) list.steiner = true;
      queue.push(getLeftmost(list));
    }

    queue.sort(compareX); // process holes from left to right

    for (i = 0; i < queue.length; i++) {
      outerNode = eliminateHole(queue[i], outerNode);
      outerNode = filterPoints(outerNode, outerNode.next);
    }

    return outerNode;
  }

  function compareX(a, b) {
    return a.x - b.x;
  } // find a bridge between vertices that connects hole with an outer ring and and link it


  function eliminateHole(hole, outerNode) {
    var bridge = findHoleBridge(hole, outerNode);

    if (!bridge) {
      return outerNode;
    }

    var bridgeReverse = splitPolygon(bridge, hole); // filter collinear points around the cuts

    var filteredBridge = filterPoints(bridge, bridge.next);
    filterPoints(bridgeReverse, bridgeReverse.next); // Check if input node was removed by the filtering

    return outerNode === bridge ? filteredBridge : outerNode;
  } // David Eberly's algorithm for finding a bridge between hole and outer polygon


  function findHoleBridge(hole, outerNode) {
    var p = outerNode,
        hx = hole.x,
        hy = hole.y,
        qx = -Infinity,
        m; // find a segment intersected by a ray from the hole's leftmost point to the left;
    // segment's endpoint with lesser x will be potential connection point

    do {
      if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {
        var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);

        if (x <= hx && x > qx) {
          qx = x;

          if (x === hx) {
            if (hy === p.y) return p;
            if (hy === p.next.y) return p.next;
          }

          m = p.x < p.next.x ? p : p.next;
        }
      }

      p = p.next;
    } while (p !== outerNode);

    if (!m) return null;
    if (hx === qx) return m; // hole touches outer segment; pick leftmost endpoint
    // look for points inside the triangle of hole point, segment intersection and endpoint;
    // if there are no points found, we have a valid connection;
    // otherwise choose the point of the minimum angle with the ray as connection point

    var stop = m,
        mx = m.x,
        my = m.y,
        tanMin = Infinity,
        tan;
    p = m;

    do {
      if (hx >= p.x && p.x >= mx && hx !== p.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {
        tan = Math.abs(hy - p.y) / (hx - p.x); // tangential

        if (locallyInside(p, hole) && (tan < tanMin || tan === tanMin && (p.x > m.x || p.x === m.x && sectorContainsSector(m, p)))) {
          m = p;
          tanMin = tan;
        }
      }

      p = p.next;
    } while (p !== stop);

    return m;
  } // whether sector in vertex m contains sector in vertex p in the same coordinates


  function sectorContainsSector(m, p) {
    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;
  } // interlink polygon nodes in z-order


  function indexCurve(start, minX, minY, invSize) {
    var p = start;

    do {
      if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);
      p.prevZ = p.prev;
      p.nextZ = p.next;
      p = p.next;
    } while (p !== start);

    p.prevZ.nextZ = null;
    p.prevZ = null;
    sortLinked(p);
  } // Simon Tatham's linked list merge sort algorithm
  // http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html


  function sortLinked(list) {
    var i,
        p,
        q,
        e,
        tail,
        numMerges,
        pSize,
        qSize,
        inSize = 1;

    do {
      p = list;
      list = null;
      tail = null;
      numMerges = 0;

      while (p) {
        numMerges++;
        q = p;
        pSize = 0;

        for (i = 0; i < inSize; i++) {
          pSize++;
          q = q.nextZ;
          if (!q) break;
        }

        qSize = inSize;

        while (pSize > 0 || qSize > 0 && q) {
          if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {
            e = p;
            p = p.nextZ;
            pSize--;
          } else {
            e = q;
            q = q.nextZ;
            qSize--;
          }

          if (tail) tail.nextZ = e;else list = e;
          e.prevZ = tail;
          tail = e;
        }

        p = q;
      }

      tail.nextZ = null;
      inSize *= 2;
    } while (numMerges > 1);

    return list;
  } // z-order of a point given coords and inverse of the longer side of data bbox


  function zOrder(x, y, minX, minY, invSize) {
    // coords are transformed into non-negative 15-bit integer range
    x = 32767 * (x - minX) * invSize;
    y = 32767 * (y - minY) * invSize;
    x = (x | x << 8) & 0x00FF00FF;
    x = (x | x << 4) & 0x0F0F0F0F;
    x = (x | x << 2) & 0x33333333;
    x = (x | x << 1) & 0x55555555;
    y = (y | y << 8) & 0x00FF00FF;
    y = (y | y << 4) & 0x0F0F0F0F;
    y = (y | y << 2) & 0x33333333;
    y = (y | y << 1) & 0x55555555;
    return x | y << 1;
  } // find the leftmost node of a polygon ring


  function getLeftmost(start) {
    var p = start,
        leftmost = start;

    do {
      if (p.x < leftmost.x || p.x === leftmost.x && p.y < leftmost.y) leftmost = p;
      p = p.next;
    } while (p !== start);

    return leftmost;
  } // check if a point lies within a convex triangle


  function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
    return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
  } // check if a diagonal between two polygon nodes is valid (lies in polygon interior)


  function isValidDiagonal(a, b) {
    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && ( // dones't intersect other edges
    locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && ( // locally visible
    area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors
    equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case
  } // signed area of a triangle


  function area(p, q, r) {
    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
  } // check if two points are equal


  function equals(p1, p2) {
    return p1.x === p2.x && p1.y === p2.y;
  } // check if two segments intersect


  function intersects(p1, q1, p2, q2) {
    var o1 = sign(area(p1, q1, p2));
    var o2 = sign(area(p1, q1, q2));
    var o3 = sign(area(p2, q2, p1));
    var o4 = sign(area(p2, q2, q1));
    if (o1 !== o2 && o3 !== o4) return true; // general case

    if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1

    if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1

    if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2

    if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2

    return false;
  } // for collinear points p, q, r, check if point q lies on segment pr


  function onSegment(p, q, r) {
    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);
  }

  function sign(num) {
    return num > 0 ? 1 : num < 0 ? -1 : 0;
  } // check if a polygon diagonal intersects any polygon segments


  function intersectsPolygon(a, b) {
    var p = a;

    do {
      if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b)) return true;
      p = p.next;
    } while (p !== a);

    return false;
  } // check if a polygon diagonal is locally inside the polygon


  function locallyInside(a, b) {
    return area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;
  } // check if the middle point of a polygon diagonal is inside the polygon


  function middleInside(a, b) {
    var p = a,
        inside = false,
        px = (a.x + b.x) / 2,
        py = (a.y + b.y) / 2;

    do {
      if (p.y > py !== p.next.y > py && p.next.y !== p.y && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) inside = !inside;
      p = p.next;
    } while (p !== a);

    return inside;
  } // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
  // if one belongs to the outer ring and another to a hole, it merges it into a single ring


  function splitPolygon(a, b) {
    var a2 = new Node(a.i, a.x, a.y),
        b2 = new Node(b.i, b.x, b.y),
        an = a.next,
        bp = b.prev;
    a.next = b;
    b.prev = a;
    a2.next = an;
    an.prev = a2;
    b2.next = a2;
    a2.prev = b2;
    bp.next = b2;
    b2.prev = bp;
    return b2;
  } // create a node and optionally link it with previous one (in a circular doubly linked list)


  function insertNode(i, x, y, last) {
    var p = new Node(i, x, y);

    if (!last) {
      p.prev = p;
      p.next = p;
    } else {
      p.next = last.next;
      p.prev = last;
      last.next.prev = p;
      last.next = p;
    }

    return p;
  }

  function removeNode(p) {
    p.next.prev = p.prev;
    p.prev.next = p.next;
    if (p.prevZ) p.prevZ.nextZ = p.nextZ;
    if (p.nextZ) p.nextZ.prevZ = p.prevZ;
  }

  function Node(i, x, y) {
    // vertex index in coordinates array
    this.i = i; // vertex coordinates

    this.x = x;
    this.y = y; // previous and next vertex nodes in a polygon ring

    this.prev = null;
    this.next = null; // z-order curve value

    this.z = null; // previous and next nodes in z-order

    this.prevZ = null;
    this.nextZ = null; // indicates whether this is a steiner point

    this.steiner = false;
  } // return a percentage difference between the polygon area and its triangulation area;
  // used to verify correctness of triangulation


  earcut.deviation = function (data, holeIndices, dim, triangles) {
    var hasHoles = holeIndices && holeIndices.length;
    var outerLen = hasHoles ? holeIndices[0] * dim : data.length;
    var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));

    if (hasHoles) {
      for (var i = 0, len = holeIndices.length; i < len; i++) {
        var start = holeIndices[i] * dim;
        var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
        polygonArea -= Math.abs(signedArea(data, start, end, dim));
      }
    }

    var trianglesArea = 0;

    for (i = 0; i < triangles.length; i += 3) {
      var a = triangles[i] * dim;
      var b = triangles[i + 1] * dim;
      var c = triangles[i + 2] * dim;
      trianglesArea += Math.abs((data[a] - data[c]) * (data[b + 1] - data[a + 1]) - (data[a] - data[b]) * (data[c + 1] - data[a + 1]));
    }

    return polygonArea === 0 && trianglesArea === 0 ? 0 : Math.abs((trianglesArea - polygonArea) / polygonArea);
  };

  function signedArea(data, start, end, dim) {
    var sum = 0;

    for (var i = start, j = end - dim; i < end; i += dim) {
      sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);
      j = i;
    }

    return sum;
  } // turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts


  earcut.flatten = function (data) {
    var dim = data[0][0].length,
        result = {
      vertices: [],
      holes: [],
      dimensions: dim
    },
        holeIndex = 0;

    for (var i = 0; i < data.length; i++) {
      for (var j = 0; j < data[i].length; j++) {
        for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);
      }

      if (i > 0) {
        holeIndex += data[i - 1].length;
        result.holes.push(holeIndex);
      }
    }

    return result;
  };

  // Given a top-level scene, construct a bunch of information about the scene, outputting a map of context ids ->
  /**
   * Validate, shallow clone instructions and change their zIndex, et cetera
   * @param instruction
   */

  function adjustInstruction(instruction) {
    const type = instruction.type;
    if (!type) throw new Error('Instruction does not have a type. Erroneous instruction: ' + JSON.stringify(instruction));
    let out = Object.assign({}, instruction);
    let zIndex = out.zIndex;
    let escapeContext = out.escapeContext; // Fill in zIndex value for sorting

    if (zIndex === undefined) {
      if (type === 'text') {
        out.zIndex = Infinity;
      } else {
        out.zIndex = 0;
      }
    }

    if (escapeContext === undefined) {
      // Default text value
      if (type === 'text') {
        out.escapeContext = 'top';
      }
    } else if (escapeContext) {
      // Validate
      if (typeof escapeContext !== 'string') {
        throw new Error('Instruction has an invalid escape context value. Erroneous instruction: ' + JSON.stringify(instruction));
      }
    }

    return out;
  }
  /**
   * Return whether a given context is the correct context to escape to, depending on what information is provided.
   * @param context
   * @param escapeContext
   */


  function matchEscapeContext(context, escapeContext) {
    if (typeof escapeContext === 'string') {
      return context.id === escapeContext;
    } else if (typeof escapeContext === 'object') {
      let type = escapeContext.type;
      if (!type) throw new Error('escapeContext has insufficient information to determine which context to escape to');
      return context.info.type !== type;
    } else {
      throw new TypeError("Invalid escapeContext value ".concat(escapeContext));
    }
  }

  class SceneGraph {
    constructor() {
      /**
       * Mapping of <context id> -> <context info>, where contexts are specific subsets of the rendering sequence created
       * by certain groups that allow for operations to be applied to multiple elements. Example: a plot may create a
       * context to scissor element within its boundaries. The context info also contains rendering instructions for that
       * context (incl. buffers and such). The scene graph contains a lot of information!
       * @type {Map<string, {}>}
       */
      this.contextMap = new Map();
      this.id = getStringID();
      /**
       * The renderer this graph is attached to. Certain instructions don't need the renderer to be involved, so this
       * is optional allowing for static analysis of scenes detached from any specific renderer.
       * @type {WebGLRenderer|null}
       */

      this.renderer = null;
      /**
       * Resources used by this scene graph
       * @type {{}}
       */

      this.resources = {
        textures: {},
        buffers: {}
      };
    }

    destroyAll() {
      this.contextMap.clear();
    }
    /**
     * Construct a graph from scratch
     * @param scene
     * @returns {*}
     */


    constructFromScene(scene) {
      this.destroyAll();
      const contextMap = this.contextMap;
      let topContext = {
        parent: null,
        id: 'top',
        info: {
          type: 'top'
        },
        children: [],
        contextDepth: 0
      };
      contextMap.set('top', topContext);
      let currentContext = topContext;
      let contextDepth = 0;
      recursivelyBuild(scene); // Recurse through the scene elements, not yet handling zIndex and escapeContext

      function recursivelyBuild(elem) {
        let children = elem.children;
        let info = elem.getRenderingInfo();
        let instructions = info === null || info === void 0 ? void 0 : info.instructions;
        let contexts = info === null || info === void 0 ? void 0 : info.contexts;
        let initialContext = currentContext;

        if (contexts) {
          // Time to build contexts
          contexts = Array.isArray(contexts) ? contexts : [contexts];

          for (const c of contexts) {
            var _c$id, _c$zIndex;

            contextDepth++;
            let newContext = {
              type: 'context',
              id: (_c$id = c.id) !== null && _c$id !== void 0 ? _c$id : elem.id + '-' + getVersionID(),
              parent: currentContext,
              children: [],
              info: c,
              zIndex: (_c$zIndex = c.zIndex) !== null && _c$zIndex !== void 0 ? _c$zIndex : 0,
              contextDepth,
              escapeContext: c.type === 'escapeContext' ? c.escapeContext : null
            };
            contextMap.set(newContext.id, newContext);
            currentContext.children.push(newContext);
            currentContext = newContext;
          }
        }

        if (instructions) {
          instructions = Array.isArray(instructions) ? instructions : [instructions];
          currentContext.children.push({
            id: elem.id,
            instructions
          });
        }

        if (children) {
          let childrenLen = children.length;

          for (let i = 0; i < childrenLen; ++i) {
            recursivelyBuild(children[i]);
          }
        }

        currentContext = initialContext;
        contextDepth = currentContext.contextDepth;
      }

      return this;
    }

    computeInstructions() {
      // For each context compute a list of instructions that the renderer should run
      const {
        contextMap
      } = this;
      const contexts = Array.from(contextMap.values()).sort((a, b) => b.contextDepth - a.contextDepth);

      for (const c of contexts) {
        const children = c.children;
        const instructions = [];
        const escapingInstructions = []; // eventually, instructions will have the structure {child: id, instructions: [], zIndex: (number)}. zIndex of text
        // instructions is assumed to be Infinity and unspecified zIndex is 0. For now we'll just have a flat map

        for (const child of children) {
          if (child.children) {
            var _child$zIndex;

            // Is context
            let contextInstruction = {
              type: 'context',
              id: child.id,
              zIndex: (_child$zIndex = child.zIndex) !== null && _child$zIndex !== void 0 ? _child$zIndex : 0,
              escapeContext: child.escapeContext
            };

            if (child.escapeContext) {
              escapingInstructions.push(contextInstruction);
            } else {
              instructions.push(contextInstruction); // Add escaped instructions

              for (const inst of child.escapingInstructions) {
                if (matchEscapeContext(c, inst.escapeContext)) instructions.push(inst);else escapingInstructions.push(inst);
              }
            }
          } else {
            for (const instruction of child.instructions) {
              if (!instruction) continue;
              let adj = adjustInstruction(instruction);

              if (adj.escapeContext) {
                escapingInstructions.push(adj);
              } else {
                instructions.push(adj);
              }
            }
          }
        }

        c.instructions = instructions;
        c.escapingInstructions = escapingInstructions;
      }

      for (const c of contextMap.values()) {
        c.instructions.sort((a, b) => a.zIndex - b.zIndex);
      }
    }
    /**
     * Execute a callback on each context of the scene graph
     * @param callback
     */


    forEachContext(callback) {
      for (const context of this.contextMap.values()) callback(context);
    }
    /**
     * Return an array of all text instructions, to be used to generate a text texture
     * @returns {Array}
     */


    getTextInstructions() {
      let ret = [];
      this.forEachContext(c => {
        const instructions = c.instructions;

        for (let i = instructions.length - 1; i >= 0; --i) {
          if (instructions[i].type === 'text') ret.push(instructions[i]);
        }
      });
      return ret;
    }

    loadTextAtlas(img) {
      const renderer = this.renderer;
      const gl = renderer.gl;
      let name = '__' + this.id + '-text';
      let texture = renderer.getTexture(name);
      let needsInitialize = !texture;

      if (needsInitialize) {
        texture = renderer.createTexture(name);
      }

      gl.bindTexture(gl.TEXTURE_2D, texture);

      if (needsInitialize) {
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
      }

      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img);
      this.resources.textAtlas = {
        id: name,
        width: img.width,
        height: img.height
      };
    }

    destroyTextAtlas() {
      const renderer = this.renderer;
      const gl = renderer.gl;
      let name = '__' + this.id + '-text';
      renderer.deleteTexture(name);
    }

    freeCompiledInstructions(inst) {
      if (!inst) return;

      for (const i of inst) {
        if (i.vao) {
          this.renderer.deleteVAO(i.vao);
        }

        if (i.buffers) {
          i.buffers.forEach(b => this.renderer.deleteBuffer(b));
        }
      }
    }

    compile() {
      // Convert context instructions into a series of renderable instructions, generating appropriate vertex arrays and
      // textures. Until this step, the scene graph is independent of the renderer.
      const renderer = this.renderer;
      if (!renderer) throw new Error('Compiling a scene graph requires the graph to be attached to a renderer.');
      const gl = renderer.gl;
      const textRenderer = renderer.textRenderer;
      const textInstructions = this.getTextInstructions();

      if (textInstructions.length !== 0) {
        textRenderer.drawText(textInstructions);
        this.loadTextAtlas(textRenderer.canvas);
      }

      this.forEachContext(context => {
        this.freeCompiledInstructions(context.compiledInstructions);
        const instructions = context.instructions;
        const compiledInstructions = [];

        switch (context.info.type) {
          case 'scene':
          case 'scissor':
            compiledInstructions.push(context.info);
            break;
        } // Super simple (and hella inefficient) for now


        for (const instruction of instructions) {
          switch (instruction.type) {
            case 'context':
              compiledInstructions.push(instruction);
              break;

            case 'polyline':
              {
                let vertices = convertTriangleStrip(instruction.vertices, instruction.pen);
                let color = instruction.pen.color;
                let buffName = context.id + '-' + getVersionID();
                let vaoName = context.id + '-' + getVersionID();
                let buff = renderer.createBuffer(buffName);
                let vao = renderer.createVAO(vaoName);
                gl.bindVertexArray(vao);
                gl.bindBuffer(gl.ARRAY_BUFFER, buff);
                gl.enableVertexAttribArray(0
                /* position buffer */
                );
                gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);
                gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);
                let compiled = {
                  type: 'triangle_strip',
                  vao: vaoName,
                  buffers: [buffName],
                  vertexCount: vertices.length / 2,
                  color
                };
                compiledInstructions.push(compiled);
                break;
              }

            case 'text':
              {
                let tcName = context.id + '-' + getVersionID();
                let scName = context.id + '-' + getVersionID();
                let vaoName = context.id + '-' + getVersionID();
                let textureCoords = renderer.createBuffer(tcName);
                let sceneCoords = renderer.createBuffer(scName);
                let vao = renderer.createVAO(vaoName);
                gl.bindVertexArray(vao);
                gl.bindBuffer(gl.ARRAY_BUFFER, sceneCoords);
                gl.enableVertexAttribArray(0
                /* position buffer */
                );
                gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);
                let pos = instruction.pos,
                    rect = instruction.rect; // Round to pixels so it looks nicer

                rect = {
                  x: pos.x | 0,
                  y: pos.y | 0,
                  w: rect.w,
                  h: rect.h
                };
                gl.bufferData(gl.ARRAY_BUFFER, generateRectangleTriangleStrip(rect), gl.STATIC_DRAW);
                gl.bindBuffer(gl.ARRAY_BUFFER, textureCoords);
                gl.enableVertexAttribArray(1
                /* texture coords buffer */
                );
                gl.vertexAttribPointer(1, 2, gl.FLOAT, false, 0, 0);
                gl.bufferData(gl.ARRAY_BUFFER, generateRectangleTriangleStrip(instruction.rect), gl.STATIC_DRAW);
                let compiled = {
                  type: 'text',
                  vao: vaoName,
                  buffers: [tcName, scName],
                  vertexCount: 4,
                  text: instruction.text
                };
                compiledInstructions.push(compiled);
                break;
              }

            case 'latex':
              {
                var _instruction$dir, _instruction$spacing;

                let compiledStr = katex.renderToString(instruction.latex);
                let compiled = {
                  type: 'latex',
                  html: compiledStr,
                  content: instruction.latex,
                  pos: instruction.pos,
                  dir: (_instruction$dir = instruction.dir) !== null && _instruction$dir !== void 0 ? _instruction$dir : "C",
                  spacing: (_instruction$spacing = instruction.spacing) !== null && _instruction$spacing !== void 0 ? _instruction$spacing : 0
                };
                compiledInstructions.push(compiled);
                break;
              }

            case 'triangle_strip':
              {
                let vertices = instruction.vertices;
                let color = instruction.color;
                let buffName = context.id + '-' + getVersionID();
                let vaoName = context.id + '-' + getVersionID();
                let buff = renderer.createBuffer(buffName);
                let vao = renderer.createVAO(vaoName);
                gl.bindVertexArray(vao);
                gl.bindBuffer(gl.ARRAY_BUFFER, buff);
                gl.enableVertexAttribArray(0
                /* position buffer */
                );
                gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);
                gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);
                let compiled = {
                  type: 'triangle_strip',
                  vao: vaoName,
                  buffers: [buffName],
                  vertexCount: vertices.length / 2,
                  color
                };
                compiledInstructions.push(compiled);
                break;
              }

            case 'polygon':
              {
                var _instruction$color;

                let vertices = instruction.vertices;
                let triangulatedVertices = earcut(vertices);
                let color = (_instruction$color = instruction.color) !== null && _instruction$color !== void 0 ? _instruction$color : Colors.BLACK;
                let vertexBufferName = context.id + '-' + getVersionID();
                let indexBufferName = context.id + '-' + getVersionID();
                let vaoName = context.id + '-' + getVersionID();
                let vertexBuffer = renderer.createBuffer(vertexBufferName);
                let indexBuffer = renderer.createBuffer(indexBufferName);
                let vao = renderer.createVAO(vaoName);
                gl.bindVertexArray(vao);
                gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
                gl.enableVertexAttribArray(0
                /* position buffer */
                );
                gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);
                gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);
                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
                gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(triangulatedVertices), gl.STATIC_DRAW);
                let compiled = {
                  type: 'triangles',
                  mode: 'elements',
                  vao: vaoName,
                  buffers: [vertexBufferName],
                  vertexCount: triangulatedVertices.length,
                  color
                };
                compiledInstructions.push(compiled);
                break;
              }

            case 'debug':
              {
                let buffName = context.id + '-' + getVersionID();
                let vaoName = context.id + '-' + getVersionID();
                let buff = renderer.createBuffer(buffName);
                let vao = renderer.createVAO(vaoName);
                gl.bindVertexArray(vao);
                gl.bindBuffer(gl.ARRAY_BUFFER, buff);
                gl.enableVertexAttribArray(0
                /* position buffer */
                );
                gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);
                let vertices;

                if (instruction.rect) {
                  let rect = BoundingBox.fromObj(instruction.rect);
                  if (!rect) throw new Error('Invalid rectangle debug instruction');
                  vertices = generateRectangleDebug(rect);
                } else if (instruction.polyline) {
                  vertices = new Float32Array(flattenVec2Array(instruction.polyline));
                } else {
                  throw new Error('Unrecognized debug instruction');
                }

                gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);
                let compiled = {
                  type: 'line_strip',
                  vao: vaoName,
                  buffers: [buffName],
                  vertexCount: vertices.length / 2,
                  color: Colors.RED
                };
                compiledInstructions.push(compiled);
                break;
              }

            default:
              throw new Error("Unsupported instruction type ".concat(instruction.type));
          }
        }

        gl.bindVertexArray(null);
        compiledInstructions.push({
          type: 'pop_context'
        });
        context.compiledInstructions = compiledInstructions;
      });
    } // Yield a list of all compiled instructions


    forEachCompiledInstruction(callback, contextID = 'top') {
      let ctx = this.contextMap.get(contextID);

      if (ctx.compiledInstructions) {
        for (const instruction of ctx.compiledInstructions) {
          if (instruction.type === 'context') {
            this.forEachCompiledInstruction(callback, instruction.id);
          } else {
            callback(instruction);
          }
        }
      }
    }

    destroy() {
      this.forEachContext(c => this.freeCompiledInstructions(c.compiledInstructions));
      this.destroyTextAtlas();
    }

  }

  /**
   * Grapheme's renderer is going to be pretty monolithic, with a lot of interdependent moving parts. As such, I'm going
   * to keep it mostly contained within one class, perhaps with some helper classes. Doing so will also help eliminate
   * fluff and make optimization easy and expressive.
   *
   * On the surface, Grapheme's rendering sequence is simple: the renderer traverses through the scene, calls
   * getRenderingInfo() on every element, compiles a list of all the instructions (which look something like
   * "draw this set of triangles", "draw this text"), and runs them all, returning the final product. But if the rendering
   * pipeline were so simple, there would be little point in using WebGL at all. Why not just use Canvas2D? Why learn such
   * a ridiculous API? The name of the game is parallelism and optimization. Where WebGL excels at is low-level control
   * and rapid parallel computation. Its weaknesses are in a lack of intrinsic functions (lacking text, for example) and
   * high complexity and verbosity,
   *
   * Imagine we did indeed render a scene instruction by instruction. We come across a line, so we switch to the polyline
   * program, load in the vertices into a buffer, and drawArrays -- draw it to the canvas. We then come across a piece of
   * text. WebGL cannot render text, so we switch over to a Canvas2D context and draw a piece of text onto a blank canvas.
   * We then load the blank canvas as a texture into WebGL and switch to the text program, loading in a set of vertices
   * specifying where the text is, and calling drawArrays. We then come across a couple hundred polylines in a row. For
   * each polyline, we copy its data to the buffer and render it.
   *
   * This is madness. There are two serious problems here. One is that loading buffers and textures is slow, for various
   * reasons. Another is that parallelism is seriously lacking. We have to call drawArrays several hundred times for those
   * polylines, and each call has a large constant time overhead.
   *
   * The renderer thus has several difficult jobs: minimizing buffer and texture loading, and combining consecutive calls
   * into one large drawArrays call. Accomplishing these jobs (and a few more) requires somewhat intricate algorithms,
   * which should of course be designed to allow more esoteric draw calls -- for a Mandelbrot set, say -- to still be
   * handled with consistency. There is no perfect solution, but there are certainly gains to be made. As with the props
   * of Grapheme elements, the problem is made easier by high-level abstraction. The renderer should produce a comparable
   * result when optimized, compared to when every call is made individually. (They need not be exactly the same, for
   * reasons that will become apparent.)
   *
   * Even more annoying is that the WebGL context may suddenly crash and all its buffers and programs lost in the ether.
   * The renderer thus has to be able to handle such data loss without indefinitely screwing up the rendering process. So
   * I have my work cut out, but that's exciting.
   *
   * The current thinking is a z-index based system with heuristic reallocation of changing and unchanging buffers. Given
   * a list of elements and each element's instructions, we are allowed to rearrange the instructions under certain
   * conditions: 1. instructions are drawn in order of z-index and 2. specific instructions within a given z-index may
   * specify that they must be rendered in the order in which they appear in the instruction list. The latter condition
   * allows deterministic ordering of certain instructions on the same z-index, which is useful when that suborder does
   * matter (like when two instructions for a given element are intended to be one on top of the other). Otherwise, the
   * instructions may be freely rearranged and (importantly) combined into larger operations that look the same.
   *
   * Already, such a sorting system is very helpful. Text elements generally specify a z-index of Infinity, while
   * gridlines might specify a z-index of 0 to be behind most things, and a draggable point might have an index of 20. A
   * simple algorithm to render a static image is to sort by z-index, then within each z-index group triangle draw calls
   * with the same color together, and group text draw calls together. We then proceed to render each z-index's grouped
   * calls in order.
   *
   * For a static scene, such a rendering system would work great. But in a dynamic scene, constantly reoptimizing the
   * entire scene as a result of changing some inconsequential little geometry would be stupid. Ideally, changing a little
   * geometry would merely update a single buffer or subsection of a buffer. Yet some changes do require a complete re-
   * distribution of instructions; if the scene's size doubled, for example, and all the elements changed substantially.
   * We can certainly cache information from the previous rendering process of a scene, but what do we cache? How do we
   * ensure stability and few edge cases? How do we deal with context loss?
   *
   * The first step is to understand exactly what instructions are. *Anonymous* instructions have a type, some data, and
   * an element id (which element it originated from). *Normal* instructions have a type, some data, an element id, an
   * instruction id, and a version. The point of normal instructions is to represent a sort of "draw concept", where after
   * an update, that instruction may have changed slightly, but will still have the same id. The instruction associated
   * with a function plot, for example, will have some numerical ID, and when the plot changes somehow, the version will
   * increase, but the numerical ID will remain the same. Conceptually, this means that the instruction to draw the
   * function plot has been rewritten, and the old data is basically irrelevant -- and buffers associated with that
   * data can and should be reused or reallocated.
   *
   * Anonymous instructions, on the other hand, have no identical concept of "versioning". Anonymous instructions are
   * entirely reallocated or deleted every time their element updates. These instructions are generally used to indicate
   * instructions which are very prone to change and where its values should be tied solely to the element updating.
   */

  function createShaderFromSource(gl, shaderType, shaderSource) {
    const shader = gl.createShader(shaderType);
    gl.shaderSource(shader, shaderSource);
    gl.compileShader(shader);
    const succeeded = gl.getShaderParameter(shader, gl.COMPILE_STATUS);
    if (succeeded) return shader;
    const err = new Error(gl.getShaderInfoLog(shader));
    gl.deleteShader(shader);
    throw err;
  }

  function createGLProgram(gl, vertexShader, fragShader) {
    const program = gl.createProgram();
    gl.attachShader(program, vertexShader);
    gl.attachShader(program, fragShader);
    gl.linkProgram(program);
    const succeeded = gl.getProgramParameter(program, gl.LINK_STATUS);
    if (succeeded) return program;
    const err = new Error(gl.getProgramInfoLog(program));
    gl.deleteProgram(program);
    throw err;
  }

  const MonochromaticGeometryProgram = {
    vert: "\nprecision highp float;\nattribute vec2 vertexPosition;\n// Transforms a vertex from pixel coordinates to clip space\nuniform vec2 xyScale;\nvec2 displacement = vec2(-1, 1);\n         \nvoid main() {\n   gl_Position = vec4(vertexPosition * xyScale + displacement, 0, 1);\n}",
    frag: "precision highp float;\nuniform vec4 color;\n        \nvoid main() {\n   gl_FragColor = color;\n}"
  };
  const TextProgram = {
    vert: "\nprecision highp float;\nattribute vec2 vertexPosition;\nattribute vec2 texCoords;\n        \nuniform vec2 xyScale;\nuniform vec2 textureSize;\n        \nvarying vec2 texCoord;\nvec2 displace = vec2(-1, 1);\n         \nvoid main() {\n  gl_Position = vec4(vertexPosition * xyScale + displace, 0, 1);\n  texCoord = texCoords / textureSize;\n}",
    frag: "\nprecision highp float;\n        \nuniform vec4 color;\nuniform sampler2D textAtlas;\n        \nvarying vec2 texCoord;\n        \nvoid main() {\n  gl_FragColor = texture2D(textAtlas, texCoord);\n}"
  };
  /**
   * Currently accepted draw calls:
   *
   * Triangle strip: { type: "triangle_strip", vertices: Float32Array, color: { r: (int), g: (int), b: (int), a: (int) } }
   * Debug: { type: "debug" }
   * Text: { type: "text", font: (string), x: (float), y: (float), color: { r: ... } }
   */

  class WebGLRenderer {
    constructor() {
      const canvas = document.createElement('canvas');
      const gl = canvas.getContext('webgl2');
      /**
       * The main rendering buffer
       * @type {HTMLCanvasElement}
       */

      this.canvas = canvas;
      /**
       * The renderer's WebGL context. Assuming WebGL2 for now
       * @type {WebGLRenderingContext}
       */

      this.gl = gl;
      /**
       * Map between scene ids and known information about them
       * @type {Map<string, {}>}
       */

      this.sceneCaches = new Map();
      /**
       * A mapping between program names and valid programs. When the context is lost, this map is reset
       * @type {Map<string, { glProgram: WebGLProgram, attribs: {}, uniforms: {} }>}
       */

      this.programs = new Map();
      this.buffers = new Map();
      this.textures = new Map();
      this.vaos = new Map();
      this.textRenderer = new TextRenderer();
    }
    /**
     * Create and link a program and store it in the form { glProgram, attribs, uniforms }, where glProgram is the
     * underlying program and attribs and uniforms are a dictionary of attributes and uniforms from the program. The
     * attributes are given as an object, of manually assigned indices
     * @param programName {string}
     * @param vertexShaderSource {string}
     * @param fragShaderSource {string}
     * @param attributeBindings {{}}
     * @param uniformNames {string[]}
     * @return  {{glProgram: WebGLProgram, attribs: {}, uniforms: {}}} The program
     */


    createProgram(programName, vertexShaderSource, fragShaderSource, attributeBindings = {}, uniformNames = []) {
      this.deleteProgram(programName);
      const {
        gl
      } = this;
      const glProgram = createGLProgram(gl, createShaderFromSource(gl, gl.VERTEX_SHADER, vertexShaderSource), createShaderFromSource(gl, gl.FRAGMENT_SHADER, fragShaderSource));

      for (let name in attributeBindings) {
        let loc = attributeBindings[name];
        gl.bindAttribLocation(glProgram, loc, name);
      }

      const uniforms = {};

      for (const name of uniformNames) {
        uniforms[name] = gl.getUniformLocation(glProgram, name);
      }

      const program = {
        glProgram,
        attribs: attributeBindings,
        uniforms
      };
      this.programs.set(programName, program);
      return program;
    }
    /**
     * Get the program of a given name, returning undefined if it does not exist
     * @param programName {string}
     * @returns {{glProgram: WebGLProgram, attribs: {}, uniforms: {}}}
     */


    getProgram(programName) {
      return this.programs.get(programName);
    }
    /**
     * Delete a program, including the underlying GL program
     * @param programName {string}
     */


    deleteProgram(programName) {
      const program = this.getProgram(programName);

      if (program) {
        this.gl.deleteProgram(program.glProgram);
        this.programs.delete(programName);
      }
    }

    getTexture(textureName) {
      return this.textures.get(textureName);
    }

    deleteTexture(textureName) {
      let texture = this.getTexture(textureName);

      if (texture !== undefined) {
        this.gl.deleteTexture(this.getTexture(textureName));
        this.textures.delete(textureName);
      }
    }

    createTexture(textureName) {
      this.deleteTexture(textureName);
      const texture = this.gl.createTexture();
      this.textures.set(textureName, texture);
      return texture;
    }

    getBuffer(bufferName) {
      return this.buffers.get(bufferName);
    }

    createBuffer(bufferName) {
      let buffer = this.getBuffer(bufferName);

      if (!buffer) {
        buffer = this.gl.createBuffer();
        this.buffers.set(bufferName, buffer);
      }

      return buffer;
    }

    deleteBuffer(bufferName) {
      const buffer = this.getBuffer(bufferName);

      if (buffer !== undefined) {
        this.buffers.delete(bufferName);
        this.gl.deleteBuffer(buffer);
      }
    }

    getVAO(vaoName) {
      return this.vaos.get(vaoName);
    }

    createVAO(vaoName) {
      let vao = this.getVAO(vaoName);

      if (!vao) {
        vao = this.gl.createVertexArray();
        this.vaos.set(vaoName, vao);
      }

      return vao;
    }

    deleteVAO(vaoName) {
      const vao = this.getVAO(vaoName);

      if (vao !== undefined) {
        this.vaos.delete(vaoName);
        this.gl.deleteVertexArray(vao);
      }
    }

    monochromaticGeometryProgram() {
      let program = this.getProgram('__MonochromaticGeometry');

      if (!program) {
        const programDesc = MonochromaticGeometryProgram;
        program = this.createProgram('__MonochromaticGeometry', programDesc.vert, programDesc.frag, {
          vertexPosition: 0
        }, ['xyScale', 'color']);
      }

      return program;
    }

    textProgram() {
      let program = this.getProgram('__Text');

      if (!program) {
        const programDesc = TextProgram;
        program = this.createProgram('__Text', programDesc.vert, programDesc.frag, {
          vertexPosition: 0,
          texCoords: 1
        }, ['textureSize', 'xyScale', 'textAtlas', 'color']);
      }

      return program;
    }
    /**
     * Resize and clear the canvas, only clearing if the dimensions haven't changed, since the buffer will be erased.
     * @param width
     * @param height
     * @param dpr
     * @param clear {Color}
     */


    clearAndResizeCanvas(width, height, dpr = 1, clear = Colors.TRANSPARENT) {
      const {
        canvas
      } = this;
      this.dpr = dpr;

      if (canvas.width === width && canvas.height === height) {
        this.clearCanvas(clear);
      } else {
        canvas.width = width;
        canvas.height = height; // lol, use the given background color

        if (clear.r || clear.g || clear.b || clear.a) {
          this.clearCanvas(clear);
        }
      }

      this.gl.viewport(0, 0, width, height);
    }

    clearCanvas(clearColor) {
      const {
        gl
      } = this;
      gl.clearColor(clearColor.r / 255, clearColor.g / 255, clearColor.b / 255, clearColor.a / 255);
      gl.clear(gl.COLOR_BUFFER_BIT);
    }

    getXYScale() {
      let {
        canvas,
        dpr
      } = this;
      return [2 / canvas.width * dpr, -2 / canvas.height * dpr];
    }

    renderScene(scene, log = false) {
      scene.updateAll();
      const graph = new SceneGraph();
      graph.renderer = this;
      let startTime = performance.now();
      let globalStartTime = startTime;
      graph.constructFromScene(scene);
      let endTime = performance.now();
      let additionalHTML = [];
      if (log) console.log("Construction time: ".concat(endTime - startTime, "ms"));
      startTime = performance.now();
      graph.computeInstructions();
      endTime = performance.now();
      if (log) console.log("Instruction compute time: ".concat(endTime - startTime, "ms"));
      startTime = performance.now();
      graph.compile();
      endTime = performance.now();
      if (log) console.log("Instruction compile time: ".concat(endTime - startTime, "ms"));
      const {
        gl
      } = this;
      let scissorTest = false;
      let scissorBox = null; // Contains instructions for how to reset the state back to how it was before a context was entered

      const contexts = [];

      const setScissor = (enabled, box) => {
        scissorTest = enabled;
        scissorBox = box;
        let dpr = this.dpr;

        if (enabled) {
          gl.enable(gl.SCISSOR_TEST);
        } else {
          gl.disable(gl.SCISSOR_TEST);
        }

        if (box) {
          // GL scissoring is from bottom left corner, not top left. One of those annoying cases where we care about dpr
          // since we're working in pixels, not CSS pixels
          gl.scissor(dpr * box.x, this.canvas.height - dpr * (box.y + box.h), dpr * box.w, dpr * box.h);
        }
      };

      startTime = performance.now();
      gl.enable(gl.BLEND);
      gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
      graph.forEachCompiledInstruction(instruction => {
        let primitiveEnum = 0;

        switch (instruction.type) {
          case 'scene':
            {
              const {
                dims,
                backgroundColor
              } = instruction;
              this.clearAndResizeCanvas(dims.canvasWidth, dims.canvasHeight, dims.dpr, backgroundColor);
              contexts.push(null);
              break;
            }

          case 'scissor':
            {
              contexts.push({
                type: 'set_scissor',
                enable: scissorTest,
                scissor: scissorBox
              });
              setScissor(true, instruction.scissor);
              break;
            }

          case 'text':
            {
              const program = this.textProgram();
              gl.useProgram(program.glProgram);
              gl.bindVertexArray(this.getVAO(instruction.vao));
              let {
                id: atlasID,
                width: atlasWidth,
                height: atlasHeight
              } = graph.resources.textAtlas;
              let texture = this.getTexture(atlasID);
              gl.activeTexture(gl.TEXTURE0);
              gl.bindTexture(gl.TEXTURE_2D, texture);
              gl.uniform1i(program.uniforms.textAtlas, 0);
              gl.uniform2f(program.uniforms.textureSize, atlasWidth, atlasHeight);
              gl.uniform2fv(program.uniforms.xyScale, this.getXYScale());
              gl.drawArrays(gl.TRIANGLE_STRIP, 0, instruction.vertexCount);
              break;
            }

          case 'latex':
            {
              additionalHTML.push(instruction);
              break;
            }

          case 'triangle_strip':
            // LOL
            primitiveEnum++;

          case 'triangles':
            primitiveEnum++;

          case 'line_strip':
            primitiveEnum += 2;

          case 'lines':
            primitiveEnum++;
            {
              var _instruction$mode;

              const program = this.monochromaticGeometryProgram();
              gl.useProgram(program.glProgram);
              gl.bindVertexArray(this.getVAO(instruction.vao));
              const color = instruction.color;
              gl.uniform4f(program.uniforms.color, color.r / 255, color.g / 255, color.b / 255, color.a / 255);
              gl.uniform2fv(program.uniforms.xyScale, this.getXYScale());
              const mode = (_instruction$mode = instruction.mode) !== null && _instruction$mode !== void 0 ? _instruction$mode : "arrays";

              if (mode === "arrays") {
                gl.drawArrays(primitiveEnum, 0, instruction.vertexCount);
              } else if (mode === "elements") {
                gl.drawElements(primitiveEnum, instruction.vertexCount, gl.UNSIGNED_SHORT, 0);
              }

              break;
            }

          case 'pop_context':
            {
              const popped = contexts.pop();
              if (!popped) break;

              switch (popped.type) {
                case 'set_scissor':
                  {
                    setScissor(popped.enabled, popped.scissor);
                    break;
                  }
              }

              break;
            }

          default:
            throw new Error("Unknown instruction type ".concat(instruction.type));
        }
      });
      endTime = performance.now();
      if (log) console.log("Render time: ".concat(endTime - globalStartTime, "ms"));
      graph.destroy();

      if (additionalHTML.length && scene.domElement) {
        scene.setHTMLElements(additionalHTML);
      }
    }

    renderDOMScene(scene) {
      this.renderScene(scene);
      createImageBitmap(this.canvas).then(bitmap => {
        scene.bitmapRenderer.transferFromImageBitmap(bitmap);
      });
    }

  }

  // Define general types of rounding modes for various mathematical operations over the reals
  const ROUNDING_MODE = Object.freeze({
    NEAREST: 0,
    // nearest neighbor, ties to even
    UP: 1,
    // always round positively
    DOWN: 2,
    TOWARD_INF: 3,
    // towards the extremes
    TOWARD_ZERO: 4,
    // towards zero
    TIES_AWAY: 5,
    // tie away from zero
    WHATEVER: 6,
    // do whatever's easiest
    TIES_EVEN: 0 // equivalent to NEAREST

  });
  function roundingModeToString(mode) {
    switch (mode) {
      case ROUNDING_MODE.NEAREST:
      case ROUNDING_MODE.TIES_EVEN:
        return 'NEAREST';

      case ROUNDING_MODE.UP:
        return 'UP';

      case ROUNDING_MODE.DOWN:
        return 'DOWN';

      case ROUNDING_MODE.TOWARD_INF:
        return 'TOWARD_INF';

      case ROUNDING_MODE.TOWARD_ZERO:
        return 'TOWARD_ZERO';

      case ROUNDING_MODE.TIES_AWAY:
        return 'TIES_AWAY';

      case ROUNDING_MODE.WHATEVER:
        return 'WHATEVER';
    }
  }

  const BIGINT_WORD_BITS = 30;
  const BIGINT_WORD_PART_BITS = BIGINT_WORD_BITS / 2;
  const BIGINT_WORD_BIT_MASK = 0x3fffffff; // get the last 30 bits of a given word (removing the two junk bits)

  const BIGINT_WORD_LOW_PART_BIT_MASK = 0x7fff; // get the last 15 bits of a given word. Getting the high part is just >> 15

  const BIGINT_WORD_OVERFLOW_BIT_MASK = 0x40000000; // get the overflow bit of a given word (aka the 31st bit)

  const BIGINT_WORD_SIZE = 2 ** BIGINT_WORD_BITS;
  const BIGINT_WORD_MAX = BIGINT_WORD_SIZE - 1;
  /**
   * Return the number of bits a given word uses.
   */

  function wordBitCount(word) {
    return 32 - Math.clz32(word);
  }
  /**
   * Get the number of bits used by a given set of 30-bit words.
   * @param words
   * @param wordCount
   * @returns {*}
   */


  function getBitCount(words, wordCount) {
    let lastIndex = wordCount - 1;
    const lastWord = words[lastIndex];
    return wordBitCount(lastWord) + lastIndex * BIGINT_WORD_BITS;
  }

  function mulWords(word1, word2) {
    return mulAddWords(word1, word2, 0);
  } // Multiply and add three 30-bit words and return the low and high part of the result. (word1 * word2 + word3)

  function mulAddWords(word1, word2, word3) {
    let word1Lo = word1 & BIGINT_WORD_LOW_PART_BIT_MASK;
    let word2Lo = word2 & BIGINT_WORD_LOW_PART_BIT_MASK;
    let word1Hi = word1 >> BIGINT_WORD_PART_BITS;
    let word2Hi = word2 >> BIGINT_WORD_PART_BITS;
    let low = Math.imul(word1Lo, word2Lo),
        high = Math.imul(word1Hi, word2Hi);
    let middle = Math.imul(word2Lo, word1Hi) + Math.imul(word1Lo, word2Hi);
    low += ((middle & BIGINT_WORD_LOW_PART_BIT_MASK) << BIGINT_WORD_PART_BITS) + word3;
    low >>>= 0;

    if (low > BIGINT_WORD_OVERFLOW_BIT_MASK) {
      high += low >>> BIGINT_WORD_BITS;
      low &= BIGINT_WORD_BIT_MASK;
    }

    high += middle >> BIGINT_WORD_PART_BITS; // add the high part of middle

    return [low, high];
  }
  function multiplyBigInts(int1, int2) {
    if (int1.isZero() || int2.isZero()) return new BigInt(0);
    const {
      words: int1words,
      wordCount: int1wordCount,
      sign: int1sign
    } = int1;
    const {
      words: int2words,
      wordCount: int2wordCount,
      sign: int2sign
    } = int2;
    let end = int1wordCount + int2wordCount + 1;
    let out = new Int32Array(end); // Textbook multiplication, go through each word of int1 and multiply by each word of int2

    for (let int1wordIndex = 0; int1wordIndex < int1wordCount; ++int1wordIndex) {
      let word1 = int1words[int1wordIndex];
      let carry = 0;
      let word1Lo = word1 & BIGINT_WORD_LOW_PART_BIT_MASK;
      let word1Hi = word1 >> BIGINT_WORD_PART_BITS;

      for (let int2wordIndex = 0; int2wordIndex < end; ++int2wordIndex) {
        if (int2wordIndex >= int2wordCount && carry === 0) break;
        let word2 = int2wordIndex < int2wordCount ? int2words[int2wordIndex] : 0;
        let outIndex = int1wordIndex + int2wordIndex;
        let word2Lo = word2 & BIGINT_WORD_LOW_PART_BIT_MASK;
        let word2Hi = word2 >> BIGINT_WORD_PART_BITS;
        let low = Math.imul(word1Lo, word2Lo),
            high = Math.imul(word1Hi, word2Hi);
        let middle = Math.imul(word2Lo, word1Hi) + Math.imul(word1Lo, word2Hi);
        low += ((middle & BIGINT_WORD_LOW_PART_BIT_MASK) << BIGINT_WORD_PART_BITS) + carry + out[outIndex];
        low >>>= 0;

        if (low > BIGINT_WORD_OVERFLOW_BIT_MASK) {
          high += low >>> BIGINT_WORD_BITS;
          low &= BIGINT_WORD_BIT_MASK;
        }

        high += middle >> BIGINT_WORD_PART_BITS;
        out[outIndex] = low;
        carry = high;
      }
    }

    return new BigInt().initFromWords(out, int1sign * int2sign);
  }
  /**
   * Remove trailing zeroes from an array or typed array (returning a subarray in the latter case for efficiency)
   * @param array
   */

  function trimTrailingZeroes(array) {
    const isArray = Array.isArray(array);

    if (isArray || isTypedArray(array)) {
      let i = array.length - 1;

      for (; i >= 0; --i) {
        if (array[i] !== 0) break;
      }

      if (i === -1) return isArray ? [0] : new Int32Array(1);
      return isArray ? array.slice(0, i + 1) : array.subarray(0, i + 1);
    } else {
      throw new TypeError('trimTrailingZeroes only operates on Arrays and TypedArrays');
    }
  } // lol


  const NativeBigInt = 0n.constructor;
  /**
   * Big integers in JS! I would use the native implementation or JSBI, but I want a pretty customized setup for fast
   * multiplication, division, et cetera. Also, this will be fun.
   *
   * We represent a big-integer with an array of unsigned 30-bit words with the least significant bit at the front, and a
   * sign (-1, 0, or 1). Big-integers are not immutable and may be modified via certain in-place operations.
   *
   * As an example, "-45" is represented with { sign: -1, words: [45] }. "-1073741823" is { sign: -1, words: [ 1073741823 ] },
   * while "-1073741824" is { sign: -1, words: [ 0, 1 ]}. wordCount is the number of elements of words that are actually
   * used, which helps sometimes when the array shrinks and the top elements are all 0. "0" simply represented with a
   * wordCount of 1 and a single word 0. We will generally use typed arrays in here, specifically the Int32Array,
   * which may allow some asm.js fun in the future!
   */

  class BigInt {
    constructor(arg1, arg2) {
      if (typeof arg1 === 'number') {
        this.initFromNumber(arg1);
      } else if (typeof arg1 === 'string') {
        this.initFromString(arg1, arg2);
      } else if (typeof arg1 === 'bigint') {
        this.initFromNativeBigint(arg1);
      } else if (arg1 instanceof BigInt) {
        this.initFromBigint(arg1);
      }
    }
    /**
     * Add bigint with same sign in place
     * @param num {BigInt}
     * @returns {BigInt}
     * @private
     */


    _addSameSignInPlace(num) {
      if (num.isZero()) return this; // We'll need at most this many bits

      this.allocateBits(Math.max(num.bitCount(), this.bitCount()) + 1);
      const {
        words: otherWords,
        wordCount: otherWordCount
      } = num;
      const {
        words,
        wordCount
      } = this; // Add the other bigint's words to this one

      for (let i = 0; i < otherWordCount; ++i) {
        words[i] += otherWords[i];
      } // We need to check the words between [0, i] for carries


      let checkCarryCount = Math.min(otherWordCount, wordCount);
      let carry = 0,
          i = 0;

      for (; i < words.length; ++i) {
        let word = words[i] + carry; // Do carries

        if ((word & BIGINT_WORD_OVERFLOW_BIT_MASK) !== 0) {
          words[i] = word & BIGINT_WORD_BIT_MASK;
          carry = 1;
        } else {
          words[i] = word;
          carry = 0;
          if (i >= checkCarryCount) break;
        }
      } // Update word count


      this.wordCount = Math.max(i, wordCount, otherWordCount);
    }
    /**
     * Adds the number in place, IGNORING SIGN
     * @param num
     */


    _addNumberSameSignInPlace(num) {
      if (num === 0) return;

      if (num <= BIGINT_WORD_MAX) {
        // For small nums, we just add and carry. It's super similar to the longer case, but we have this for speed since
        // incrementing and such is a very common operation
        const {
          words,
          wordCount
        } = this;
        let carry = num,
            i = 0;

        for (; i < wordCount; ++i) {
          let word = words[i] + carry;

          if ((word & BIGINT_WORD_OVERFLOW_BIT_MASK) !== 0) {
            words[i] = word & BIGINT_WORD_BIT_MASK;
            carry = 1;
          } else {
            words[i] = word;
            carry = 0;
            break;
          }
        } // Happens when we increment from 2^30-1 to 2^30


        if (carry !== 0) {
          this.allocateWords(i + 1);
          this.words[i] = carry;
          this.wordCount = i + 1;
        }
      } else {
        this._addSameSignInPlace(new BigInt(num));
      }
    }
    /**
     * Subtracts the number in place, IGNORING SIGN
     * @param num
     */


    _subtractNumberSameSignInPlace(num) {
      if (num === 0) return this;

      if (num <= BIGINT_WORD_MAX) {
        const {
          words,
          wordCount
        } = this;

        if (wordCount === 1) {
          let firstWord = words[0];
          firstWord -= num;

          if (firstWord === 0) {
            this.sign = 0;
          } else if (firstWord < 0) {
            this.sign *= -1;
            firstWord = -firstWord;
          }

          words[0] = firstWord;
          return this;
        }

        let carry = num,
            i = 0;

        for (; i < wordCount; ++i) {
          let word = words[i] - carry;

          if (word < 0) {
            word = word + BIGINT_WORD_SIZE;
            words[i] = word;
            carry = 1;
          } else {
            words[i] = word;
            break;
          }
        } // Carry should never equal 1

      } else {
        this._subtractSameSignInPlace(new BigInt(num));
      }
    }

    _subtractSameSignInPlace(num) {
      if (num instanceof BigInt) {
        this.allocateBits(Math.max(this.bitCount(), num.bitCount()));
        let spaceship = this.magnitudeSpaceship(num); // -1 if we're less than num, 0 if equal, 1 if greater

        if (spaceship === 0) {
          this.setZero();
          return;
        }

        const {
          words,
          wordCount
        } = this;
        const {
          words: otherWords,
          wordCount: otherWordCount
        } = num;
        let maxCarryIndex = 0;

        if (spaceship === 1) {
          // If we're greater, just subtract from our words
          for (let i = 0; i < otherWordCount; ++i) {
            if ((words[i] -= otherWords[i]) < 0) {
              maxCarryIndex = i;
            }
          }
        } else {
          for (let i = 0; i < otherWordCount; ++i) {
            if ((words[i] = otherWords[i] - words[i]) < 0) {
              maxCarryIndex = i;
            }
          }
        }

        let wordsToExamine = Math.max(wordCount, otherWordCount);
        let carry = 0;

        for (let j = 0; j < wordsToExamine; ++j) {
          let word = words[j] - carry;

          if (word < 0) {
            word += BIGINT_WORD_SIZE;
            words[j] = word;
            carry = 1;
          } else {
            words[j] = word;
            carry = 0;
            if (j > maxCarryIndex) break;
          }
        }

        if (spaceship === -1) this.sign *= -1;
        this.recomputeWordCount();
      } else {
        this._subtractSameSignInPlace(new BigInt(num));
      }
    }

    addInPlace(num, flipSign = false) {
      if (typeof num === 'number') {
        if (num === 0) return this;

        if (this.sign === 0) {
          this.initFromNumber(num);
          if (flipSign) this.sign *= -1;
          return this;
        }

        if (Math.sign(num) === this.sign !== flipSign) {
          this._addNumberSameSignInPlace(Math.abs(num));
        } else {
          this._subtractNumberSameSignInPlace(Math.abs(num));
        }
      } else if (num instanceof BigInt) {
        if (num.isZero()) return this;

        if (this.sign === 0) {
          this.initFromBigint(num);
          if (flipSign) this.sign *= -1;
          return this;
        }

        if (this.sign === num.sign !== flipSign) {
          this._addSameSignInPlace(num);
        } else {
          this._subtractSameSignInPlace(num);
        }
      } else {
        this.addInPlace(new BigInt(num), flipSign);
      }

      return this;
    }

    add(bigint) {
      return this.clone().addInPlace(bigint);
    }

    subtractInPlace(num) {
      // Call addInPlace(-num)
      return this.addInPlace(num, true);
    }

    subtract(bigint) {
      return this.clone().subtractInPlace(bigint);
    }
    /**
     * Increase the size of the backing Int32Array to allow bitCount bits to be stored
     * @param bitCount
     */


    allocateBits(bitCount) {
      this.allocateWords(Math.ceil(bitCount / BIGINT_WORD_BITS));
    }
    /**
     * Shrink to fit the least number of words this bigint needs
     */


    shrinkToFit() {
      if (this.wordCount === this.words.length) return;
      const newWords = new Int32Array(this.wordCount);
      newWords.set(this.words.subarray(0, this.wordCount));
      this.words = newWords;
    }
    /**
     * Increase the size of the backing Int32Array, copying over the contents from the previous one
     * @param wordCount
     */


    allocateWords(wordCount) {
      if (wordCount <= this.words.length) return;
      const newWords = new Int32Array(wordCount);
      newWords.set(this.words);
      this.words = newWords;
    }
    /**
     * Get the total number of bits used; in other words, the number of bits in the last word + the number of bits in all
     * the preceding words
     */


    bitCount() {
      return getBitCount(this.words, this.wordCount);
    }

    clone() {
      return new BigInt(this);
    }
    /**
     * Init from another Grapheme bigint
     * @param int
     */


    initFromBigint(int) {
      let {
        words,
        sign,
        wordCount
      } = int;
      this.words = new Int32Array(words.subarray(0, wordCount));
      this.sign = sign;
      this.wordCount = wordCount;
      return this;
    }

    equals(bigint) {
      return this._compare(bigint, true, true, true);
    }
    /**
     * Internal function comparing this integer to another integer.
     * @param bigint {BigInt|number}
     * @param lessThan {boolean} Whether to test as less than (<) or greater than (>)
     * @param orEqual {boolean} Whether to return true if the integers are equal
     * @param onlyEqual {boolean} Whether to only return true if the integers are equal
     * @returns {boolean}
     * @private
     */


    _compare(bigint, lessThan = true, orEqual = false, onlyEqual = false) {
      if (bigint instanceof BigInt) {
        let sign = this.sign,
            otherSign = bigint.sign;
        if (sign < otherSign) return lessThan && !onlyEqual;
        if (sign > otherSign) return !lessThan && !onlyEqual;
        if (sign === 0) return orEqual;
        let bitcount = this.bitCount(),
            otherBitcount = bigint.bitCount();
        if (bitcount < otherBitcount) return sign === 1 === lessThan && !onlyEqual;
        if (bitcount > otherBitcount) return sign === 1 !== lessThan && !onlyEqual;
        let wordCount = this.wordCount,
            words = this.words,
            otherWords = bigint.words;

        for (let i = wordCount; i >= 0; --i) {
          let word = words[i],
              otherWord = otherWords[i];
          if (word > otherWord) return sign === 1 !== lessThan && !onlyEqual;
          if (word < otherWord) return sign === 1 === lessThan && !onlyEqual;
        }

        return orEqual;
      } else if (typeof bigint === 'number') {
        if (!Number.isFinite(bigint)) return false;
        let sign = this.sign,
            otherSign = Math.sign(bigint);
        if (sign < otherSign) return lessThan && !onlyEqual;
        if (sign > otherSign) return !lessThan && !onlyEqual;
        if (sign === 0) return orEqual;
        bigint *= otherSign;

        if (bigint <= BIGINT_WORD_MAX) {
          if (this.wordCount > 1) return false;
          let diff = this.words[0] - bigint;
          if (diff > 0) return sign === 1 !== lessThan && !onlyEqual;
          if (diff < 0) return sign === 1 === lessThan && !onlyEqual;
          return orEqual;
        }

        let bitCount = this.bitCount();
        let givenBitCount = Math.log2(bigint) + 1; // Give some leniency in case of rounding errors (which shouldn't technically happen, but ehh I don't want to prove it)

        if (bitCount < Math.floor(givenBitCount) - 1) return sign === 1 === lessThan && !onlyEqual;else if (bitCount > Math.ceil(givenBitCount) + 1) return sign === 1 !== lessThan && !onlyEqual;
      } // Fallback for other types


      return this._compare(new BigInt(bigint), lessThan, orEqual, onlyEqual);
    }
    /**
     * Returns -1 if less than bigint2, 0 if equal, 1 if greater than, IGNORING THE SIGN
     * @param bigint {BigInt}
     * @returns {boolean|number|*}
     */


    magnitudeSpaceship(bigint) {
      let sign = this.sign,
          otherSign = bigint.sign;

      if (sign === 0) {
        return otherSign === 0 ? 0 : -1;
      } else if (otherSign === 0) {
        return sign === 0 ? 0 : 1;
      }

      let bitcount = this.bitCount(),
          otherBitcount = bigint.bitCount();
      if (bitcount < otherBitcount) return -1;
      if (bitcount > otherBitcount) return 1;
      let wordCount = this.wordCount,
          words = this.words,
          otherWords = bigint.words;

      for (let i = wordCount; i >= 0; --i) {
        let word = words[i],
            otherWord = otherWords[i];
        if (word > otherWord) return 1;
        if (word < otherWord) return -1;
      }

      return 0;
    }

    lessThan(bigint) {
      return this._compare(bigint, true, false);
    }

    lessThanOrEqual(bigint) {
      return this._compare(bigint, true, true);
    }

    greaterThan(bigint) {
      return this._compare(bigint, false, false);
    }

    greaterThanOrEqual(bigint) {
      return this._compare(bigint, false, true);
    }
    /**
     * Create Grapheme bigint from native bigint
     * @param int {bigint}
     */


    initFromNativeBigint(int) {
      // We basically just use repeated bit shifts to get all the words we want.
      let words = [];
      let sign = 1;

      if (int === 0n) {
        this.initZero();
        return;
      } else if (int < 0n) {
        sign = -1;
        int = -int;
      }

      const mask = NativeBigInt(BIGINT_WORD_BIT_MASK);
      const wordBits = NativeBigInt(BIGINT_WORD_BITS);

      while (int) {
        words.push(Number(int & mask));
        int >>= wordBits;
      }

      this.initFromWords(words, sign);
      return this;
    }
    /**
     * We construct words, wordCount and sign from a JS number. If val is NaN or ±Infinity, we throw an error. Profiling:
     * on 5/26/2021, got 0.00025 ms/iteration for random floats in [0, 1e6]. Also got 0.0016 ms/iteration for random floats
     * in [0, 1e200], which is more a reflection of the performance of leftShiftInPlace.
     * @param val
     */


    initFromNumber(val) {
      if (!Number.isFinite(val)) throw new RangeError('Numeric value passed to BigInt constructor must be finite');
      val = Math.trunc(val); // Guaranteed to be an integer

      const sign = Math.sign(val) + 0; // convert -0 to +0 :D

      val *= sign;

      if (val <= BIGINT_WORD_MAX) {
        // can initialize directly=
        this.initFromWords([val], sign);
        return;
      } // We now convert the number into the form [i, e] where i is an integer within the 2^53 range and e is an exponent.
      // The bit pattern of the number is thus
      //     1 0 1 0 0 0 1 0 1 0 0 1  0 0 0 0 0 0 0 0 0 0 0 0 0
      //     -----------------------  -------------------------
      //            integer i               e extra zeroes
      // Funnily enough, all integers are represented in this way, even if they aren't massive. But it is consistent.
      // Thus, we initialize with two words corresponding to the upper and lower halves of the 53-bit integer i, then
      // left shift the bits by the exponent e times.


      let [integer, exponent] = integerExp(val);
      this.initFromWords([integer % BIGINT_WORD_SIZE, Math.floor(integer / BIGINT_WORD_SIZE)], sign);
      this.leftShiftInPlace(exponent);
      return this;
    }

    initFromSingleWord(word, sign = 1) {
      this.words = new Int32Array([word]);
      this.sign = sign;
      this.wordCount = 1;
    }

    multiply(bigint) {
      return multiplyBigInts(this, bigint);
    }
    /**
     * TODO: optimize
     * @param str
     * @param radix
     */


    initFromString(str, radix = 10) {
      if (!Number.isInteger(radix) || radix < 2 || radix > 36) throw new RangeError('Radix must be an integer between 2 and 36');

      function throwInvalidDigitError(digit, index) {
        throw new RangeError("Invalid digit '".concat(String.fromCharCode(digit), "' in base-").concat(radix, " string at index ").concat(index));
      }

      const CHUNKING_EXPONENTS = [29, 536870912, 18, 387420489, 14, 268435456, 12, 244140625, 11, 362797056, 10, 282475249, 9, 134217728, 9, 387420489, 9, 1000000000, 8, 214358881, 8, 429981696, 8, 815730721, 7, 105413504, 7, 170859375, 7, 268435456, 7, 410338673, 7, 612220032, 7, 893871739, 6, 64000000, 6, 85766121, 6, 113379904, 6, 148035889, 6, 191102976, 6, 244140625, 6, 308915776, 6, 387420489, 6, 481890304, 6, 594823321, 6, 729000000, 6, 887503681, 5, 33554432, 5, 39135393, 5, 45435424, 5, 52521875, 5, 60466176];
      const CHUNKING_EXPONENT = CHUNKING_EXPONENTS[2 * radix - 4];
      const CHUNK_SIZE = CHUNKING_EXPONENTS[2 * radix - 3];
      this.setZero();
      let startIndex = 0;
      if (str[0] === '-') startIndex = 1;
      const digits = [];

      for (let i = startIndex; i < str.length; ++i) {
        let digit = str.charCodeAt(i); // 0x30 - 0; 0x39 - 9; 0x61 - a; 0x7a - z

        let val = 0;

        if (digit < 0x30 || digit > 0x7a) {
          throwInvalidDigitError(digit, i);
        } else if (digit <= 0x39) {
          val = digit - 0x30;
        } else if (digit >= 0x61) {
          val = digit - 0x61 + 10;
        } else {
          throwInvalidDigitError(digit, i);
        }

        if (val >= radix) throwInvalidDigitError(digit, i);
        digits.push(val);
      }

      this.allocateBits(Math.ceil(Math.log2(radix) * digits.length)); // Initial word

      let initialGroupSize = (digits.length - 1) % CHUNKING_EXPONENT + 1,
          i = 0,
          chunk = 0;

      for (; i < initialGroupSize; ++i) {
        chunk *= radix;
        chunk += digits[i];
      }

      this.addInPlace(chunk);

      for (let j = i; j < digits.length; j += CHUNKING_EXPONENT) {
        this.multiplyInPlace(CHUNK_SIZE);
        let chunk = 0,
            jEnd = j + CHUNKING_EXPONENT;

        for (let k = j; k < jEnd; ++k) {
          chunk *= radix;
          chunk += digits[k];
        }

        this.addInPlace(chunk);
      }

      this.recomputeWordCount();

      if (str[0] === '-') {
        this.sign = -1;
      } else if (this.isZero()) {
        this.sign = 0;
      } else {
        this.sign = 1;
      }
    }
    /**
     * Sign 0 is 0, sign 1 is 1, sign -1 is -1. There is no negative zero big int.
     * @param words
     * @param sign
     */


    initFromWords(words, sign = 1) {
      words = trimTrailingZeroes(words);
      this.words = new Int32Array(words);
      this.wordCount = words.length;
      this.sign = sign;
      return this;
    }

    initZero() {
      this.words = new Int32Array(1);
      this.wordCount = 1;
      this.sign = 0;
    }
    /**
     * Returns true if the big integer is zero.
     * @returns {boolean}
     */


    isZero() {
      return this.wordCount === 1 && this.words[0] === 0;
    }

    leftShiftInPlace(count) {
      count = count | 0;
      if (!Number.isInteger(count) || count < 0) throw new RangeError('Left shift count must be a nonnegative integer');
      if (count === 0) return; // Number of bits after shifting

      let newBitCount = this.bitCount() + count;
      this.allocateBits(newBitCount);
      let {
        words,
        wordCount
      } = this; // We split up the shift into a multiple of 30 shift and a normal shift.

      let shifts = count % BIGINT_WORD_BITS;
      let wordShifts = Math.floor(count / BIGINT_WORD_BITS);

      if (count >= BIGINT_WORD_BITS) {
        // We use copyWithin to shift the current words from [0, wordCount - 1] to [wordShifts, wordShifts + wordCount - 1]
        words.copyWithin(wordShifts, 0, wordCount); // Fill [0, wordShifts - 1] with 0s

        words.fill(0, 0, wordShifts);
        wordCount += wordShifts;
      }

      if (shifts !== 0) {
        // We now perform a smaller shift in which we iterate from [wordCount - 1] down to 0 and shift the current value of
        // the cell up by <shifts>. We know that shifts is less than 30. The algorithm here is to take the word value, right
        // shift it by (30 - shift value), and add that to the larger word. Then, shift the word value to the left by
        // (shift value), remove the extra 31st and 32nd bits with & 0x3FFFFFFF, and rewrite the word.
        let rightShift = BIGINT_WORD_BITS - shifts;

        for (let i = wordCount - 1; i >= wordShifts; --i) {
          let word = words[i];
          let carry = word >> rightShift;
          if (carry !== 0) words[i + 1] += carry;
          word <<= shifts;
          words[i] = word & BIGINT_WORD_BIT_MASK;
        }
      } // Should be reliable


      this.wordCount = Math.ceil(newBitCount / BIGINT_WORD_BITS);
    }
    /**
     * Multiply the bigint in place by a number or biginteger val. Hard to optimize it more than this, sadly. If only JS
     * had 64-bit multiplication... :(
     * @param val
     */


    multiplyInPlace(val) {
      if (typeof val === 'number' && Math.abs(val) <= BIGINT_WORD_MAX) {
        if (val === 0) {
          this.setZero();
          return;
        }

        if (val === 1) return;
        if (val === -1) this.sign *= -1;
        this.allocateBits(wordBitCount(val) + this.bitCount());
        const {
          words,
          wordCount
        } = this;
        let word2Lo = val & BIGINT_WORD_LOW_PART_BIT_MASK;
        let word2Hi = val >> BIGINT_WORD_PART_BITS;
        let carry = 0;

        for (let i = 0; i < wordCount; ++i) {
          let word = words[i];
          let word1Lo = word & BIGINT_WORD_LOW_PART_BIT_MASK;
          let word1Hi = word >> BIGINT_WORD_PART_BITS;
          let low = Math.imul(word1Lo, word2Lo),
              high = Math.imul(word1Hi, word2Hi);
          let middle = Math.imul(word2Lo, word1Hi) + Math.imul(word1Lo, word2Hi);
          low += ((middle & BIGINT_WORD_LOW_PART_BIT_MASK) << BIGINT_WORD_PART_BITS) + carry;
          low >>>= 0;

          if (low > BIGINT_WORD_OVERFLOW_BIT_MASK) {
            high += low >>> BIGINT_WORD_BITS;
            low &= BIGINT_WORD_BIT_MASK;
          }

          high += middle >> BIGINT_WORD_PART_BITS; // add the high part of middle

          words[i] = low;
          carry = high;
        }

        if (carry !== 0) {
          words[wordCount] = carry;
          this.wordCount += 1;
        }

        this.sign *= Math.sign(val);
      } else if (val instanceof BigInt) {
        this.initFromBigint(multiplyBigInts(this, val));
      } else {
        this.multiplyInPlace(new BigInt(val));
      }
    }
    /**
     * Get the word count by starting at the end of the array, searching for 0s and setting the wordCount accordingly.
     */


    recomputeWordCount() {
      const {
        words
      } = this;

      for (let i = words.length - 1; i >= 0; --i) {
        if (words[i] !== 0) {
          this.wordCount = i + 1;
          return;
        }
      }

      this.wordCount = 1; // There is always at least one word, even if the bigint has value 0
    }

    rightShiftInPlace(count) {
      count = count | 0;
      if (!Number.isInteger(count) || count < 0) throw new RangeError('Right shift count must be a nonnegative integer');
      if (count === 0) return; // Number of bits after shifting

      let newBitCount = this.bitCount() - count;

      if (newBitCount <= 0) {
        this.setZero();
        return;
      }

      this.wordCount = Math.ceil(newBitCount / BIGINT_WORD_BITS);
    }

    setZero() {
      this.words = new Int32Array(1);
      this.wordCount = 1;
      this.sign = 0;
      return this;
    }

    toBigint() {
      // Not too hard, we just construct it from the words in order
      const {
        words
      } = this;
      let out = 0n;
      let wordBits = NativeBigInt(BIGINT_WORD_BITS);

      for (let i = this.wordCount - 1; i >= 0; --i) {
        out <<= wordBits;
        out += NativeBigInt(words[i]);
      }

      return out;
    }
    /**
     * Here, we abuse floats a little bit to get a quick expansion for large radixes, as is used for base-10 conversion
     * when we chunk the number into base 10^15. The concept is quite simple; we start with the highest word, add it,
     * multiply everything by 2^30, and repeat.
     * @param radix
     * @returns {number[]}
     */


    toLargeRadixInternal(radix) {
      radix = +radix;
      if (!Number.isInteger(radix) || radix <= 4294967296 || radix >= 4503599627370496) throw new RangeError('Base of radix conversion must be an integer between 4294967296 and 4503599627370496, inclusive.');
      const digitsOut = [0];
      const {
        words
      } = this;

      for (let wordIndex = words.length - 1; wordIndex >= 0; --wordIndex) {
        let carry = 0,
            i = 0;

        for (; i < digitsOut.length; ++i) {
          let digit = digitsOut[i] * BIGINT_WORD_SIZE; // Because we're working with floats, this operation is exact
          // The low part, before adding the carry; this is exact

          let remainder = digit % radix; // floor(digit / radix) is sus because the division might round up and thus be incorrect, so we nudge it
          // in the right direction. floor(x + 0.5) is slightly faster than round(x)

          let nextCarry = Math.floor((digit - remainder) / radix + 0.5); // Need to add the carry

          digit = remainder + carry; // If the digit has gone beyond the radix, we need to update the next carry

          if (digit >= radix) {
            nextCarry++;
            digit -= radix;
          }

          digitsOut[i] = digit;
          carry = nextCarry;
        }

        if (carry) digitsOut[i] = carry;
        let word = words[wordIndex];
        digitsOut[0] += word;
      } // Carry any remaining stuff


      let carry = 0,
          i = 0;

      for (; i < digitsOut.length; ++i) {
        digitsOut[i] += carry;

        if (digitsOut[i] >= radix) {
          carry = 1;
          digitsOut[i] -= radix;
        } else {
          carry = 0;
          break;
        }
      }

      if (carry) digitsOut[i] = carry;
      return digitsOut;
    }
    /**
     * Convert the bigint to its closest double representation with the given rounding mode. We do this by abstracting a
     * double as basically a number of the form
     *
     *    .... 0 0 0 0 0 1 0 1 0 0 0 0 1 0 1 0 0 1 0 1 0 0 0 1 1 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ....
     *      ...  zeroes |                             53 bits                                  |  zeroes ...
     *
     * The closest number thus begins with the first bit of the integer, wherever that is, then either agrees or disagrees
     * with the rest of the integer. Having constructed the mantissa, we round in the correct direction and multiply by
     * the exponent.
     *
     * TODO
     */


    toNumber(roundingMode) {
      // Example: 17 = 0b10001
      let exponent = this.bitCount() - 1; // bitCount is 5, so the float will be of the form m * 2^4

      let word1 = this.getWordsAtBit(0, 2);
      let word2 = this.getWordAtBit(30);
    }

    toPow2RadixInternal(radix) {
      radix = +radix;
      if (radix === 1073741824) return this.words.subarray(0, this.wordCount);else return this.toRadixInternal(radix); // TODO
    }
    /**
     * Returns an array of integers corresponding to the digits in the expansion of a given radix. For example, converting
     * the BigInt corresponding to 5002 (20212021 base 3) to radix 3 will give [1, 2, 0, 2, 1, 2, 0, 2]. 0 gives an empty
     * array for all inputs. This function is relatively important to optimize, especially for radix=10, because it is
     * expensive but important. I will do some digging later, but currently it averages between 2 to 10 times slower than
     * native for some reason.
     * @param radix {number} Base for the conversion; should be an integer between 2 and 1125899906842600.
     */


    toRadixInternal(radix) {
      radix = +radix;
      if (!Number.isInteger(radix) || radix <= 1 || radix >= 1125899906842600) throw new RangeError('Base of radix conversion must be an integer between 2 and 1125899906842600, inclusive.'); // We construct the output via decomposing the integer into a series of operations of either x * 2 or x + 1,
      // applying each to the digitsOut array. These operations correspond to the bits of the BigInt in reverse order.

      const digitsOut = [];
      const {
        words
      } = this; // Is the radix large enough for these optimizations

      let canMultiplyBy8 = radix >= 8;
      let canMultiplyBy4 = radix >= 4;

      function doMultiplications() {
        while (queuedMultiplications > 0) {
          if (queuedMultiplications > 2 && canMultiplyBy8) {
            let carry = 0,
                i = 0;

            for (; i < digitsOut.length; ++i) {
              let currentDigit = digitsOut[i];
              let newDigit = currentDigit * 8 + carry;

              if (newDigit < radix) {
                carry = 0;
              } else if (newDigit < 2 * radix) {
                carry = 1;
                newDigit -= radix;
              } else if (newDigit < 3 * radix) {
                carry = 2;
                newDigit -= 2 * radix;
              } else if (newDigit < 4 * radix) {
                carry = 3;
                newDigit -= 3 * radix;
              } else if (newDigit < 5 * radix) {
                carry = 4;
                newDigit -= 4 * radix;
              } else if (newDigit < 6 * radix) {
                carry = 5;
                newDigit -= 5 * radix;
              } else if (newDigit < 7 * radix) {
                carry = 6;
                newDigit -= 6 * radix;
              } else {
                carry = 7;
                newDigit -= 7 * radix;
              }

              digitsOut[i] = newDigit;
            }

            if (carry !== 0) digitsOut[i] = carry;
            queuedMultiplications -= 3;
          } else if (queuedMultiplications > 1 && canMultiplyBy4) {
            let carry = 0,
                i = 0;

            for (; i < digitsOut.length; ++i) {
              let currentDigit = digitsOut[i];
              let newDigit = currentDigit * 4 + carry;

              if (newDigit < radix) {
                carry = 0;
              } else if (newDigit < 2 * radix) {
                carry = 1;
                newDigit -= radix;
              } else if (newDigit < 3 * radix) {
                carry = 2;
                newDigit -= 2 * radix;
              } else {
                carry = 3;
                newDigit -= 3 * radix;
              }

              digitsOut[i] = newDigit;
            }

            if (carry !== 0) digitsOut[i] = carry;
            queuedMultiplications -= 2;
          } else {
            let carry = 0,
                i = 0;

            for (; i < digitsOut.length; ++i) {
              let currentDigit = digitsOut[i];
              let newDigit = currentDigit * 2 + carry;

              if (newDigit >= radix) {
                newDigit -= radix;
                carry = 1;
              } else {
                carry = 0;
              }

              digitsOut[i] = newDigit;
            }

            if (carry === 1) digitsOut[i] = 1;
            queuedMultiplications--;
          }
        }
      }

      let queuedMultiplications = 0; // For each word, starting at the most significant word...

      for (let wordIndex = words.length - 1; wordIndex >= 0; --wordIndex) {
        let word = words[wordIndex];

        for (let j = 0; j < BIGINT_WORD_BITS; ++j) {
          queuedMultiplications++;
          word <<= 1; // For each bit in the word, from most to least significant

          if ((word & BIGINT_WORD_OVERFLOW_BIT_MASK) !== 0) {
            // Run the queued multiplications
            doMultiplications();
            let carry = 1,
                i = 0;

            for (; i < digitsOut.length; ++i) {
              let currentDigit = digitsOut[i];
              let newDigit = currentDigit + carry;

              if (newDigit >= radix) {
                newDigit = newDigit - radix;
                carry = 1;
              } else {
                carry = 0;
              }

              digitsOut[i] = newDigit;
              if (carry === 0) break; // early exit condition
            }

            if (carry === 1) digitsOut[i] = 1;
          }
        }
      }

      doMultiplications();
      return digitsOut.length === 0 ? [0] : digitsOut;
    }
    /**
     * Convert this BigInt to a string with a base between 2 and 36, inclusive. Formatting options are included.
     * @param radix {number}
     * @returns {string}
     */


    toString(radix = 10) {
      // The algorithm is as follows: We calculate the digits of the integer in a base (radix)^n, where n is chosen so that
      // the base fits nicely into a JS number. We then go chunk by chunk and convert to string, then concatenate
      // everything into a single output
      if (!Number.isInteger(radix) || radix < 2 || radix > 36) throw new RangeError('Base of radix conversion must be an integer between 2 and 36, inclusive.');
      const CHUNKING_EXPONENTS = [50, 1125899906842624, 31, 617673396283947, 25, 1125899906842624, 21, 476837158203125, 19, 609359740010496, 17, 232630513987207, 16, 281474976710656, 15, 205891132094649, 15, 1000000000000000, // for example, we convert to base 10^15 instead of 10 first
      14, 379749833583241, 13, 106993205379072, 13, 302875106592253, 13, 793714773254144, 12, 129746337890625, 12, 281474976710656, 12, 582622237229761, 11, 64268410079232, 11, 116490258898219, 11, 204800000000000, 11, 350277500542221, 11, 584318301411328, 11, 952809757913927, 10, 63403380965376, 10, 95367431640625, 10, 141167095653376, 10, 205891132094649, 10, 296196766695424, 10, 420707233300201, 10, 590490000000000, 10, 819628286980801, 10, 1125899906842624, 9, 46411484401953, 9, 60716992766464, 9, 78815638671875, 9, 101559956668416];
      const CHUNK_EXPONENT = CHUNKING_EXPONENTS[2 * radix - 4];
      const digits = this.toLargeRadixInternal(CHUNKING_EXPONENTS[2 * radix - 3]);
      let out = (this.sign < 0 ? '-' : '') + digits[digits.length - 1].toString(radix);

      for (let i = digits.length - 2; i >= 0; --i) {
        out += leftZeroPad(digits[i].toString(radix), CHUNK_EXPONENT, '0');
      }

      return out;
    }

  }

  const BIGFLOAT_WORD_BITS = 30;
  const BIGFLOAT_WORD_SIZE = 1 << BIGFLOAT_WORD_BITS;
  const BIGFLOAT_WORD_MAX = BIGFLOAT_WORD_SIZE - 1; // Kinda arbitrary, but whatever

  const BIGFLOAT_MIN_PRECISION_BITS = 4;
  const BIGFLOAT_MAX_PRECISION_BITS = 1 << 24;
  let CURRENT_PRECISION = 53;
  let CURRENT_ROUNDING_MODE = ROUNDING_MODE.NEAREST;
  const recip2Pow30 = pow2(-BIGFLOAT_WORD_BITS);
  const recip2Pow60 = pow2(-2 * BIGFLOAT_WORD_BITS);
  /**
   * The minimum number of words needed to store a mantissa with prec bits. The +2 is because the bits need to be stored
   * at any shift within the word, from 1 to 29, so some space may be needed.
   * @param prec {number}
   * @returns {number}
   */

  function neededWordsForPrecision(prec) {
    return (prec - 1) / BIGFLOAT_WORD_BITS + 2 | 0;
  }
  /**
   * Get an empty mantissa able to store a mantissa with prec bits.
   * @param prec
   * @returns {Int32Array}
   */

  function createMantissa(prec) {
    return new Int32Array(neededWordsForPrecision(prec));
  }
  /**
   * Given a subarray of a mantissa, return 0 if infinite zeros; 1 if between 0 and 0.5; 2 if a tie; 3 if between a tie and 1
   * @param mantissa {Int32Array}
   * @param index {number}
   * @returns {number}
   */


  function getTrailingInfo(mantissa, index) {
    let mantissaLen = mantissa.length;

    if (index >= 0) {
      if (index < mantissaLen) {
        if (mantissa[index] === 1 << 29) {
          // Potential tie
          for (let i = index + 1; i < mantissaLen; ++i) {
            if (mantissa[i] !== 0) return 3;
          }

          return 2;
        } else if (mantissa[index] > 1 << 29) {
          return 3;
        }
      } else {
        return 0;
      }
    } else {
      index = 0;
    }

    for (let i = index; i < mantissa.length; ++i) {
      if (mantissa[i] !== 0) return 1;
    }

    return 0;
  }
  /**
   * Count the number of leading zeros in a mantissa, including "invalid" mantissas in which the first word is not 0.
   * Returns -1 if the mantissa is all zeros.
   * @param mantissa {Int32Array}
   * @returns {number}
   */

  function clzMantissa(mantissa) {
    let mantissaLen = mantissa.length;

    for (let i = 0; i < mantissaLen; ++i) {
      if (mantissa[i]) {
        return Math.clz32(mantissa[i]) - 2 + 30 * i;
      }
    }

    return -1;
  }

  function setGlobalRoundingMode(roundingMode) {
    CURRENT_ROUNDING_MODE = roundingMode;
  }
  function setGlobalPrecision(precision) {
    CURRENT_PRECISION = precision;
  }
  /**
   * Round an (unsigned) mantissa to a given precision, in one of a few rounding modes. Also returns a shift if the
   * rounding operation brings the float to a higher exponent. Trailing information may be provided about the digits
   * following the mantissa to ensure correct rounding in those cases. This function allows aliasing, meaning the target
   * mantissa and the given mantissa can be the same array, leading to an in-place operation
   * @param mant {Int32Array} Array of 30-bit mantissa words
   * @param prec {number} Precision, in bits, to round the mantissa to
   * @param target {Int32Array} The mantissa to write to
   * @param round {number} Rounding mode; the operation treats the number as positive
   * @param trailing {number} 0 if the mantissa is followed by infinite zeros; 1 if between 0 and 0.5; 2 if a tie; 3 if between a tie and 1
   * @param trailingMode {number} 0 if the trailingInfo is considered to be at the end of all the words; 1 if it's considered to be at the end of precision
   * @returns {number} The shift of the rounding operation; 1 or 0
   */

  function roundMantissaToPrecision(mant, prec, target, round = CURRENT_ROUNDING_MODE, trailing = 0, trailingMode = 0) {
    let isAliased = mant === target;
    let mantLen = mant.length;

    if (round === ROUNDING_MODE.WHATEVER) {
      if (mant[0] === 0) {
        // Shifting needs to be done
        let shift = 0;

        for (let i = 1; i < mantLen; ++i) {
          if (mant[i]) {
            shift = i;
            break;
          }
        }

        leftShiftMantissa(mant, shift * 30, target);
        return -shift;
      }

      if (isAliased) return 0; // Copy over the mantissa without rounding

      for (let i = target.length - 1; i >= 0; --i) {
        target[i] = mant[i];
      }

      return 0;
    }

    let targetLen = target.length;
    let offset = -1,
        shift = 0,
        bitShift = 0; // How many ghost bits there are at the beginning; in other words, where to start counting precision bits from.
    // Specialized impl of clzMantissa

    for (let i = 0; i < mantLen; ++i) {
      if (mant[i]) {
        bitShift = 30 * i;
        offset = bitShift + Math.clz32(mant[i]) - 2;
        shift = -i | 0;
        break;
      }
    }

    if (offset === -1) {
      // Mantissa is all 0s, return
      for (let i = 0; i < targetLen; ++i) {
        target[i] = 0;
      }

      return shift;
    } // Copy over the given mantissa, shifted by shift


    leftShiftMantissa(mant, bitShift, target);
    offset -= bitShift; // Which bit to start truncating at, indexing from 0 = the beginning of the mantissa

    let trunc = prec + offset;
    let truncWord = trunc / BIGFLOAT_WORD_BITS | 0; // Number of bits to truncate off the word, a number between 1 and 30 inclusive

    let truncateLen = BIGFLOAT_WORD_BITS - (trunc - truncWord * BIGFLOAT_WORD_BITS); // Remainder of the truncation and whether to do a carry after the truncation (rounding up)

    let rem = 0,
        doCarry = false; // If the truncation would happen after the end of the mantissa...

    if (truncWord >= mantLen + shift) {
      // Whether the truncation bit is on the (nonexistent) word right after the mantissa
      let isAtVeryEnd = truncWord === mantLen + shift && truncateLen === BIGFLOAT_WORD_BITS; // Fake a trailing info after the end. Our general strategy with trailingInfoMode = 1 is to convert it into a form
      // that trailingInfoMode = 0 can handle

      if (!isAtVeryEnd && trailingMode === 1 && trailing > 0) {
        // Any positive trailing info that isn't at the very end turns into a trailing info between 0 and 0.5 at the end
        trailing = 1;
        isAtVeryEnd = true;
      } // If rounding at the very end, what we do depends directly on the trailingInfo. To avoid complicating matters, we
      // "fake" the tie and round up cases so that the code doesn't have to be duplicated--especially the tie code, which
      // is slightly intricate


      if (isAtVeryEnd) {
        if (trailing === 0 || round === ROUNDING_MODE.DOWN || round === ROUNDING_MODE.TOWARD_ZERO || trailing === 1 && (round === ROUNDING_MODE.TIES_AWAY || round === ROUNDING_MODE.TIES_EVEN)) {
          return shift;
        } else if (trailing === 2 && (round === ROUNDING_MODE.TIES_AWAY || round === ROUNDING_MODE.TIES_EVEN)) {
          rem = 0x20000000; // emulate tie = BIGFLOAT_WORD_SIZE / 2
        } else {
          rem = 0x30000000; // emulate round up = 3 * BIGFLOAT_WORD_SIZE / 4
        }
      } else {
        // Otherwise, if the rounding is happening after the very end, nothing happens since it's already all 0s
        return shift;
      }
    } else {
      // Truncate the word
      let word = target[truncWord];
      let truncatedWord = word >> truncateLen << truncateLen;
      target[truncWord] = truncatedWord; // Store the remainder, aka what was just truncated off

      if (trailingMode === 0) {
        rem = word - truncatedWord;
      } else {
        // When in info mode 1, we fake a remainder and trailing info that corresponds to the correct rounding mode.
        // 0 -> (0, 0), 1 (between 0 and 0.5) -> (0, positive), 2 -> (tie, 0), 3 -> (tie, (between 0 and 0.5))
        rem = trailing < 2 ? 0 : 1 << truncateLen - 1;
        trailing &= 1;
      }
    } // Determine whether to round up instead of truncating. Rounding up entails adding a 1 bit right where the mantissa
    // was truncated. For example, if we just truncated 011010110|1000, and our rounding mode is, say, TIES_AWAY, then we
    // determine that we have to round up and add 1 to the end: 01101011[1]. We call this a carry because it could
    // carry down the word in the right circumstances.


    doCarry: if (round === ROUNDING_MODE.UP || round === ROUNDING_MODE.TOWARD_INF) {
      // If we're rounding up, we carry if and only if the remainder is positive or there is a nonzero word after the
      // truncated word. If in info mode 1 we treat all the numbers following as 0 anyway, since that information is
      // contained within rem and trailingInfo
      if (rem > 0 || trailing > 0) {
        doCarry = true;
      } else if (trailingMode === 0) {
        for (let i = truncWord - shift + 1; i < mantLen; ++i) {
          if (mant[i] !== 0) {
            doCarry = true;
            break;
          }
        }
      }
    } else if (round === ROUNDING_MODE.NEAREST || round === ROUNDING_MODE.TIES_AWAY) {
      // Truncated amounts less than this mean round down; more means round up; equals means needs to check whether the
      // rest of the limbs are 0, then break the tie
      let splitPoint = 1 << truncateLen - 1;

      if (rem > splitPoint) {
        doCarry = true;
      } else if (rem === splitPoint) {
        if (trailing > 0) {
          doCarry = true;
        } else {
          if (trailingMode === 0) {
            // Try to break the tie by looking for nonzero bits
            for (let i = truncWord - shift + 1; i < mantLen; ++i) {
              if (mant[i] !== 0) {
                doCarry = true;
                break doCarry;
              }
            }
          } // Need to break the tie


          if (round === ROUNDING_MODE.TIES_EVEN) {
            // We only do the carry if it would give an even bit at the end. To do this we query for the bit which will be
            // affected (the truncateLen th bit). If the bit is 1, we do the carry. If truncateLen is 30 then we have to look
            // at the preceding word for the bit, since we truncated *at* a word
            let bit = truncateLen === BIGFLOAT_WORD_BITS ? target[truncWord - 1] & 1 : target[truncWord] >> truncateLen & 1;
            if (bit) doCarry = true;
          } else {
            // Ties away from zero; always carry
            doCarry = true;
          }
        }
      }
    } // Set all the words following the truncated word to 0


    for (let j = truncWord; ++j < targetLen;) {
      target[j] = 0;
    } // The carry value is returned indicating whether the mantissa has "overflowed" due to rounding


    let carry = 0;

    if (doCarry) {
      // Carry amount. Note that in the case of truncateLen = 30 we add 1 << 30 to a word, then immediately subtract
      // 2^30 and carry it to the next word, so everything works out
      carry = 1 << truncateLen;

      for (let j = truncWord; j >= 0; --j) {
        let word = target[j] + carry;

        if (word > BIGFLOAT_WORD_MAX) {
          word -= BIGFLOAT_WORD_SIZE;
          target[j] = word;
          carry = 1;
        } else {
          target[j] = word;
          carry = 0;
          break; // can immediately break
        }
      }
    }

    if (carry === 1) {
      // We carried the whole way and still have a 1, meaning the mantissa is now full of zeros and we need to shift by
      // one word and set the first word to a 1
      target[0] = 1;
      return shift + 1;
    }

    return shift;
  }
  /**
   * Add two mantissas together, potentially with an integer word shift on the second mantissa. The result mantissa may
   * also have a shift applied to it, which is relative to mant1. This function seems like it would be relatively simple,
   * but the shifting brings annoyingness, especially with the rounding modes. The overall concept is we compute as much
   * of the addition as needed without doing any carrying, then when we get to the end of the area of needed precision,
   * we continue computing until we can determine with certainty the carry and the rounding direction. This function
   * allows aliasing mant1 to be the target mantissa. TODO optimize
   * @param mant1 {Int32Array}
   * @param mant2 {Int32Array} Nonnegative shift applied to mantissa 2
   * @param mant2Shift {number}
   * @param prec {number}
   * @param target {Int32Array} The mantissa that is written to
   * @param round {number}
   */

  function addMantissas(mant1, mant2, mant2Shift, prec, target, round = CURRENT_ROUNDING_MODE) {
    let isAliased = mant1 === target;
    let mant1Len = mant1.length,
        mant2Len = mant2.length,
        mant2End = mant2Len + mant2Shift;
    let newMantLen = target.length;
    let newMant = target; // Need to compute to higher precision first

    if (mant1Len > newMantLen) {
      newMantLen = Math.max(mant1Len, neededWordsForPrecision(prec));
      newMant = new Int32Array(newMantLen);
    } // We first copy over all the parts of the addition we definitely need:


    if (!isAliased) {
      for (let i = 0; i < mant1Len; ++i) {
        newMant[i] = mant1[i];
      }

      for (let i = mant1Len; i < newMantLen; ++i) {
        newMant[i] = 0;
      }
    }

    let mant2Bound1 = Math.min(mant2End, newMantLen);

    for (let i = mant2Shift; i < mant2Bound1; ++i) {
      newMant[i] += mant2[i - mant2Shift];
    } // Do the carry


    let carry = 0;

    for (let i = mant1Len - 1; i >= 0; --i) {
      let word = newMant[i] + carry;

      if (word > 0x3fffffff) {
        word -= 0x40000000;
        newMant[i] = word;
        carry = 1;
      } else {
        newMant[i] = word;
        carry = 0;
      }
    } // All that remains are the words of mant2 to the right of newMantLen - mant2Shift


    let trailingInfo = 0;
    let needsTrailingInfo = round === ROUNDING_MODE.TIES_AWAY || round === ROUNDING_MODE.UP || round === ROUNDING_MODE.TOWARD_INF || round === ROUNDING_MODE.NEAREST;

    if (needsTrailingInfo) {
      let trailingShift = newMantLen - mant2Shift;
      trailingInfo = getTrailingInfo(mant2, Math.max(trailingShift, 0)); // If the trailing info is shifted, then round it to 0 or 1 as appropriate

      if (trailingShift < 0) trailingInfo = +!!trailingInfo;
    }

    let shift = 0;

    if (carry) {
      // Get trailing info from beyond the end of the truncation due to right shifting LOL
      if (needsTrailingInfo) {
        let lastWord = newMant[newMant.length - 1];

        if (lastWord === 0) {
          trailingInfo = +!!trailingInfo;
        } else if (lastWord < 0x20000000) {
          trailingInfo = 1;
        } else if (lastWord === 0x20000000) {
          trailingInfo = trailingInfo ? 3 : 2;
        } else {
          trailingInfo = 3;
        }
      }

      rightShiftMantissa(newMant, 30);
      newMant[0] = 1;
      shift += 1;
    }

    let roundingShift = roundMantissaToPrecision(newMant, prec, target, round, trailingInfo);
    return roundingShift + shift;
  }
  /**
   * Returns whether a mantissa can be correctly rounded, assuming a maximum error of maxNeg and maxPos in the last word.
   * This often allows rounding to happen before extra computation is requested. Assumes maxNeg and maxPos can actually
   * be subtracted; a mantissa has to have length at least 2 anyway.
   * @param mantissa {Int32Array}
   * @param precision {number}
   * @param round {number}
   * @param maxNeg {number}
   * @param maxPos {number}
   */

  function canMantissaBeRounded(mantissa, precision, round, maxNeg, maxPos) {
    if (maxNeg === 0 && maxPos === 0) return true;
    let zeros = clzMantissa(mantissa);
    let endOfPrec = zeros + precision;
    let endWord = endOfPrec / 30 | 0;

    if (endWord >= mantissa.length) {
      return false;
    }

    let truncateLen = BIGFLOAT_WORD_BITS - (endOfPrec - endWord * BIGFLOAT_WORD_BITS);
    let truncatedWord = mantissa[endWord] >> truncateLen << truncateLen;
    let rem = mantissa[endWord] - truncatedWord;

    if (round === ROUNDING_MODE.WHATEVER) {
      // We use a tighter bound (truncateLen - 2) because subtracting may require an extra bit of precision
      let lower = truncateLen === 1 ? 0 : 1 << truncateLen - 2;
      let higher = 1 << truncateLen - 1;

      if (rem - maxNeg < lower) {
        return false;
      } else if (rem + maxPos > higher) {
        return false;
      }

      return true;
    }

    return false;
  }
  /**
   * Subtract two (positive) mantissas, with mant1 > mant2 and mant2 under a given shift, returning a shift relative to
   * the first word of mantissa 1 depending on the result.
   * @param mant1 {Int32Array}
   * @param mant2 {Int32Array}
   * @param mant2Shift {number}
   * @param prec {number}
   * @param target {Int32Array} The mantissa to write to
   * @param round {number}
   */

  function subtractMantissas(mant1, mant2, mant2Shift, prec, target, round = CURRENT_ROUNDING_MODE) {
    // Important length variables
    let mant1Len = mant1.length,
        mant2Len = mant2.length;
    let targetLen = target.length; // New strategy; we iteratively compute words of the result until we get to the end of target, at which point we do
    // the carry. If the result has any leading zeros, shift left and continue computing words; if not, return if in
    // rounding mode: whatever, and if in a different rounding mode, compute whether a delta of -1 on the last word would
    // change the result. If it won't, round and return. If it will, compute words after the target until a carry and
    // trailing value are determined, which is a rather finnicky process that hopefully the fuzzer will help with
    // shift of the target relative to mant1

    let shift = 0; // shift of the current uncomputed word relative to mant1

    let writeShift = 0;
    let carry = 0;

    while (1) {
      // Compute the words of target
      let i = writeShift;

      for (; i < targetLen + shift; ++i) {
        let word1 = mant1[i] | 0;
        let word2 = mant2[i - mant2Shift] | 0;
        target[i - shift] = word1 - word2;
      }

      writeShift = i;

      for (let i = targetLen - 1; i >= 0; --i) {
        let word = target[i] | 0;

        if (carry) {
          word -= carry;
          target[i] = word;
        }

        if (word < 0) {
          target[i] += 0x40000000;
          carry = 1;
        } else {
          carry = 0;
        }
      }

      if (target[0] === 0) {
        let i = 0;

        for (; !target[i] && i < targetLen; ++i) leftShiftMantissa(target, 30 * i, target);

        shift += i;
        break;
      } else {
        if (round === ROUNDING_MODE.WHATEVER) break;
        let canBeRounded = canMantissaBeRounded(target, prec, round, 2, 0);
        if (canBeRounded) break; // TODO

        break; // Considering the words >= writeShift, we have 7 possibilities: less than -0x20000000, =-0x20000000, between
        // that and 0, 0 itself, between 0 and 0x20000000, 0x20000000, and greater than that. Negative results require
        // a negative carry
      }
    }

    return roundMantissaToPrecision(target, prec, target, round) - shift;
  }
  /**
   * Right shift a mantissa by shift bits, destroying any bits that trail off the end. This function supports aliasing.
   * @param mantissa {Int32Array}
   * @param shift {number}
   * @param targetMantissa
   * @returns {Int32Array} Returns the passed mantissa
   */

  function rightShiftMantissa(mantissa, shift, targetMantissa = mantissa) {
    if (shift === 0) return mantissa;
    let mantissaLen = mantissa.length;
    let targetMantissaLen = targetMantissa.length;
    let integerShift = shift / 30 | 0;
    let bitShift = shift % 30;

    if (bitShift === 0) {
      let lastFilledIndex = Math.min(mantissaLen - 1, targetMantissaLen - integerShift - 1); // Since it's a multiple of 30, we just copy everything over

      for (let i = lastFilledIndex; i >= 0; --i) {
        targetMantissa[i + integerShift] = mantissa[i];
      } // Fill empty stuff with zeros


      for (let i = 0; i < integerShift; ++i) targetMantissa[i] = 0;

      for (let i = lastFilledIndex + integerShift + 1; i < targetMantissaLen; ++i) {
        targetMantissa[i] = 0;
      }
    } else {
      let invBitShift = 30 - bitShift;
      let firstNeededIndex = mantissaLen - integerShift - 1;
      let lastFilledIndex = firstNeededIndex + integerShift + 1;
      targetMantissa[lastFilledIndex] = 0;

      for (let i = firstNeededIndex; i >= 0; --i) {
        let word = mantissa[i]; // Two components from each word

        if (i !== firstNeededIndex) {
          targetMantissa[i + integerShift + 1] += (word & (1 << bitShift) - 1) << invBitShift;
        }

        targetMantissa[i + integerShift] = word >> bitShift;
      }

      for (let i = 0; i < integerShift; ++i) targetMantissa[i] = 0;

      for (let i = lastFilledIndex; i < targetMantissaLen; ++i) {
        targetMantissa[i] = 0;
      }
    }
  }
  /**
   * Left shift a mantissa by shift bits, destroying any bits that come off the front, writing the result to target.
   * This function supports aliasing.
   * @param mantissa {Int32Array}
   * @param shift {number}
   * @param targetMantissa
   * @returns {Int32Array} Returns the passed mantissa
   */

  function leftShiftMantissa(mantissa, shift, targetMantissa = mantissa) {
    if (shift === 0) {
      if (targetMantissa !== mantissa) {
        let targetMantissaLen = targetMantissa.length;
        let copyLen = Math.min(targetMantissaLen, mantissa.length);

        for (let i = copyLen; i >= 0; --i) {
          targetMantissa[i] = mantissa[i];
        }

        for (let i = targetMantissaLen - 1; i > copyLen; --i) {
          targetMantissa[i] = 0;
        }
      }

      return mantissa;
    }

    let mantissaLen = mantissa.length;
    let targetMantissaLen = targetMantissa.length;
    let integerShift = shift / 30 | 0;
    let bitShift = shift % 30;

    if (bitShift === 0) {
      // Since it's a multiple of 30, we just copy everything over
      for (let i = integerShift; i < mantissaLen; ++i) {
        targetMantissa[i - integerShift] = mantissa[i];
      } // Fill empty stuff with zeros


      for (let i = mantissaLen - integerShift; i < targetMantissaLen; ++i) {
        targetMantissa[i] = 0;
      }
    } else {
      let invBitShift = 30 - bitShift;

      for (let i = integerShift; i < mantissaLen; ++i) {
        targetMantissa[i - integerShift] = (mantissa[i] << bitShift & 0x3fffffff) + (i < mantissaLen - 1 ? mantissa[i + 1] >> invBitShift : 0);
      }

      for (let i = mantissaLen - integerShift; i < targetMantissaLen; ++i) {
        targetMantissa[i] = 0;
      }
    }
  }
  /**
   * Multiply a mantissa by an integer between 1 and 2^30 - 1, returning a new mantissa and a shift amount. The shift
   * amount is the number of words by which the new mantissa is shifted relative to the first (and is thus either 0 or 1).
   * @param mantissa
   * @param precision
   * @param int
   * @param targetMantissa
   * @param roundingMode
   * @returns {number} The shift of the operation
   */

  function multiplyMantissaByInteger(mantissa, int, precision, targetMantissa, roundingMode = CURRENT_ROUNDING_MODE) {
    let newMantissa = new Int32Array(neededWordsForPrecision(precision) + 1); // extra word for overflow
    // Decompose the given integer into two 15-bit words for the multiplication

    let word1Lo = int & 0x7fff;
    let word1Hi = int >> 15;
    let carry = 0;

    for (let i = mantissa.length - 1; i >= 0; --i) {
      // Multiply the word, storing the low part and tracking the high part
      let word = mantissa[i];
      let word2Lo = word & 0x7fff;
      let word2Hi = word >> 15;
      let low = Math.imul(word1Lo, word2Lo),
          high = Math.imul(word1Hi, word2Hi);
      let middle = Math.imul(word2Lo, word1Hi) + Math.imul(word1Lo, word2Hi);
      low += ((middle & 0x7fff) << 15) + carry;

      if (low > 0x3fffffff) {
        high += low >> 30;
        low &= 0x3fffffff;
      }

      high += middle >> 15;
      newMantissa[i + 1] = low;
      carry = high;
    }

    newMantissa[0] = carry;
    let shift = 1;

    if (carry === 0) {
      // Shift left; there was no carry after all
      for (let i = 0; i < newMantissa.length - 1; ++i) {
        newMantissa[i] = newMantissa[i + 1];
      }

      newMantissa[newMantissa.length - 1] = 0;
      shift -= 1;
    }

    let roundingShift = roundMantissaToPrecision(newMantissa, precision, targetMantissa, roundingMode);
    return shift + roundingShift;
  }
  function sqrtMantissa(mantissa, precision, targetMantissa, roundingMode = CURRENT_ROUNDING_MODE) {// We proceed by estimating the square root, then do a root finding search basically
  }
  /**
   * Not yet fully resistant, but a significantly faster (2x speedup) multiplication operation that works by only
   * multiplying the words which must appear in the final result. Hard to optimize beyond here until we get to Karatsuba
   * and the like, which isn't really relevant at small scales.
   * @param mant1
   * @param mant2
   * @param precision
   * @param targetMantissa
   * @param roundingMode
   * @returns {number}
   */

  function multiplyMantissas(mant1, mant2, precision, targetMantissa, roundingMode = CURRENT_ROUNDING_MODE) {
    let mant1Len = mant1.length,
        mant2Len = mant2.length;
    let targetMantissaLen = targetMantissa.length;

    for (let i = 0; i < targetMantissaLen; ++i) targetMantissa[i] = 0;

    let highestWord = 0; // Low words that weren't counted on the first pass. Note that this number may overflow the 32 bit integer limit

    for (let i = Math.min(targetMantissaLen, mant1Len - 1); i >= 0; --i) {
      let mant1Word = mant1[i];
      let mant1Lo = mant1Word & 0x7fff;
      let mant1Hi = mant1Word >> 15;
      let carry = 0;

      for (let j = Math.min(targetMantissaLen - i, mant2Len - 1); j >= 0; --j) {
        let writeIndex = i + j;
        let mant2Word = mant2[j];
        let mant2Lo = mant2Word & 0x7fff;
        let mant2Hi = mant2Word >> 15;
        let low = Math.imul(mant1Lo, mant2Lo);
        let high = Math.imul(mant1Hi, mant2Hi);
        let middle = Math.imul(mant1Hi, mant2Lo) + Math.imul(mant1Lo, mant2Hi) | 0;
        low += ((middle & 0x7fff) << 15) + (writeIndex < targetMantissaLen ? targetMantissa[writeIndex] : 0) + carry;
        low >>>= 0;

        if (low > 0x3fffffff) {
          high += low >>> 30;
          low &= 0x3fffffff;
        }

        high += middle >> 15;
        if (writeIndex < targetMantissaLen) targetMantissa[writeIndex] = low;
        carry = high;
      }

      if (i > 0) {
        targetMantissa[i - 1] += carry;
      } else {
        highestWord = carry;
      }
    }

    let shift = -1;

    if (highestWord !== 0) {
      rightShiftMantissa(targetMantissa, 30);
      targetMantissa[0] = highestWord;
      shift = 0;
    }

    let roundingShift = roundMantissaToPrecision(targetMantissa, precision, targetMantissa, roundingMode);
    return shift + roundingShift;
  }
  function fmodMantissas(mant1, mant2, mant2Shift, targetMantissa, roundingMode) {}
  /**
   * Ah, the formidable division. I really don't know how to do division besides a boring shift and subtract approach,
   * generating a couple bits at a time. So in keeping with the challenge of doing this stuff without outside references,
   * I guess that's what I'll do for now!!!11
   * @param mant1 {Int32Array}
   * @param mant2 {Int32Array}
   * @param precision {number}
   * @param targetMantissa {Int32Array}
   * @param roundingMode {number}
   */

  function divMantissas(mant1, mant2, precision, targetMantissa, roundingMode = CURRENT_ROUNDING_MODE) {
    // Init mant1Copy with a shifted copy of mant1
    let mant1Copy = new Int32Array(Math.max(mant1.length + 1, mant2.length));

    for (let i = 0; i < mant1.length; ++i) mant1Copy[i + 1] = mant1[i];
    /**
     * Get the number of leading zeros in the shifting mantissa, plus 2 (due to clz32), and -1 if it's all zeros.
     * @returns {number}
     */


    function getMant1LeadingZeros() {
      for (let i = 0; i < mant1Copy.length; ++i) {
        let word = mant1Copy[i];
        if (word > 0) return Math.clz32(word) + 30 * i;
      }

      return -1;
    }

    for (let i = targetMantissa.length - 1; i >= 0; --i) {
      targetMantissa[i] = 0;
    }

    let newMantissaShift = 1; // Index of the highest bit and last significant bit within newMantissa (uninitialized) TODO

    let firstBitIndex = -1,
        lastSignificantBit = 1 << 30; // maybe v8 can optimize this to be an integer :P
    // Index of the current bit we are writing to

    let bitIndex = -1; // Info of the bits coming after the last significant bit TODO

    let trailingInfo = 0;

    function pushZeroBits(count) {
      if (bitIndex === -1 && count >= 31) {
        // For the cases in which the first word is 0
        newMantissaShift -= 1;
        bitIndex += count - 30;
      } else {
        bitIndex += count;
      }
    }

    function pushOneBit() {
      if (bitIndex > lastSignificantBit) {
        // At this point, we can determine the trailing info.
        if (bitIndex === lastSignificantBit + 1) {
          if (getMant1LeadingZeros() === -1) {
            trailingInfo = 2;
          } else {
            trailingInfo = 3;
          }
        } else {
          trailingInfo = 1;
        }

        return true;
      }

      let subIndex = bitIndex / 30 | 0;
      let bit = 29 - bitIndex % 30;
      targetMantissa[subIndex] += 1 << bit;

      if (firstBitIndex === -1) {
        firstBitIndex = bitIndex;
        lastSignificantBit = firstBitIndex + precision - 1;
      }

      return false;
    }

    let mant2LeadingZeros = Math.clz32(mant2[0]);

    while (true) {
      let mant1Zeros = getMant1LeadingZeros();
      if (mant1Zeros === -1) break;
      let shift = mant1Zeros - mant2LeadingZeros;

      if (shift !== 0) {
        leftShiftMantissa(mant1Copy, shift);
        pushZeroBits(shift);
      }

      let cmp = compareMantissas(mant1Copy, mant2);

      if (cmp === -1) {
        leftShiftMantissa(mant1Copy, 1);
        pushZeroBits(1);
      } else if (cmp === 0) {
        pushOneBit();
        break;
      } // Subtract mant2 from mant1


      let carry = 0;

      for (let i = mant2.length - 1; i >= 0; --i) {
        let word = mant1Copy[i] - mant2[i] - carry;

        if (word < 0) {
          word += BIGFLOAT_WORD_SIZE;
          carry = 1;
        } else {
          carry = 0;
        }

        mant1Copy[i] = word;
      } // Note that carry will sometimes be -1 at this point, when the cmp === -1 shift has truncated off the highest bit
      // of mant1Copy. This is intentional


      if (pushOneBit()) break;
    }

    const roundingShift = roundMantissaToPrecision(targetMantissa, precision, targetMantissa, roundingMode, trailingInfo, 1);
    return newMantissaShift + roundingShift;
  }
  /**
   * Determine which of two mantissas is larger. -1 if mant1 is smaller, 0 if they are equal, and 1 if mant2 is larger.
   * @param mant1
   * @param mant2
   */

  function compareMantissas(mant1, mant2) {
    let swapResult = false;

    if (mant1.length < mant2.length) {
      let tmp = mant1;
      mant1 = mant2;
      mant2 = tmp;
      swapResult = true;
    }

    let mant1Len = mant1.length,
        mant2Len = mant2.length;
    let result = 0;

    for (let i = 0; i < mant1Len; ++i) {
      let mant1Word = mant1[i];
      let mant2Word = i < mant2Len ? mant2[i] : 0;

      if (mant1Word > mant2Word) {
        result = 1;
        break;
      } else if (mant1Word < mant2Word) {
        result = -1;
        break;
      }
    }

    return swapResult ? -result : result;
  } // Converting a binary mantissa to a base-10 sequence isn't trivial!

  function mantissaToBaseWithPrecision(mant, shift, digits, base = 10) {
    let beforeDecimalPoint = [0];
    let afterDecimalPoint = [0]; // Fractional component

    function computeAfterDecimalPoint() {
      function divPow15() {
        let carry = 0;

        for (let i = 0; i < afterDecimalPoint.length; ++i) {
          let word = afterDecimalPoint[i];
          let div = word / 2 ** 15;
          let flr = Math.floor(div);
          let newWord = flr + carry;
          afterDecimalPoint[i] = newWord;
          carry = (div - flr) * 10 ** 15;
        }

        if (carry) afterDecimalPoint.push(carry);
      }

      for (let i = mant.length - 1; i >= shift; --i) {
        if (i < 0) {
          divPow15();
          divPow15();
          continue;
        }

        afterDecimalPoint[0] += mant[i] & 0x7fff;
        divPow15();
        afterDecimalPoint[0] += mant[i] >> 15;
        divPow15();
      }
    }

    function computeBeforeDecimalPoint() {
      function mulPow30() {
        let carry = 0;

        for (let i = 0; i < beforeDecimalPoint.length; ++i) {
          let word = beforeDecimalPoint[i];
          let mul = word * 2 ** 30;
          let rem = mul % 10 ** 15;
          let flr = Math.floor((mul - rem) / 10 ** 15 + 0.5);
          rem += carry;

          if (rem > 10 ** 15) {
            rem -= 10 ** 15;
            flr += 1;
          }

          beforeDecimalPoint[i] = rem;
          carry = flr;
        }

        if (carry) {
          beforeDecimalPoint.push(carry);
        }
      }

      for (let i = 0; i < Math.min(shift, mant.length); ++i) {
        mulPow30();
        beforeDecimalPoint[0] += mant[i];
      }
    }

    computeBeforeDecimalPoint();
    computeAfterDecimalPoint();

    function collapseDigits(digits) {
      return digits.map(d => leftZeroPad(d + '', 15)).join('');
    }

    return [collapseDigits(beforeDecimalPoint.reverse()), collapseDigits(afterDecimalPoint.slice(1))];
  }

  function prettyPrintFloat(mantissa, precision) {
    let words = [];
    let indices = [];

    for (let i = 0; i < mantissa.length; ++i) {
      words.push(leftZeroPad(mantissa[i].toString(2), BIGFLOAT_WORD_BITS, '0'));
      indices.push('0    5    10   15   20   25   ');
    }

    function insert(index, wordChar, indicesChar) {
      let wordIndex = Math.floor(index / BIGFLOAT_WORD_BITS);
      let subIndex = index - wordIndex * BIGFLOAT_WORD_BITS;
      let wordWord = words[wordIndex];
      let indicesWord = indices[wordIndex];
      words[wordIndex] = wordWord.slice(0, subIndex) + wordChar + wordWord.slice(subIndex);
      indices[wordIndex] = indicesWord.slice(0, subIndex) + indicesChar + indicesWord.slice(subIndex);
    } // Insert [ ... ] surrounding the actual meaningful parts of the mantissa


    if (precision) {
      let offset = Math.clz32(mantissa[0]) - 2;
      let startIndex = offset;
      let endIndex = offset + precision;
      insert(startIndex, '[', ' ');
      insert(endIndex, ']', ' ');
    }

    words = words.join(' | ');
    indices = indices.join(' | ');
    return words + '\n' + indices;
  }
  /**
   * Takes in an arbitrary input and converts to a corresponding big float. If passed a BigFloat, it does nothing; if
   * passed a number, it converts to BigFloat. Used for user-facing operations
   * @param arg
   */

  function cvtToBigFloat(arg) {
    if (arg instanceof BigFloat) return arg;
    if (typeof arg === 'number') return BigFloat.fromNumber(arg, 53);
    throw new TypeError("Cannot convert argument ".concat(arg, " to BigFloat"));
  }

  function computeLn2(precision) {
    // We use the rapid series ln(2) = 2/3 * sum(k=0 to inf, 1 / ((2k+1) * 9^k)). To compute ln(2) to 1 ulp of precision,
    // we see that the error term after n terms is
    //        1                  1                   1          1
    //   -----------    +   -----------    + ... < ------ * --------- < 2^(-prec-1)
    // (2n+3) * 9^(n+1)   (2n+5) * 9^(n+2)          2n+3     8^(n+1)
    // and ignoring the 1/(2n+3) term for a moment, we see that n = prec / 4 + 2 iterations should be sufficient. The
    // remaining concern is rounding, of course; how many extra bits of precision do we need? Well, probably on the order
    // of 2 * log2(iters). I'm too bored to formalize it, so that's what we'll go with
    let ln2 = BigFloat.new(precision);
    let iters = Math.ceil(precision / 4) + 1;
    let workingPrecision = precision + 2 * Math.log2(iters) | 0;
    let twoThirds = BigFloat.div(2, 3, workingPrecision, ROUNDING_MODE.WHATEVER);
    let oneNinth = BigFloat.div(1, 9, workingPrecision, ROUNDING_MODE.WHATEVER);
    let tmp = BigFloat.new(workingPrecision),
        tmp2 = BigFloat.new(workingPrecision),
        sum = BigFloat.fromNumber(1, workingPrecision);
    let oneNinthPowed = BigFloat.fromNumber(1, workingPrecision);
    let summand = BigFloat.new(workingPrecision);

    for (let k = 1; k <= iters; ++k) {
      BigFloat.mulTo(oneNinth, oneNinthPowed, tmp, ROUNDING_MODE.WHATEVER);
      BigFloat.divNumberTo(tmp, 2 * k + 1, summand, ROUNDING_MODE.WHATEVER);
      BigFloat.addTo(summand, sum, tmp2, ROUNDING_MODE.WHATEVER);
      [tmp, oneNinthPowed] = [oneNinthPowed, tmp];
      [tmp2, sum] = [sum, tmp2];
    }

    BigFloat.mulTo(twoThirds, sum, ln2);
    return ln2;
  }
  let cachedLn2, cachedLn10;
  function getCachedLn2(precision) {
    if (!cachedLn2 || cachedLn2.prec < precision) {
      cachedLn2 = computeLn2(precision);
    }

    return cachedLn2;
  }

  function getCachedLn10(precision) {
    if (!cachedLn10 || cachedLn10.prec < precision) {
      let workingPrecision = precision + 2;
      cachedLn10 = BigFloat.ln(10, workingPrecision);
    }

    return cachedLn10;
  }
  /**
   * Compute e^f for 0.5 <= f < 1. e^f = 1 + f * (1 + f/2 * (1 + f/3 * ... ) ) )
   */


  function expBaseCase(f, precision) {
    let workingPrecision = precision + 2;
    let tmp = BigFloat.new(workingPrecision);
    let tmp2 = BigFloat.new(workingPrecision);
    let target = BigFloat.new(precision); // The number of iterations depends on f. Since the term is f^n / n!, we take logs -> n ln(f) - ln(n!) = n ln(f) - n ln(n) + n
    // We want this to be less than ln(2^-(p + 1)) = -(p + 1) * ln(2) or so. We write the equation as n (ln f - ln n + 1) = -(p+1) * ln 2.
    // This is an annoying equation. For now I just came up with an approximation by picking n = c*p for a constant c and
    // fiddling around with it, till I got the approximation n = -l / (ln(f) - (ln(-l/(ln(f) - ln(p) + 2)) + 1), where l = p ln(2).
    // No clue how it works, but it seems to be good enough. At 999 bits precision and 0.5 it reports 153 iterations are needed,
    // while only 148 are sufficient. Oh well.

    let pln2 = (precision + 1) * Math.log(2);
    let lnf = Math.log(Math.abs(f.toNumber(ROUNDING_MODE.WHATEVER)));
    let lnp = Math.log(precision);
    const iters = Math.ceil(-pln2 / (lnf - Math.log(-pln2 / (lnf - lnp + 2)) + 1));
    BigFloat.divNumberTo(f, iters, tmp);
    BigFloat.addNumberTo(tmp, 1, target);

    for (let m = iters - 1; m > 0; --m) {
      BigFloat.divNumberTo(f, m, tmp);
      BigFloat.mulTo(tmp, target, tmp2);
      BigFloat.addNumberTo(tmp2, 1, target);
    }

    return target;
  } // A special float with a mantissa of 30 bits. Its value should be interpreted as 2^exp * mant. Infinity is represented
  // with a mantissa of Infinity, 0 is represented with a mantissa of 0, and NaN is represented with a mantissa of NaN

  class DeltaFloat {
    constructor(exp, mant) {
      /**
       * Exponent of the delta float
       * @type {number}
       */
      this.exp = exp;
      /**
       * Number ranging from 2^29 to 2^30 - 1 for normal numbers,
       * @type {number}
       */

      this.mant = mant;
    }
    /**
     * Convert a JS number to a DeltaFloat. We always round up.
     * @param num {number}
     * @returns {DeltaFloat}
     */


    static fromNumber(num) {
      num = Math.abs(num);

      if (num === 0 || num === Infinity || Number.isNaN(num)) {
        return new DeltaFloat(0, num);
      } else {
        // num = f * 2^exp where 0.5 <= f < 1
        let [f, exp] = frExp(num);
        f *= 1 << 30;
        exp -= 30;
        f = Math.ceil(f);

        if (f === 1 << 30) {
          f = 1 << 29;
          exp += 1;
        }

        return new DeltaFloat(exp, f);
      }
    }

    toNumber() {
      // TODO handle denormal numbers
      let mant = this.mant;

      if (mant === 0 || mant === Infinity || Number.isNaN(mant)) {
        return mant;
      }

      return mant * pow2(this.exp);
    }

    toBigFloat(prec = 30, roundingMode = CURRENT_ROUNDING_MODE) {
      let bigFloat = BigFloat.fromNumber(this.mant, prec, roundingMode); // Note this is permissible because mulPowTwoTo permits aliasing

      BigFloat.mulPowTwoTo(bigFloat, this.exp, bigFloat, roundingMode);
      return bigFloat;
    }
    /**
     * Add two delta floats, always rounding up
     * @param f1 {DeltaFloat}
     * @param f2 {DeltaFloat}
     * @param target {DeltaFloat}
     */


    static addTo(f1, f2, target) {
      let f1mant = f1.mant,
          f1exp = f1.exp,
          f2mant = f2.mant,
          f2exp = f2.exp;
    }

    toPrecision(prec, roundingMode = CURRENT_ROUNDING_MODE) {
      return this.toBigFloat().toPrecision(prec, roundingMode);
    }

  }
  /**
   * Unlike a typical RealInterval, we represent a BigFloatInterval with a center and a radius. The radius need not have
   * high precision, so we use a DeltaFloat--which has a fixed mantissa of 30 bits and an exponent that can range as
   * necessary. Kudos to Frederick Johansson for this idea (see https://arblib.org/mag.html).
   */

  class BigFloatInterval {
    constructor(prec) {
      /**
       * @type BigFloat
       */
      this.center = BigFloat.new(prec);
      /**
       * @type DeltaFloat
       */

      this.delta = new DeltaFloat(0, 0);
    }

    static fromNumber(num, prec = CURRENT_PRECISION, roundingMode = CURRENT_ROUNDING_MODE) {
      const interval = new BigFloatInterval(prec);
      interval.center.setFromNumber(num);
      return interval;
    }
    /**
     *
     * @param f1 {BigFloatInterval|BigFloat}
     * @param f2 {BigFloatInterval|BigFloat}
     * @param target {BigFloatInterval}
     */


    static addTo(f1, f2, target) {

      let targetPrecision = target.center.prec;
    }

  }
  const LOG210 = Math.log2(10);
  class BigFloat {
    /**
     * BEGIN CONSTRUCTORS
     */

    /**
     * Base constructor. Should generally not be called directly by the user.
     * @param sign {number} Sign of the float (-1, 0, 1, -Infinity, or Infinity)
     * @param exp {number} Exponent of the float
     * @param prec {number} Precision, in bits, of the float
     * @param mant {Int32Array} Storage of the float bits
     */
    constructor(sign, exp, prec, mant) {
      this.sign = sign;
      this.exp = exp;
      this.prec = prec;
      this.mant = mant;
    }
    /**
     * Construct a new BigFloat from a JS number with a given precision and rounding in the correct direction if the
     * precision is less than 53.
     * @param num {number} JS number to convert from
     * @param precision {number} Precision, in bits, of the float
     * @param roundingMode {number} Enum of which direction to round in
     * @returns {BigFloat}
     */


    static fromNumber(num, precision = CURRENT_PRECISION, roundingMode = CURRENT_ROUNDING_MODE) {
      let float = BigFloat.new(precision);
      float.setFromNumber(num, roundingMode);
      return float;
    }

    static fromString(str, precision) {
      let float = BigFloat.new(precision);
      float.setFromString(str);
      return float;
    }
    /**
     * Create a new BigFloat with a given precision, initialized to a value of 0.
     * @param prec {number} Precision, in bits, of the float
     * @returns {BigFloat}
     */


    static new(prec = CURRENT_PRECISION) {
      if (prec < BIGFLOAT_MIN_PRECISION_BITS || prec > BIGFLOAT_MAX_PRECISION_BITS || !Number.isInteger(prec)) {
        throw new RangeError("BigFloat precision must be an integer in the range [".concat(BIGFLOAT_MIN_PRECISION_BITS, ", ").concat(BIGFLOAT_MAX_PRECISION_BITS, "]"));
      }

      return new BigFloat(0, 0, prec, createMantissa(prec));
    }
    /*
     * BEGIN COMPARISON OPERATORS
     */

    /**
     * Compare the magnitude of two floats, ignoring their signs entirely. Returns -1 if |f1| < |f2|, 0 if |f1| = |f2|,
     * and 1 if |f1| > |f2|.
     * @param f1 {BigFloat}
     * @param f2 {BigFloat}
     * @returns {number}
     */


    static cmpMagnitudes(f1, f2) {
      f1 = cvtToBigFloat(f1);
      f2 = cvtToBigFloat(f2);

      if (f1.exp < f2.exp) {
        return -1;
      } else if (f1.exp > f2.exp) {
        return 1;
      } else {
        return compareMantissas(f1.mant, f2.mant);
      }
    }
    /**
     * Compare two floats. Returns -1 if f1 < f2, 0 if f1 = f2, and 1 if f1 > f2. If either is NaN, returns NaN.
     * @param f1 {BigFloat}
     * @param f2 {BigFloat}
     * @returns {number}
     */


    static cmpFloats(f1, f2) {
      const f1Sign = f1.sign;
      const f2Sign = f2.sign;
      if (f1Sign < f2Sign) return -1;
      if (f1Sign > f2Sign) return 1;
      if (f1Sign === 0 && f2Sign === 0) return 0;

      if (!Number.isFinite(f1Sign) || !Number.isFinite(f2Sign)) {
        // Then they are either both a same signed infinity, or two NaNs
        if (Number.isNaN(f1Sign) || Number.isNaN(f2Sign)) return NaN;
        return 0;
      }

      if (f1.exp < f2.exp) {
        return -1;
      } else if (f1.exp > f2.exp) {
        return 1;
      } else {
        return f1.sign * compareMantissas(f1.mant, f2.mant);
      }
    }
    /**
     * BEGIN PRIMITIVE OPERATORS (ADDITION, MULTIPLICATION, ETC.).
     *
     * For maximum speed, these operators are provided in a "write-to" format to limit the number of needed allocations
     * of mantissas, et cetera. Seems annoying, but it actually provides a huge speedup relative to returning floats. More
     * convenient operations are provided as add(...), sub(...), and so on.
     */

    /**
     * Add floats f1 and f2 to the target float, using the precision of the target. target must not be either of f1 or f2.
     * @param f1 {BigFloat} The first float
     * @param f2 {BigFloat} The second float
     * @param target {BigFloat} The target float
     * @param roundingMode {number} The rounding mode
     * @param flipF2Sign {boolean} Whether to flip the sign of f2 (used to simplify the subtraction code)
     */


    static addTo(f1, f2, target, roundingMode = CURRENT_ROUNDING_MODE, flipF2Sign = false) {
      let f1Sign = f1.sign;
      let f2Sign = flipF2Sign ? -f2.sign : f2.sign; // Special cases

      if (!Number.isFinite(f1Sign) || !Number.isFinite(f2Sign)) {
        target.sign = f1Sign + f2Sign;
        return;
      }

      if (f1Sign === 0) {
        target.setFromFloat(f2, roundingMode);
        if (flipF2Sign) target.sign *= -1;
        return;
      }

      if (f2Sign === 0) {
        target.setFromFloat(f1, roundingMode);
        return;
      } // Used to swap it so that f1 > f2


      function swapF1F2() {
        let tmp = f1;
        f1 = f2;
        f2 = tmp;
        let tmp2 = f1Sign;
        f1Sign = f2Sign;
        f2Sign = tmp2;
      }

      let targetPrecision = target.prec;
      let targetMantissa = target.mant;

      if (f1Sign !== f2Sign) {
        let cmp = BigFloat.cmpMagnitudes(f1, f2);
        let sign = 0;

        if (cmp === 0) {
          target.setZero();
          return;
        } else if (cmp === 1) {
          sign = f1Sign;
        } else {
          sign = f2Sign;
        }

        if (cmp === -1) swapF1F2();
        let shift = subtractMantissas(f1.mant, f2.mant, f1.exp - f2.exp, targetPrecision, targetMantissa, roundingMode);
        target.sign = sign;
        target.exp = f1.exp + shift;
      } else {
        if (f1.exp < f2.exp) swapF1F2();
        let shift = addMantissas(f1.mant, f2.mant, f1.exp - f2.exp, targetPrecision, targetMantissa, roundingMode);
        target.sign = f1Sign;
        target.exp = f1.exp + shift;
      }
    }
    /**
     * Add a JS number to the given float, writing the result to target
     * @param f1 {BigFloat}
     * @param num {number}
     * @param target {BigFloat}
     * @param roundingMode {number}
     */


    static addNumberTo(f1, num, target, roundingMode = CURRENT_ROUNDING_MODE) {
      DOUBLE_STORE.setFromNumber(num);
      BigFloat.addTo(f1, DOUBLE_STORE, target, roundingMode);
    }
    /**
     * Subtract two numbers and write the result to the target.
     * @param f1 {BigFloat}
     * @param f2 {BigFloat}
     * @param target {BigFloat}
     * @param roundingMode {number}
     */


    static subTo(f1, f2, target, roundingMode = CURRENT_ROUNDING_MODE) {
      BigFloat.addTo(f1, f2, target, roundingMode, true);
    }
    /**
     * Subtract a JS number from the given float, writing the result to target
     * @param f1 {BigFloat}
     * @param num {number}
     * @param target {BigFloat}
     * @param roundingMode {number}
     */


    static subNumberTo(f1, num, target, roundingMode = CURRENT_ROUNDING_MODE) {
      DOUBLE_STORE.setFromNumber(num);
      BigFloat.subTo(f1, DOUBLE_STORE, target, roundingMode);
    }
    /**
     * Multiply two big floats and write the result to the target.
     * @param f1 {BigFloat}
     * @param f2 {BigFloat}
     * @param target {BigFloat}
     * @param roundingMode {number}
     */


    static mulTo(f1, f2, target, roundingMode = CURRENT_ROUNDING_MODE) {
      let f1Sign = f1.sign;
      let f2Sign = f2.sign;
      target.sign = f1Sign * f2Sign;

      if (f1Sign === 0 || f2Sign === 0 || !Number.isFinite(f1Sign) || !Number.isFinite(f2Sign)) {
        return;
      }

      if (f1.exp < f2.exp) {
        let tmp = f1;
        f1 = f2;
        f2 = tmp;
      }

      let shift = multiplyMantissas(f1.mant, f2.mant, target.prec, target.mant, roundingMode);
      target.exp = f1.exp + f2.exp + shift;
    }
    /**
     * Multiply a float by a JS number and write the result to the target. This function supports aliasing; the target
     * float may be the same float as the first float. Aliasing should generally only be used when the number is a small
     * integer.
     * @param float {BigFloat}
     * @param num {number}
     * @param target {BigFloat}
     * @param roundingMode {number}
     */


    static mulNumberTo(float, num, target, roundingMode = CURRENT_ROUNDING_MODE) {
      let isAliased = float === target;

      if (num === 0) {
        target.setZero();
        return;
      } else if (num === 1) {
        if (!isAliased) target.setFromFloat(float);
        return;
      }

      if (Number.isInteger(num)) {
        let absNum = Math.abs(num);

        if (absNum <= 0x3fffffff) {
          let shift = multiplyMantissaByInteger(float.mant, absNum, target.prec, target.mant, roundingMode);
          target.sign = float.sign * Math.sign(num);
          target.exp = float.exp + shift;
          return;
        }
      }

      DOUBLE_STORE.setFromNumber(num);

      if (isAliased) {
        let tmp = BigFloat.new(target.prec);
        BigFloat.mulTo(float, DOUBLE_STORE, tmp, roundingMode);
        target.set(tmp);
      } else {
        BigFloat.mulTo(float, DOUBLE_STORE, target, roundingMode);
      }
    }
    /**
     * Multiply a float by a power of two, writing the result to the target. This operation is very fast because it can
     * be accomplished via only bitshifts. This function allows aliasing, meaning the target float can be the same as the
     * argument.
     * @param float
     * @param exponent {number}
     * @param target
     * @param roundingMode
     */


    static mulPowTwoTo(float, exponent, target, roundingMode = CURRENT_ROUNDING_MODE) {
      if (float.sign === 0 || !Number.isFinite(float.sign)) {
        target.sign = float.sign;
        return;
      }

      let clz = Math.clz32(float.mant[0]) - 2;
      let newClz = clz - exponent;
      let expShift = 0;

      if (newClz > 29 || newClz < 0) {
        expShift = Math.floor(newClz / 30);
        newClz = newClz - expShift * 30;
      }

      target.exp = float.exp - expShift;
      let bitshift = newClz - clz;

      if (bitshift < 0) {
        leftShiftMantissa(float.mant, -bitshift, target.mant);
      } else if (bitshift > 0) {
        rightShiftMantissa(float.mant, bitshift, target.mant);
      } else {
        roundMantissaToPrecision(float.mant, target.prec, target.mant, roundingMode);
      }

      target.sign = float.sign;
    }
    /**
     * Subtract two numbers and write the result to the target.
     * @param f1 {BigFloat}
     * @param f2 {BigFloat}
     * @param target {BigFloat}
     * @param roundingMode {number}
     */


    static divTo(f1, f2, target, roundingMode = CURRENT_ROUNDING_MODE) {
      let f1Sign = f1.sign;
      let f2Sign = f2.sign;

      if (f1Sign === 0 || f2Sign === 0 || !Number.isFinite(f1Sign) || !Number.isFinite(f2Sign)) {
        target.sign = f1Sign / f2Sign;
        return;
      }

      let shift = divMantissas(f1.mant, f2.mant, target.prec, target.mant, roundingMode);
      target.exp = f1.exp - f2.exp + shift;
      target.sign = f1Sign / f2Sign;
    }
    /**
     * Divide a float by a JS number and write the result to the target.
     * @param f1 {BigFloat}
     * @param num {number}
     * @param target {BigFloat}
     * @param roundingMode {number}
     */


    static divNumberTo(f1, num, target, roundingMode = CURRENT_ROUNDING_MODE) {
      DOUBLE_STORE.setFromNumber(num);
      BigFloat.divTo(f1, DOUBLE_STORE, target, roundingMode);
    }

    static fmodTo(f1, f2, target, roundingMode = CURRENT_ROUNDING_MODE) {
      const remainder = createMantissa(Math.max(f1.prec, f2.prec));
      let f1exp = f1.exp,
          f2exp = f2.exp,
          f1mant = f1.mant,
          f2mant = f2.mant; // Algorithm: suppose we want to compute fmod(m1 * (2^30)^e1, m2 * (2^30)^e2), where e1 >= e2 and if e1 == e2, m1 > m2.
      // We use a shift-and-subtract approach, noting that the answer is equivalent to 2^e2 * fmod(m1 * (2^30)^(e1-e2), m2).
      // We basically calculate m1 mod m2, then multiply by 2 over and over and subtract m2 each time.
    }
    /**
     * Split a float f1 into an integer part and a fractional part, such that int + frac = f1, int and frac do not have
     * opposite sign, and |frac| < 1.
     * @param f1
     * @param integerPart
     * @param fracPart
     * @param roundingMode
     */


    static splitIntegerTo(f1, integerPart, fracPart, roundingMode) {
      if (f1.sign === 0) {
        integerPart.setZero();
        fracPart.setZero();
        return;
      } else if (!Number.isFinite(f1.sign)) {
        if (Number.isNaN(f1.sign)) {
          integerPart.setNaN();
          fracPart.setNaN();
        } else {
          integerPart.sign = f1.sign;
          fracPart.setZero();
        }

        return;
      } // We identify which word within f1 is the one right after the decimal point and chop it there. Note the property
      // that the exponent of the integer part is always the same as f1.


      let word = f1.exp,
          mantLen = f1.length;

      if (word <= 0) {
        fracPart.setFromFloat(f1);
        integerPart.setZero();
      } else if (word >= mantLen) {
        integerPart.setFromFloat(f1);
        fracPart.setZero();
      } else {
        // word lies within [1, mantissaLen) and thus we need to chop it.
        let intWordCount = word;
        let mant = f1.mant,
            intPartMant = integerPart.mant,
            fracPartMant = fracPart.mant;

        if (intPartMant.length > intWordCount) {
          for (let i = 0; i < intWordCount; ++i) intPartMant[i] = mant[i];

          for (let i = intPartMant.length - 1; i >= intWordCount; --i) {
            intPartMant[i] = 0;
          }

          roundMantissaToPrecision(intPartMant, integerPart.prec, intPartMant, roundingMode);
        } else {
          // I am lazy to optimize this
          roundMantissaToPrecision(mant.subarray(0, word), integerPart.prec, intPartMant, roundingMode);
        }

        integerPart.exp = f1.exp;
        integerPart.sign = f1.sign;
        let shift;

        for (shift = word; shift < mantLen && mant[shift] === 0; ++shift) if (shift === mantLen) {
          fracPart.setZero();
          return;
        }

        let roundingShift = roundMantissaToPrecision(mant.subarray(word), fracPart.prec, fracPartMant, roundingMode);

        if (fracPartMant.every(a => a === 0)) {
          fracPart.exp = fracPart.sign = 0;
        } else {
          fracPart.exp = word - shift + roundingShift;
          fracPart.sign = f1.sign;
        }
      }
    }
    /**
     * Return the floored base-2 logarithm of a number, which can be useful for many reasons
     * @param f1
     * @param ignoreSign
     * @returns {number}
     */


    static floorLog2(f1, ignoreSign = false) {
      if (f1.sign === 0 || !Number.isFinite(f1.sign)) return Math.log2(f1.sign);
      if (!ignoreSign && f1.sign < 0) return NaN;
      return f1.exp * 30 - Math.clz32(f1.mant[0]) + 1;
    }

    static zero(precision = CURRENT_PRECISION) {
      return new BigFloat(0, 0, precision, createMantissa(precision));
    }

    static NaN(precision = CURRENT_PRECISION) {
      return new BigFloat(NaN, 0, precision, createMantissa(precision));
    }

    static Infinity(precision = CURRENT_PRECISION) {
      return new BigFloat(Infinity, 0, precision, createMantissa(precision));
    }

    static NegativeInfinity(precision = CURRENT_PRECISION) {
      return new BigFloat(-Infinity, 0, precision, createMantissa(precision));
    }

    static isNaN(f) {
      return Number.isNaN(f.sign);
    }

    static isFinite(f) {
      return Number.isFinite(f.sign);
    }

    static isZero(f) {
      return f.sign === 0;
    }

    /**
     * Clone this big float
     * @returns {BigFloat}
     */
    clone() {
      return new BigFloat(this.sign, this.exp, this.prec, new Int32Array(this.mant));
    }

    neg() {
      return new BigFloat(this.sign * -1, this.exp, this.prec, new Int32Array(this.mant));
    }
    /**
     * Set this float's parameters to another float's parameters
     * @param {BigFloat} float
     */


    set(float) {
      this.sign = float.sign;
      this.mant = new Int32Array(float.mant);
      this.exp = float.exp;
      this.prec = float.prec;
    }
    /**
     * Set this float to the value of another float, keeping the current precision.
     * @param f {BigFloat}
     * @param roundingMode {number}
     */


    setFromFloat(f, roundingMode = CURRENT_ROUNDING_MODE) {
      if (f.prec === this.prec) {
        this.sign = f.sign;
        let thisMant = this.mant;

        for (let i = 0; i < thisMant.length; ++i) {
          thisMant[i] = f.mant[i];
        }

        this.exp = f.exp;
        return;
      }

      this.sign = f.sign;
      this.exp = f.exp;
      roundMantissaToPrecision(f.mant, this.prec, this.mant, roundingMode);
    }

    setFromNumber(num, roundingMode = CURRENT_ROUNDING_MODE) {
      if (num === 0 || !Number.isFinite(num)) {
        this.sign = num + 0;
        return;
      } // In the odd case we want a lower precision, we create a normal precision and then downcast


      if (this.prec < 53) {
        this.set(BigFloat.fromNumber(num, 53, roundingMode).toBigFloat(this.prec));
        return;
      }

      const outMantissa = this.mant;
      let isNumDenormal = isDenormal(num);
      let [valExponent, valMantissa] = getExponentAndMantissa(num); // Exponent of the float (2^30)^newExp

      let newExp = Math.ceil((valExponent + 1) / BIGFLOAT_WORD_BITS); // The mantissa needs to be shifted to the right by this much. 0 < bitshift <= 30. If the number is denormal, we
      // have to shift it by one bit less

      let bitshift = newExp * BIGFLOAT_WORD_BITS - valExponent - isNumDenormal;
      let denom = pow2(bitshift + 22);
      outMantissa[0] = Math.floor(valMantissa / denom)
      /* from double */
      + (isNumDenormal ? 0 : 1 << 30 - bitshift);
      /* add 1 if not denormal */

      let rem = valMantissa % denom;

      if (bitshift > 8) {
        let cow = 1 << bitshift - 8;
        outMantissa[1] = Math.floor(rem / cow);
        outMantissa[2] = rem % cow << 38 - bitshift;
      } else {
        outMantissa[1] = rem << 8 - bitshift;
      } // Special handling; for extremely small denormal numbers, the first word is 0, so we shift them over


      if (isNumDenormal && outMantissa[0] === 0) {
        outMantissa[0] = outMantissa[1];
        outMantissa[1] = outMantissa[2];
        outMantissa[2] = 0;
        newExp -= 1;
      }

      this.exp = newExp;
      this.sign = Math.sign(num);
    }

    setFromString(str, base = 10) {
      str = str + ''; // Well this is going to be pain. We process strings of the form -?[0-9]+.?[0-9]*(e-?[0-9]+)?

      const re = /*#__PURE__*/_wrapRegExp(/([\+\x2D])?([0-9]*)?\.?([0-9]*)?(e([\+\x2D]?[0-9]+))?/, {
        sign: 1,
        digits1: 2,
        digits2: 3,
        exponent: 5
      });

      let {
        sign,
        digits1,
        digits2,
        exponent
      } = str.match(re).groups; // Conditions for invalid string

      valid: {
        if (!digits1 && !digits2) {
          break valid;
        }

        exponent = exponent ? parseFloat(exponent) : 0;

        if (Number.isNaN(exponent)) {
          // might happen if exponent is '+', for example
          break valid;
        }

        sign = sign === '-' ? -1 : 1;
        if (!digits1) digits1 = '';
        if (!digits2) digits2 = ''; // We have a sign, digits before and/or after the decimal point, and an exponent. We now have to convert this
        // to the nearest float in the current precision. Mathematically, we have
        //
        // f = (digits1 + digits2 / base^(digits2.length)) * base^exponent.
        //
        // Taking logs and letting d1 = digits1, d2 = digits2, b = base and e = exponent, we see
        // log(f) = e * log(b) + log(d1 + d2 / d2.length). The first addend is simple; the second involves the actual base
        // conversion. For now, I'm just going to go digit by digit and add the corresponding multiple of a power of b.
        // Kinda slow, but we'll improve this algorithm later.

        let workingPrecision = this.prec + 12;
        let convertedDigits = BigFloat.new(workingPrecision);
        let bPowed = BigFloat.fromNumber(1, workingPrecision);
        let tmp = BigFloat.new(workingPrecision),
            tmp2 = BigFloat.new(workingPrecision);

        for (let i = digits1.length - 1; i >= 0; --i) {
          BigFloat.mulNumberTo(bPowed, parseInt(digits1[i]), tmp);
          BigFloat.addTo(tmp, convertedDigits, tmp2);
          BigFloat.mulNumberTo(bPowed, base, tmp);
          [tmp, bPowed] = [bPowed, tmp];
          [tmp2, convertedDigits] = [convertedDigits, tmp2];
        }

        BigFloat.divNumberTo(BigFloat.ONE, base, bPowed);

        for (let i = 0; i < digits2.length; ++i) {
          BigFloat.mulNumberTo(bPowed, parseInt(digits2[i]), tmp);
          BigFloat.addTo(tmp, convertedDigits, tmp2);
          BigFloat.divNumberTo(bPowed, base, tmp);
          [tmp, bPowed] = [bPowed, tmp];
          [tmp2, convertedDigits] = [convertedDigits, tmp2];
        }

        let lnConvertedDigits = BigFloat.ln(convertedDigits, workingPrecision);
        BigFloat.mulNumberTo(BigFloat.ln(base, workingPrecision), exponent, tmp);
        BigFloat.addTo(lnConvertedDigits, tmp, tmp2);
        this.setFromFloat(BigFloat.exp(tmp2, workingPrecision));
        return this;
      }

      this.setNaN();
      return this;
    }
    /**
     * Set this number to NaN. Doesn't actually touch the mantissa
     */


    setNaN() {
      this.sign = NaN;
    }
    /**
     * Set this number to 0. Doesn't actually touch the mantissa
     */


    setZero() {
      this.sign = 0;
    }
    /**
     * Convert this float into a float with a different precision, rounded in the correct direction
     * @param precision
     * @param roundingMode
     */


    toBigFloat(precision = CURRENT_PRECISION, roundingMode = CURRENT_ROUNDING_MODE) {
      let newMantissa = createMantissa(precision);
      let {
        mant,
        sign,
        exp
      } = this;

      if (this.sign !== 0 && Number.isFinite(sign)) {
        let shift = roundMantissaToPrecision(mant, precision, newMantissa, roundingMode);
        exp += shift;
      }

      return new BigFloat(sign, exp, precision, newMantissa);
    }
    /**
     * Convert this BigFloat to a normal JS number, rounding in the given direction and optionally rounding to the nearest
     * float32 value. It *does* handle denormal numbers, unfortunately for me.
     * @param roundingMode {number}
     * @param f32 {boolean} Whether to cast to a float32 instead of a float64
     * @returns {number}
     */


    toNumber(roundingMode = CURRENT_ROUNDING_MODE, f32 = false) {
      if (this.sign === 0 || !Number.isFinite(this.sign)) return this.sign;
      let m = this.mant,
          exp = (this.exp - 1) * BIGFLOAT_WORD_BITS;

      if (roundingMode === ROUNDING_MODE.WHATEVER) {
        // Short-circuit calculation for efficiency
        return pow2(exp) * (m[0] + m[1] * recip2Pow30 + (f32 ? 0 : m[2] * recip2Pow60));
      }

      let prec = f32 ? 24 : 53;
      let roundedMantissa = createMantissa(prec); // Round to the nearest float32 or float64, ignoring denormal numbers for now

      const shift = roundMantissaToPrecision(m, prec, roundedMantissa, roundingMode); // Calculate an exponent and mant such that mant * 2^exponent = the number

      let mAsInt;

      if (shift) {
        mAsInt = 1 << 30;
      } else {
        mAsInt = roundedMantissa[0] + roundedMantissa[1] * recip2Pow30 + (f32 ? 0 : roundedMantissa[2] * recip2Pow60);
      } // Normalize mant to be in the range [0.5, 1), which lines up exactly with a normal double


      let expShift = flrLog2(mAsInt) + 1;
      mAsInt /= pow2(expShift);
      exp += expShift;
      let MIN_EXPONENT = f32 ? -148 : -1073;
      let MAX_EXPONENT = f32 ? 127 : 1023;
      let MIN_VALUE = f32 ? 1.175494e-38 : Number.MIN_VALUE;
      let MAX_VALUE = f32 ? 3.40282347e38 : Number.MAX_VALUE; // We now do various things depending on the rounding mode. The range of a double's exponent is -1024 to 1023,
      // inclusive, so if the exponent is outside of those bounds, we clamp it to a value depending on the rounding mode.

      if (exp < MIN_EXPONENT) {
        if (roundingMode === ROUNDING_MODE.TIES_AWAY || roundingMode === ROUNDING_MODE.NEAREST) {
          // Deciding between 0 and Number.MIN_VALUE. Unfortunately at 0.5 * 2^1074 there is a TIE
          if (exp === MIN_EXPONENT - 1) {
            // If greater or ties away
            if (mAsInt > 0.5 || roundingMode === ROUNDING_MODE.TIES_AWAY) {
              return this.sign * MIN_VALUE;
            }
          }

          return 0;
        } else {
          if (this.sign === 1) {
            if (roundingMode === ROUNDING_MODE.TOWARD_INF || roundingMode === ROUNDING_MODE.UP) {
              return MIN_VALUE;
            } else {
              return 0;
            }
          } else {
            if (roundingMode === ROUNDING_MODE.TOWARD_ZERO || roundingMode === ROUNDING_MODE.UP) {
              return 0;
            } else {
              return -MIN_VALUE;
            }
          }
        }
      } else if (exp > MAX_EXPONENT) {
        if (exp === MAX_EXPONENT + 1) {
          // Bottom formula will overflow, so we adjust
          return this.sign * mAsInt * 2 * pow2(exp - 1);
        }

        if (roundingMode === ROUNDING_MODE.TIES_AWAY || roundingMode === ROUNDING_MODE.NEAREST) {
          return Infinity * this.sign;
        } else if (this.sign === 1) {
          if (roundingMode === ROUNDING_MODE.TOWARD_INF || roundingMode === ROUNDING_MODE.UP) {
            return Infinity;
          } else {
            return MAX_VALUE;
          }
        } else {
          if (roundingMode === ROUNDING_MODE.TOWARD_ZERO || roundingMode === ROUNDING_MODE.UP) {
            return -MAX_VALUE;
          } else {
            return -Infinity;
          }
        }
      } else {
        return this.sign * mAsInt * pow2(exp);
      }
    }

    toUnderstandableString() {
      return prettyPrintFloat(this.mant, this.prec);
    }
    /**
     * BEGIN USER-FRIENDLY FUNCTIONS
     */

    /**
     * Set the default precision, in digits of DECIMAL.
     * @param prec
     */


    static setPrecision(prec) {
      BigFloat.setBinaryPrecision(Math.ceil(LOG210 * prec));
    }

    static setBinaryPrecision(prec) {
      if (typeof prec !== 'number') throw new TypeError('Binary precision must be a number');
      prec = prec | 0;
      if (prec < 4) throw new RangeError('Precision must be at least 4 bits');
      CURRENT_PRECISION = prec;
    }
    /**
     * User-friendly add function that takes in both JS numbers and plain floats.
     * @param f1 {BigFloat|number}
     * @param f2 {BigFloat|number}
     * @param precision
     * @param roundingMode
     */


    static add(f1, f2, precision = CURRENT_PRECISION, roundingMode = CURRENT_ROUNDING_MODE) {
      f1 = cvtToBigFloat(f1);
      f2 = cvtToBigFloat(f2);
      let ret = BigFloat.new(precision);
      BigFloat.addTo(f1, f2, ret, roundingMode);
      return ret;
    }
    /**
     * User-friendly subtraction function that takes in both JS numbers and plain floats.
     * @param f1 {BigFloat|number}
     * @param f2 {BigFloat|number}
     * @param precision
     * @param roundingMode
     */


    static sub(f1, f2, precision = CURRENT_PRECISION, roundingMode = CURRENT_ROUNDING_MODE) {
      f1 = cvtToBigFloat(f1);
      f2 = cvtToBigFloat(f2);
      let ret = BigFloat.new(precision);
      BigFloat.subTo(f1, f2, ret, roundingMode);
      return ret;
    }
    /**
     * User-friendly divide function that takes in both JS numbers and plain floats.
     * @param f1 {BigFloat|number}
     * @param f2 {BigFloat|number}
     * @param precision
     * @param roundingMode
     */


    static div(f1, f2, precision = CURRENT_PRECISION, roundingMode = CURRENT_ROUNDING_MODE) {
      f1 = cvtToBigFloat(f1);
      f2 = cvtToBigFloat(f2);
      let ret = BigFloat.new(precision);
      BigFloat.divTo(f1, f2, ret, roundingMode);
      return ret;
    }
    /**
     * User-friendly divide function that takes in both JS numbers and plain floats.
     * @param f1 {BigFloat|number}
     * @param f2 {BigFloat|number}
     * @param precision
     * @param roundingMode
     */


    static mul(f1, f2, precision = CURRENT_PRECISION, roundingMode = CURRENT_ROUNDING_MODE) {
      f1 = cvtToBigFloat(f1);
      f2 = cvtToBigFloat(f2);
      let ret = BigFloat.new(precision);
      BigFloat.mulTo(f1, f2, ret, roundingMode);
      return ret;
    }
    /**
     * Returns -1 if a is less than b, 0 if they are equal, and 1 if a is greater than b
     * @param a {BigFloat|number}
     * @param b {BigFloat|number}
     */


    static cmp(a, b) {
      if (a instanceof BigFloat && b instanceof BigFloat) {
        return BigFloat.cmpFloats(a, b);
      }

      if (typeof a === 'number' && typeof b === 'number') {
        if (a < b) {
          return -1;
        } else if (a === b) {
          return 0;
        } else if (a > b) {
          return 1;
        } else {
          return NaN;
        }
      }

      if (a instanceof BigFloat && typeof b === 'number') {
        if (BigFloat.isNaN(a) || Number.isNaN(b)) return NaN;
        const aSign = a.sign;
        const bSign = Math.sign(b);

        if (aSign < bSign) {
          return -1;
        } else if (aSign > bSign) return 1;

        if (aSign === Infinity || aSign === -Infinity || aSign === 0) return 0;
        let aFlrLog2 = BigFloat.floorLog2(a, true);
        let bFlrLog2 = flrLog2(b * bSign);

        if (aFlrLog2 < bFlrLog2) {
          return -aSign;
        } else if (aFlrLog2 > bFlrLog2) {
          return aSign;
        } else {
          // Fallback
          DOUBLE_STORE.setFromNumber(b);
          return BigFloat.cmpFloats(a, DOUBLE_STORE);
        }
      } else if (typeof a === 'number' && b instanceof BigFloat) {
        return -BigFloat.cmp(b, a);
      }

      throw new Error('Invalid arguments to cmpNumber');
    }
    /**
     * Returns true if the numbers are equal (allows for JS numbers to be used)
     * @param f {BigFloat|number}
     * @returns {boolean}
     */


    equals(f) {
      return BigFloat.cmp(this, f) === 0;
    }
    /**
     * Returns true if this float is greater than or equal to the argument (allows for JS numbers to be used)
     * @param f {BigFloat|number}
     * @returns {boolean}
     */


    greaterEq(f) {
      return BigFloat.cmp(this, f) >= 0;
    }
    /**
     * Returns true if this float is greater than the argument (allows for JS numbers to be used)
     * @param f {BigFloat|number}
     * @returns {boolean}
     */


    greaterThan(f) {
      return BigFloat.cmp(this, f) === 1;
    }
    /**
     * Returns true if this float is less than or equal to the argument (allows for JS numbers to be used)
     * @param f {BigFloat|f}
     * @returns {boolean}
     */


    lessEq(f) {
      return BigFloat.cmp(this, f) <= 0;
    }
    /**
     * Returns true if this float is less than the argument (allows for JS numbers to be used)
     * @param f {BigFloat|number}
     * @returns {boolean}
     */


    lessThan(f) {
      return BigFloat.cmp(this, f) === -1;
    }
    /**
     * Returns the natural logarithm of f.
     * @param f
     * @param precision
     * @param roundingMode
     * @returns {BigFloat}
     */


    static ln(f, precision = CURRENT_PRECISION, roundingMode = CURRENT_ROUNDING_MODE) {
      f = cvtToBigFloat(f);
      let f1Sign = f.sign; // Special cases

      if (f1Sign === 0) {
        return BigFloat.NegativeInfinity(precision);
      } else if (f1Sign < 0) {
        return BigFloat.NaN(precision);
      } else if (!Number.isFinite(f1Sign)) {
        return BigFloat.fromNumber(f1Sign, precision);
      }

      let workingPrecision = precision + 4; // Express ln(f) = ln(a) + n ln(2) where 0.5 <= a < 1

      let n = BigFloat.floorLog2(f, true) + 1;
      let a = BigFloat.new(precision);
      BigFloat.mulPowTwoTo(f, -n, a); // Compute ln(a) = 2 * sum(k = 0 to inf, 1/(2k+1) * ((a-1)/(a+1))^(2k+1)). As you can see, the series converges
      // pretty rapidly for a close to 1; in the worst case we have convergence at a rate of ((0.5-1)/(0.5+1))^2k = (1/9)^k
      // If b = ((a-1)/(a+1))^2 we'll need 1 - prec / log2(b) iterations

      let tmp = BigFloat.new(workingPrecision),
          tmp2 = BigFloat.new(workingPrecision),
          tmp3 = BigFloat.new(workingPrecision),
          b = BigFloat.new(workingPrecision);
      BigFloat.addNumberTo(a, -1, tmp);
      BigFloat.addNumberTo(a, 1, tmp2);
      BigFloat.divTo(tmp, tmp2, tmp3); // tmp3 = (a-1)/(a+1)

      BigFloat.mulTo(tmp3, tmp3, b); // b = ((a-1)/(a+1))^2

      let iters = Math.ceil(-precision / BigFloat.floorLog2(b) + 2);
      let sum = tmp3.clone(); // sum = 0th term of the series

      let bPowed = tmp3.clone();

      for (let k = 1; k <= iters; ++k) {
        BigFloat.mulTo(b, bPowed, tmp); // tmp = b ^ (2k+1)

        BigFloat.divNumberTo(tmp, 2 * k + 1, tmp2); // tmp2 = summand

        BigFloat.addTo(tmp2, sum, tmp3);
        [tmp, bPowed] = [bPowed, tmp];
        [tmp3, sum] = [sum, tmp3];
      }

      BigFloat.mulPowTwoTo(sum, 1, sum); // sum = ln(a)

      let ln2 = getCachedLn2(workingPrecision);
      BigFloat.mulNumberTo(ln2, n, tmp); // tmp = n ln 2

      BigFloat.addTo(tmp, sum, a); // a = ln(a) + n ln 2

      return a;
    }
    /**
     * Compute the standard logarithm of f.
     * @param f {BigFloat}
     * @param precision {number}
     * @param roundingMode {number}
     * @returns {BigFloat}
     */


    static log10(f, precision = CURRENT_PRECISION, roundingMode = CURRENT_ROUNDING_MODE) {
      f = cvtToBigFloat(f); // log10 (x) = ln(x) / ln(10)

      const num = BigFloat.ln(f, precision);
      const den = getCachedLn10(precision);
      return BigFloat.div(num, den, precision);
    }

    static exp(f, precision = CURRENT_PRECISION, roundingMode = CURRENT_ROUNDING_MODE) {
      f = cvtToBigFloat(f);
      let sign = f.sign;
      if (Number.isNaN(sign)) return BigFloat.NaN(precision);
      if (sign === 0) return BigFloat.fromNumber(1, precision);
      let n = BigFloat.floorLog2(f, true);

      if (n < 0) {
        // f < 0.5
        return expBaseCase(f, precision);
      } else {
        let a = BigFloat.new(precision); // f = a * 2^n, 0.5 <= a < 1

        BigFloat.mulPowTwoTo(f, -n, a);
        let mul = expBaseCase(a, precision); // Repeated squaring; every shift requires one squaring

        for (; n >= 0; --n) {
          BigFloat.mulTo(mul, mul, a);
          [mul, a] = [a, mul];
        }

        return a;
      }
    }

    static pow10(f, precision = CURRENT_PRECISION) {
      // 10^f = e^(f * ln(10))
      f = cvtToBigFloat(f);
      let workingPrecision = precision + 2;
      let tmp = BigFloat.mul(f, getCachedLn10(workingPrecision), workingPrecision);
      return BigFloat.exp(tmp, precision);
    }
    /**
     * Convert a float to a readable base-10 representation, with prec base-10 digits of precision.
     */


    toPrecision(prec, roundingMode = CURRENT_ROUNDING_MODE) {
      const MAX_PRECISION = 1000;

      if (typeof prec !== 'number' || !Number.isInteger(prec) || prec < 1 || prec > MAX_PRECISION) {
        throw new Error("Precision must be an integer between 1 and ".concat(MAX_PRECISION));
      }

      let sign = this.sign;

      if (!Number.isFinite(sign)) {
        return sign + '';
      } else if (sign === 0) {
        if (prec === 1) return '0';
        return '0.' + '0'.repeat(prec - 1);
      } // The number is non-zero. We have a couple of methods to convert the number to a decimal representation, rounded
      // in the correct direction; the rounding makes things a bit more complicated, though, because we need to keep track
      // of errors in the computation.


      prec = prec | 0; // f = 10^frac(log10(f)) * 10^floor(log10(f)) = m * 10^e

      let workingPrecision = (prec * LOG210 | 0) + 10;
      this.sign = Math.abs(sign);
      let log10 = BigFloat.log10(this, workingPrecision);
      this.sign = sign;
      let e = BigFloat.new(53),
          m = BigFloat.new(workingPrecision);
      BigFloat.splitIntegerTo(log10, e, m, ROUNDING_MODE.NEAREST);
      e = e.toNumber();

      if (BigFloat.cmp(m, 0) === 0) {
        e -= 1;
        m.setFromFloat(BigFloat.ONE);
      }

      m = BigFloat.pow10(m, workingPrecision);
      let [beforeDigits, afterDigits] = mantissaToBaseWithPrecision(m.mant, m.exp);

      {
        let digits = (sign === -1 ? '-' : '') + trimLeft(beforeDigits, '0') + '.' + afterDigits.slice(0, prec);
        return "".concat(digits, "e").concat(e);
      }

      return digits;
    }

  } // Used for intermediate calculations to avoid allocating floats unnecessarily

  _defineProperty(BigFloat, "ZERO", Object.freeze(BigFloat.fromNumber(0, 53)));

  _defineProperty(BigFloat, "ONE", Object.freeze(BigFloat.fromNumber(1, 53)));

  const DOUBLE_STORE = BigFloat.new(53);

  const latexElementInterface = constructInterface({
    interface: {
      position: {
        description: 'The position of the latex element.',
        conversion: {
          type: 'Vec2'
        },
        target: 'pos'
      },
      latex: {
        description: 'The latex code to be displayed.',
        typecheck: 'string'
      },
      dir: {
        description: 'Alignment direction; "E" is east, a vector is a vector',
        conversion: toDir
      },
      spacing: {
        description: 'How much extra spacing to provide',
        typecheck: 'number'
      }
    },
    internal: {
      pos: {
        type: 'Vec2',
        computed: 'none'
      },
      style: {
        type: 'TextStyle',
        computed: 'user',
        compose: true,
        default: TextStyle.default
      },
      dir: {
        type: 'Vec2',
        computed: 'default',
        default: new Vec2(0, 0)
      },
      spacing: {
        type: 'number',
        computed: 'default',
        default: 0
      }
    }
  });

  function getLatexSizeAndHTML(content) {
    let html = katex.renderToString(content);
    let div = document.createElement("div");
    div.style.visibility = "hidden";
    div.style.position = "absolute";
    div.style.top = "0";
    div.style.left = "0";
    div.innerHTML = html;
    document.body.appendChild(div);
    let rect = div.getBoundingClientRect();
    div.remove();
    return {
      html,
      rect
    };
  }

  class LatexElement extends Element {
    constructor(params) {
      super(params);
    }

    getInterface() {
      return latexElementInterface;
    }

    _update() {
      var _this$props$get, _this$props$get2;

      let code = this.props.get("latex");
      let pos = this.props.get("pos");
      let dir = (_this$props$get = this.props.get("dir")) !== null && _this$props$get !== void 0 ? _this$props$get : "C";
      let spacing = (_this$props$get2 = this.props.get("spacing")) !== null && _this$props$get2 !== void 0 ? _this$props$get2 : 0;

      if (!code || !pos) {
        this.internal.renderInfo = null;
        return;
      }

      if (this.props.hasChanged("latex")) {
        this.internal.rect = getLatexSizeAndHTML(code).rect;
      }

      this.internal.renderInfo = {
        instructions: {
          type: "latex",
          latex: code,
          pos: pos,
          dir,
          spacing
        }
      };
    }

  }

  /**
   * Represents a linear transformation by storing two bounding boxes: one for the plot in CSS pixels, and one for the
   * actual elements in the graph. Some parts of this should be highly optimized, but it needn't be complicated.
   */
  class LinearPlot2DTransform {
    /**
     * Parameters beginning with p are the bounding box in pixel coordinates. Those beginning with g are the bounding box
     * in graph coordinates. The transform has an implicit y flipping operation, which is key. The point (px1, py1) does
     * NOT map to the point (gx1, gy1), but the point (gx1, gy1 + gh). This annoyance is why a special class is useful.
     * @param px1
     * @param py1
     * @param pw
     * @param ph
     * @param gx1
     * @param gy1
     * @param gw
     * @param gh
     */
    constructor(px1, py1, pw, ph, gx1, gy1, gw, gh) {
      this.px1 = px1;
      this.py1 = py1;
      this.pw = pw;
      this.ph = ph;
      this.gx1 = gx1;
      this.gy1 = gy1;
      this.gw = gw;
      this.gh = gh;
    }

    get px2() {
      return this.px1 + this.pw;
    }

    get py2() {
      return this.py1 + this.ph;
    }

    get gx2() {
      return this.gx1 + this.gw;
    }

    get gy2() {
      return this.gy1 + this.gh;
    }

    pixelBox() {
      return new BoundingBox(this.px1, this.py1, this.pw, this.ph);
    }

    graphBox() {
      return new BoundingBox(this.gx1, this.gy1, this.gw, this.gh);
    }

    resizeToPixelBox(box) {
      this.px1 = box.x;
      this.py1 = box.y;
      this.pw = box.w;
      this.ph = box.h;
      return this;
    }

    resizeToGraphBox(box) {
      this.gx1 = box.x;
      this.gy1 = box.y;
      this.gw = box.w;
      this.gh = box.h;
      return this;
    }

    setGraphXBounds(x1, x2) {
      this.gx1 = x1;
      this.gw = x2 - x1;
    }

    setGraphYBounds(y1, y2) {
      this.gy1 = y1;
      this.gh = y2 - y1;
    }

    setGraphXYBounds(x1, x2, y1, y2) {
      this.setGraphXBounds(x1, x2);
      this.setGraphYBounds(y1, y2);
    }

    clone() {
      return new LinearPlot2DTransform(this.px1, this.py1, this.pw, this.ph, this.gx1, this.gy1, this.gw, this.gh);
    }

    pixelToGraphX(x) {
      // This is not flipped
      return (x - this.px1) / this.pw * this.gw + this.gx1;
    }

    pixelToGraphY(y) {
      // This is flipped
      return (1 - (y - this.py1) / this.ph) * this.gh + this.gy1;
    }

    graphToPixelX(x) {
      // This is not flipped
      return (x - this.gx1) / this.gw * this.pw + this.px1;
    }

    graphToPixelY(y) {
      // This is flipped
      return (1 - (y - this.gy1) / this.gh) * this.ph + this.py1;
    }

    pixelToGraph(vec) {
      return new Vec2(this.pixelToGraphX(vec.x), this.pixelToGraphY(vec.y));
    }

    graphToPixel(vec) {
      return new Vec2(this.graphToPixelX(vec.x), this.graphToPixelY(vec.y));
    }
    /**
     * Return {xm, ym, xb, yb} where xm * x + xb is the transformation from graph x to pixel x, etc.
     */


    getReducedGraphToPixelTransform() {
      const {
        px1,
        py1,
        pw,
        ph,
        gx1,
        gy1,
        gw,
        gh
      } = this;
      return {
        xm: pw / gw,
        ym: -ph / gh,
        xb: -gx1 / gw * pw + px1,
        yb: (1 + gy1 / gh) * ph + py1
      };
    }

    graphToPixelArrInPlace(arr) {
      let {
        xm,
        ym,
        xb,
        yb
      } = this.getReducedGraphToPixelTransform();

      for (let i = 0; i < arr.length; i += 2) {
        arr[i] = xm * arr[i] + xb;
        arr[i + 1] = ym * arr[i + 1] + yb;
      }

      return arr;
    }
    /**
     * The size, in graph units, of a single pixel
     */


    graphPixelSize() {
      return this.gh / this.ph;
    }

  }
  class LinearPlot2DTransformConstraints {
    constructor(params) {}

    limitTransform(oldTransform, newTransform) {
      // For now, just return the oldTransform if the new transform has width 0 or has non-finite numbers
      const {
        px1,
        py1,
        pw,
        ph,
        gx1,
        gy1,
        gw,
        gh
      } = newTransform;
      if (gw <= 0 || gh <= 0 || !Number.isFinite(gx1) || !Number.isFinite(gy1) || !Number.isFinite(gw) || !Number.isFinite(gh)) return oldTransform;
      return newTransform;
    }

  }

  let figureInterface$1 = Figure.prototype.getInterface();
  const defaultView = [-1, -1, 2, 2];
  const plot2DInterface = constructInterface({
    interface: _objectSpread2({}, figureInterface$1.description.interface),
    internal: _objectSpread2(_objectSpread2({}, figureInterface$1.description.internal), {}, {
      // Transformation from pixel to graph coordinates and vice versa
      plotTransform: {
        computed: 'default',
        default: () => new LinearPlot2DTransform(0, 0, 0, 0, ...defaultView),
        evaluateDefault: true
      },
      // Whether to force the plot transform to have a specific aspect ratio
      preserveAspectRatio: {
        computed: 'default',
        default: true
      },
      // The aspect ratio to force
      forceAspectRatio: {
        computed: 'default',
        default: 1
      },
      // Constraints on where the transform can be (min zoom, max zoom, etc.)
      transformConstraints: {
        computed: 'default',
        default: () => new LinearPlot2DTransformConstraints(),
        evaluateDefault: true
      }
    })
  });
  /**
   * A version of Figure which is intended for a 2D graph, and thus has an inheritable property plotTransform
   */

  var _disableInteractivityListeners$1 = new WeakSet();

  var _enableInteractivityListeners$1 = new WeakSet();

  class Plot2D extends Figure {
    constructor(...args) {
      super(...args);

      _enableInteractivityListeners$1.add(this);

      _disableInteractivityListeners$1.add(this);
    }

    init() {
      this.props.configureProperty('plotTransform', {
        inherit: true
      });
    }

    getInterface() {
      return plot2DInterface;
    }

    toggleInteractivity() {
      let internal = this.internal;
      let interactivity = this.props.get('interactivity');

      if (!!internal.interactivityListeners !== interactivity) {
        interactivity ? _classPrivateMethodGet(this, _enableInteractivityListeners$1, _enableInteractivityListeners2$1).call(this) : _classPrivateMethodGet(this, _disableInteractivityListeners$1, _disableInteractivityListeners2$1).call(this);
      }
    }

    computePlotTransform() {
      // We compute the plot transform from its current value, the plotting box, and related values which constrain the
      // plot transform (minZoom, maxZoom, preserveAspectRatio). The algorithm is as follows:
      // 1: resize the pixel box to the plotting box
      // 2: if preserveAspectRatio is true, stretch *out* from (cx, cy) as necessary to get an aspect ratio of forceAspectRatio
      // 3: To avoid some strange case where float values repeatedly cause the plot transform to change minutely because
      //    forceAspectRatio demands it, no stretching occurs if the aspect ratio is already proportionally close to the
      //    real aspect ratio
      // 4: ... other constraints ....
      const {
        props
      } = this;
      let {
        plotTransform,
        plottingBox,
        preserveAspectRatio
      } = props.proxy;
      plotTransform.resizeToPixelBox(plottingBox);

      if (preserveAspectRatio) {
        let graphBox = plotTransform.graphBox();
      }

      console.log("hi");
      props.markChanged('plotTransform');
    }

    _update() {
      super._update();

      this.computePlotTransform();
      this.toggleInteractivity();
    }

  }

  var _disableInteractivityListeners2$1 = function _disableInteractivityListeners2() {
    let internal = this.internal;
    let interactivityListeners = internal.interactivityListeners;
    if (!interactivityListeners) return;

    for (let listenerType in interactivityListeners) {
      let listener = interactivityListeners[listenerType];
      this.removeEventListener(listenerType, listener);
    }

    internal.interactivityListeners = null;
  };

  var _enableInteractivityListeners2$1 = function _enableInteractivityListeners2() {
    _classPrivateMethodGet(this, _disableInteractivityListeners$1, _disableInteractivityListeners2$1).call(this);

    let int = this.internal,
        props = this.props;
    let listeners = this.interactivityListeners = {};
    this.addEventListener('mousedown', listeners.mousedown = evt => {
      int.mouseDownAt = evt.pos;
      int.graphMouseDownAt = props.get('plotTransform').pixelToGraph(int.mouseDownAt); // try to keep this constant

      int.isDragging = true;
    });
    this.addEventListener('mouseup', listeners.mousedown = () => {
      int.isDragging = false;
    });
    this.addEventListener('mousemove', listeners.mousemove = evt => {
      if (!int.isDragging) return;
      let transform = props.get('plotTransform');
      let constraints = props.get('transformConstraints');
      let newTransform = transform.clone(); // Get where the mouse is currently at and move (graphMouseDownAt) to (mouseDownAt)

      let graphMouseMoveAt = transform.pixelToGraph(evt.pos);
      let translationNeeded = int.graphMouseDownAt.sub(graphMouseMoveAt);
      newTransform.gx1 += translationNeeded.x;
      newTransform.gy1 += translationNeeded.y;
      newTransform = constraints.limitTransform(transform, newTransform);
      props.set('plotTransform', newTransform, 0
      /* real */
      , 2
      /* deep equality */
      );
    }); // Scroll handler

    this.addEventListener('wheel', listeners.wheel = evt => {
      let transform = props.get('plotTransform');
      let constraints = props.get('transformConstraints');
      let newTransform = transform.clone();
      let scaleFactor = Math.exp(evt.deltaY / 1.5e5);
      let graphScrollAt = transform.pixelToGraph(evt.pos); // We need to scale graphBox at graphScrollAt with a scale factor. We translate it by -graphScrollAt, scale it by
      // sF, then translate it by graphScrollAt

      let graphBox = transform.graphBox();
      graphBox = graphBox.translate(graphScrollAt.mul(-1)).scale(scaleFactor).translate(graphScrollAt);
      newTransform.resizeToGraphBox(graphBox);
      newTransform = constraints.limitTransform(transform, newTransform);
      props.set('plotTransform', newTransform, 0
      /* real */
      , 2
      /* deep equality */
      );
    });
  };

  let figureInterface$2 = Figure.prototype.getInterface();
  /**
   * A number line has a bounding box and an axis within that bounding box. The bounding box and axis should generally be
   * treated as separate entities, although the axis is parallel to one of the sides of the bounding box. The axis has
   * a starting Vec2 and ending Vec2, along with a starting x and ending x (the convention will be to use x to denote
   * position on the number line). For now, we will inherit from Figure, which provides the bounding box capabilities
   * automatically--eventually there will be a generic system which does the fitting automatically, basically the
   * equivalent algorithms as a CSS element.
   *
   * The axis is an inheritable property called numberLineTransform.
   */

  const numberLineInterface = constructInterface({
    interface: _objectSpread2({}, figureInterface$2.description.interface),
    internal: _objectSpread2(_objectSpread2({}, figureInterface$2.description.internal), {}, {
      start: {
        type: "Vec2",
        computed: 'none'
      },
      end: {
        type: "Vec2",
        computed: 'none'
      },
      numberLineTransform: {
        computed: 'none'
      }
    })
  });

  class NumberLineTransform {
    constructor(start, end, startX, endX) {
      /** @type {Vec2} */
      this.start = start;
      /** @type {Vec2} */

      this.end = end;
      /** @type {number} */

      this.startX = startX;
      /** @type {number} */

      this.endX = endX;
    }

    pixelToGraph(x, y) {}

    graphToPixel(x) {
      return this.end.sub(this.start).mul((x - this.startX) / (this.endX - this.startX)).add(this.start);
    }

  }

  class NumberLine extends Figure {
    init() {
      this.props.setPropertyInheritance("numberLineTransform", true);
    }

    getInterface() {
      return numberLineInterface;
    }

    computeNumberLineTransform() {
      // For now, we'll just use the midpoint of the sides of the bounding box

      /** @type {BoundingBox} */
      let box = this.props.get("plottingBox");
      let start = new Vec2(box.x, box.y + box.h / 2);
      let end = new Vec2(box.getX2(), box.y + box.h / 2);
      this.props.set("start", start);
      this.props.set("end", end);
      let startX = 0,
          startY = 1;
      this.props.set("numberLineTransform", new NumberLineTransform(start, end, startX, startY), 0, 2);
    }

    _update() {
      super._update();

      this.computeNumberLineTransform();
      const {
        start,
        end,
        numberLineTransform
      } = this.props.proxy;
      this.internal.renderInfo = {
        instructions: {
          type: "debug",
          polyline: [start, end]
        }
      };
    }

  }

  const polygonInterface = constructInterface({
    interface: {
      vertices: {
        conversion: {
          type: 'f32_vec2_array'
        },
        description: 'The vertices of the polygon'
      },
      color: {
        conversion: {
          type: "Color"
        },
        description: "The color of the polygon"
      }
    },
    internal: {
      vertices: {
        computed: "none"
      },
      color: {
        computed: "default",
        default: Colors.BLACK
      }
    }
  });
  class Polygon extends Element {
    getInterface() {
      return polygonInterface;
    }

    _update() {
      let {
        vertices,
        color
      } = this.props.proxy;

      if (!vertices) {
        this.internal.renderInfo = null;
        return;
      }

      this.internal.renderInfo = {
        instructions: {
          type: "polygon",
          vertices,
          color
        }
      };
    }

  }

  exports.BigFloat = BigFloat;
  exports.BigFloatInterval = BigFloatInterval;
  exports.BigInt = BigInt;
  exports.BooleanDict = BooleanDict;
  exports.BoundingBox = BoundingBox;
  exports.Color = Color;
  exports.Colors = Colors;
  exports.DefaultStyles = DefaultStyles;
  exports.DeltaFloat = DeltaFloat;
  exports.DynamicRectanglePacker = DynamicRectanglePacker;
  exports.Element = Element;
  exports.Eventful = Eventful;
  exports.FP = fp_manip;
  exports.FastRealInterval = FastRealInterval;
  exports.Figure = Figure;
  exports.FigureBaubles = FigureBaubles;
  exports.GenericObject = GenericObject;
  exports.Group = Group;
  exports.InteractiveScene = InteractiveScene;
  exports.LabelPosition = LabelPosition;
  exports.LatexElement = LatexElement;
  exports.NullInterface = NullInterface;
  exports.NumberLine = NumberLine;
  exports.Operators = Operators;
  exports.ParametricPlot2D = ParametricPlot2D;
  exports.Pen = Pen;
  exports.Pens = Pens;
  exports.Plot2D = Plot2D;
  exports.PointCloudElement = PointCloudElement;
  exports.PointElement = PointElement;
  exports.Polygon = Polygon;
  exports.PolylineElement = PolylineElement;
  exports.Props = Props;
  exports.ROUNDING_MODE = ROUNDING_MODE;
  exports.Scene = Scene;
  exports.TextElement = TextElement;
  exports.TextRenderer = TextRenderer;
  exports.TextStyle = TextStyle;
  exports.TinySDF = TinySDF;
  exports.Vec2 = Vec2;
  exports.WebGLRenderer = WebGLRenderer;
  exports.addMantissas = addMantissas;
  exports.approxAngleBetween = approxAngleBetween;
  exports.attachGettersAndSetters = attachGettersAndSetters;
  exports.boundingBoxTransform = boundingBoxTransform;
  exports.calculatePolylineVertices = calculatePolylineVertices;
  exports.calculateRectShift = calculateRectShift;
  exports.canMantissaBeRounded = canMantissaBeRounded;
  exports.combineColoredTriangleStrips = combineColoredTriangleStrips;
  exports.combineTriangleStrips = combineTriangleStrips;
  exports.compareMantissas = compareMantissas;
  exports.compileNode = compileNode;
  exports.computeLn2 = computeLn2;
  exports.constructInterface = constructInterface;
  exports.convertTriangleStrip = convertTriangleStrip;
  exports.distanceSquared = distanceSquared;
  exports.divMantissas = divMantissas;
  exports.expBaseCase = expBaseCase;
  exports.fastAtan2 = fastAtan2;
  exports.fastHypot = fastHypot;
  exports.fillRepeating = fillRepeating;
  exports.flattenVec2Array = flattenVec2Array;
  exports.fmodMantissas = fmodMantissas;
  exports.fromContours = fromContours;
  exports.genTextInstruction = genTextInstruction;
  exports.genTextRect = genTextRect;
  exports.generateCircleTriangleStrip = generateCircleTriangleStrip;
  exports.generateRectangleCycle = generateRectangleCycle;
  exports.generateRectangleDebug = generateRectangleDebug;
  exports.generateRectangleTriangleStrip = generateRectangleTriangleStrip;
  exports.get2DDemarcations = get2DDemarcations;
  exports.getCachedLn2 = getCachedLn2;
  exports.getDemarcations = getDemarcations;
  exports.getLineIntersection = getLineIntersection;
  exports.getRationalDemarcations = getRationalDemarcations;
  exports.getTextSDFInformation = getTextSDFInformation;
  exports.getTrailingInfo = getTrailingInfo;
  exports.intersectBoundingBoxes = intersectBoundingBoxes;
  exports.isValidVariableName = isValidVariableName;
  exports.leftShiftMantissa = leftShiftMantissa;
  exports.lineSegmentIntersect = lineSegmentIntersect;
  exports.lineSegmentIntersectsBox = lineSegmentIntersectsBox;
  exports.lookupCompositionType = lookupCompositionType;
  exports.measureText = measureText;
  exports.mulAddWords = mulAddWords;
  exports.mulWords = mulWords;
  exports.multiplyBigInts = multiplyBigInts;
  exports.multiplyMantissaByInteger = multiplyMantissaByInteger;
  exports.multiplyMantissas = multiplyMantissas;
  exports.neededWordsForPrecision = neededWordsForPrecision;
  exports.packRectangles = packRectangles;
  exports.parseString = parseString;
  exports.pointLineSegmentDistanceSquared = pointLineSegmentDistanceSquared;
  exports.potpack = potpack;
  exports.prettyPrintFloat = prettyPrintFloat;
  exports.relaxedPrint = relaxedPrint;
  exports.resolveOperator = resolveOperator;
  exports.rightShiftMantissa = rightShiftMantissa;
  exports.roundMantissaToPrecision = roundMantissaToPrecision;
  exports.roundingModeToString = roundingModeToString;
  exports.setGlobalPrecision = setGlobalPrecision;
  exports.setGlobalRoundingMode = setGlobalRoundingMode;
  exports.simplifyPolyline = simplifyPolyline;
  exports.sqrtMantissa = sqrtMantissa;
  exports.subtractMantissas = subtractMantissas;
  exports.toContours = toContours;
  exports.toDir = toDir;
  exports.tokenizer = tokenizer;
  exports.utils = utils;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
